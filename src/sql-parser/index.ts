/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { start: peg$parsestart };
// @ts-ignore
  var peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  var peg$c0 = "extension";
  var peg$c1 = "schema";
  var peg$c2 = "version";
  var peg$c3 = "increment";
  var peg$c4 = "minvalue";
  var peg$c5 = "no";
  var peg$c6 = "maxvalue";
  var peg$c7 = "start";
  var peg$c8 = "cache";
  var peg$c9 = "cycle";
  var peg$c10 = "owned";
  var peg$c11 = "none";
  var peg$c12 = "nulls";
  var peg$c13 = "first";
  var peg$c14 = "last";
  var peg$c15 = "auto_increment";
  var peg$c16 = "unique";
  var peg$c17 = "key";
  var peg$c18 = "primary";
  var peg$c19 = "column_format";
  var peg$c20 = "fixed";
  var peg$c21 = "dynamic";
  var peg$c22 = "default";
  var peg$c23 = "storage";
  var peg$c24 = "disk";
  var peg$c25 = "memory";
  var peg$c26 = "algorithm";
  var peg$c27 = "instant";
  var peg$c28 = "inplace";
  var peg$c29 = "copy";
  var peg$c30 = "lock";
  var peg$c31 = "shared";
  var peg$c32 = "exclusive";
  var peg$c33 = "primary key";
  var peg$c34 = "foreign key";
  var peg$c35 = "match full";
  var peg$c36 = "match partial";
  var peg$c37 = "match simple";
  var peg$c38 = "on delete";
  var peg$c39 = "on update";
  var peg$c40 = "restrict";
  var peg$c41 = "cascade";
  var peg$c42 = "set null";
  var peg$c43 = "no action";
  var peg$c44 = "set default";
  var peg$c45 = "trigger";
  var peg$c46 = "before";
  var peg$c47 = "after";
  var peg$c48 = "instead of";
  var peg$c49 = "on";
  var peg$c50 = "execute";
  var peg$c51 = "procedure";
  var peg$c52 = "of";
  var peg$c53 = "not";
  var peg$c54 = "deferrable";
  var peg$c55 = "initially immediate";
  var peg$c56 = "initially deferred";
  var peg$c57 = "for";
  var peg$c58 = "each";
  var peg$c59 = "row";
  var peg$c60 = "statement";
  var peg$c61 = "character";
  var peg$c62 = "set";
  var peg$c63 = "charset";
  var peg$c64 = "collate";
  var peg$c65 = "avg_row_length";
  var peg$c66 = "key_block_size";
  var peg$c67 = "max_rows";
  var peg$c68 = "min_rows";
  var peg$c69 = "stats_sample_pages";
  var peg$c70 = "connection";
  var peg$c71 = "compression";
  var peg$c72 = "'";
  var peg$c73 = "zlib";
  var peg$c74 = "lz4";
  var peg$c75 = "engine";
  var peg$c76 = "in";
  var peg$c77 = "access share";
  var peg$c78 = "row share";
  var peg$c79 = "row exclusive";
  var peg$c80 = "share update exclusive";
  var peg$c81 = "share row exclusive";
  var peg$c82 = "access exclusive";
  var peg$c83 = "share";
  var peg$c84 = "mode";
  var peg$c85 = "nowait";
  var peg$c86 = "tables";
  var peg$c87 = "(";
  var peg$c88 = ")";
  var peg$c89 = "btree";
  var peg$c90 = "hash";
  var peg$c91 = "gist";
  var peg$c92 = "gin";
  var peg$c93 = "with";
  var peg$c94 = "parser";
  var peg$c95 = "visible";
  var peg$c96 = "invisible";
  var peg$c97 = "tablesample";
  var peg$c98 = "repeatable";
  var peg$c99 = "following";
  var peg$c100 = "preceding";
  var peg$c101 = "current";
  var peg$c102 = "unbounded";
  var peg$c103 = "=";
  var peg$c104 = "!";
  var peg$c105 = ">=";
  var peg$c106 = ">";
  var peg$c107 = "<=";
  var peg$c108 = "<>";
  var peg$c109 = "<";
  var peg$c110 = "!=";
  var peg$c111 = "similar";
  var peg$c112 = "@>";
  var peg$c113 = "<@";
  var peg$c114 = "?";
  var peg$c115 = "?|";
  var peg$c116 = "?&";
  var peg$c117 = "#-";
  var peg$c118 = "+";
  var peg$c119 = "-";
  var peg$c120 = "*";
  var peg$c121 = "/";
  var peg$c122 = "%";
  var peg$c123 = "$";
  var peg$c124 = "e";
  var peg$c125 = "\"";
  var peg$c126 = "`";
  var peg$c127 = ":";
  var peg$c128 = "over";
  var peg$c129 = "first_value";
  var peg$c130 = "last_value";
  var peg$c131 = "row_number";
  var peg$c132 = "dense_rank";
  var peg$c133 = "rank";
  var peg$c134 = "lag";
  var peg$c135 = "lead";
  var peg$c136 = "nth_value";
  var peg$c137 = "ignore";
  var peg$c138 = "respect";
  var peg$c139 = "percentile_cont";
  var peg$c140 = "percentile_disc";
  var peg$c141 = "within";
  var peg$c142 = "century";
  var peg$c143 = "day";
  var peg$c144 = "decade";
  var peg$c145 = "dow";
  var peg$c146 = "doy";
  var peg$c147 = "epoch";
  var peg$c148 = "hour";
  var peg$c149 = "isodow";
  var peg$c150 = "isoyear";
  var peg$c151 = "microseconds";
  var peg$c152 = "millennium";
  var peg$c153 = "milliseconds";
  var peg$c154 = "minute";
  var peg$c155 = "month";
  var peg$c156 = "quarter";
  var peg$c157 = "second";
  var peg$c158 = "timezone";
  var peg$c159 = "timezone_hour";
  var peg$c160 = "timezone_minute";
  var peg$c161 = "week";
  var peg$c162 = "year";
  var peg$c163 = "\\'";
  var peg$c164 = "\\\"";
  var peg$c165 = "\\\\";
  var peg$c166 = "\\/";
  var peg$c167 = "\\b";
  var peg$c168 = "\\f";
  var peg$c169 = "\\n";
  var peg$c170 = "\\r";
  var peg$c171 = "\\t";
  var peg$c172 = "\\u";
  var peg$c173 = "\\";
  var peg$c174 = "''";
  var peg$c175 = ".";
  var peg$c176 = "null";
  var peg$c177 = "not null";
  var peg$c178 = "true";
  var peg$c179 = "to";
  var peg$c180 = "false";
  var peg$c181 = "show";
  var peg$c182 = "drop";
  var peg$c183 = "use";
  var peg$c184 = "alter";
  var peg$c185 = "select";
  var peg$c186 = "update";
  var peg$c187 = "create";
  var peg$c188 = "temporary";
  var peg$c189 = "temp";
  var peg$c190 = "if not exists";
  var peg$c191 = "delete";
  var peg$c192 = "insert";
  var peg$c193 = "RECURSIVE";
  var peg$c194 = "replace";
  var peg$c195 = "returning";
  var peg$c196 = "rename";
  var peg$c197 = "explain";
  var peg$c198 = "partition";
  var peg$c199 = "into";
  var peg$c200 = "from";
  var peg$c201 = "as";
  var peg$c202 = "table";
  var peg$c203 = "database";
  var peg$c204 = "scheme";
  var peg$c205 = "sequence";
  var peg$c206 = "tablespace";
  var peg$c207 = "left";
  var peg$c208 = "right";
  var peg$c209 = "full";
  var peg$c210 = "inner";
  var peg$c211 = "join";
  var peg$c212 = "outer";
  var peg$c213 = "union";
  var peg$c214 = "values";
  var peg$c215 = "using";
  var peg$c216 = "where";
  var peg$c217 = "group";
  var peg$c218 = "by";
  var peg$c219 = "order";
  var peg$c220 = "having";
  var peg$c221 = "window";
  var peg$c222 = "limit";
  var peg$c223 = "offset";
  var peg$c224 = "asc";
  var peg$c225 = "desc";
  var peg$c226 = "all";
  var peg$c227 = "distinct";
  var peg$c228 = "between";
  var peg$c229 = "is";
  var peg$c230 = "like";
  var peg$c231 = "ilike";
  var peg$c232 = "exists";
  var peg$c233 = "and";
  var peg$c234 = "or";
  var peg$c235 = "array";
  var peg$c236 = "array_agg";
  var peg$c237 = "count";
  var peg$c238 = "group_concat";
  var peg$c239 = "max";
  var peg$c240 = "min";
  var peg$c241 = "sum";
  var peg$c242 = "avg";
  var peg$c243 = "extract";
  var peg$c244 = "call";
  var peg$c245 = "case";
  var peg$c246 = "when";
  var peg$c247 = "then";
  var peg$c248 = "else";
  var peg$c249 = "end";
  var peg$c250 = "cast";
  var peg$c251 = "bool";
  var peg$c252 = "boolean";
  var peg$c253 = "char";
  var peg$c254 = "varchar";
  var peg$c255 = "numeric";
  var peg$c256 = "decimal";
  var peg$c257 = "signed";
  var peg$c258 = "unsigned";
  var peg$c259 = "int";
  var peg$c260 = "zerofill";
  var peg$c261 = "integer";
  var peg$c262 = "json";
  var peg$c263 = "jsonb";
  var peg$c264 = "geometry";
  var peg$c265 = "smallint";
  var peg$c266 = "serial";
  var peg$c267 = "tinyint";
  var peg$c268 = "tinytext";
  var peg$c269 = "text";
  var peg$c270 = "mediumtext";
  var peg$c271 = "longtext";
  var peg$c272 = "bigint";
  var peg$c273 = "enum";
  var peg$c274 = "float";
  var peg$c275 = "double";
  var peg$c276 = "date";
  var peg$c277 = "datetime";
  var peg$c278 = "rows";
  var peg$c279 = "time";
  var peg$c280 = "timestamp";
  var peg$c281 = "truncate";
  var peg$c282 = "user";
  var peg$c283 = "uuid";
  var peg$c284 = "current_date";
  var peg$c285 = "adddate";
  var peg$c286 = "interval";
  var peg$c287 = "current_time";
  var peg$c288 = "current_timestamp";
  var peg$c289 = "current_user";
  var peg$c290 = "session_user";
  var peg$c291 = "system_user";
  var peg$c292 = "global";
  var peg$c293 = "session";
  var peg$c294 = "local";
  var peg$c295 = "persist";
  var peg$c296 = "persist_only";
  var peg$c297 = "@";
  var peg$c298 = "@@";
  var peg$c299 = "return";
  var peg$c300 = ":=";
  var peg$c301 = "::";
  var peg$c302 = "dual";
  var peg$c303 = "add";
  var peg$c304 = "column";
  var peg$c305 = "index";
  var peg$c306 = "fulltext";
  var peg$c307 = "spatial";
  var peg$c308 = "comment";
  var peg$c309 = "constraint";
  var peg$c310 = "concurrently";
  var peg$c311 = "references";
  var peg$c312 = "sql_calc_found_rows";
  var peg$c313 = "sql_cache";
  var peg$c314 = "sql_no_cache";
  var peg$c315 = "sql_small_result";
  var peg$c316 = "sql_big_result";
  var peg$c317 = "sql_buffer_result";
  var peg$c318 = ",";
  var peg$c319 = "[";
  var peg$c320 = "]";
  var peg$c321 = ";";
  var peg$c322 = "->";
  var peg$c323 = "->>";
  var peg$c324 = "#>";
  var peg$c325 = "#>>";
  var peg$c326 = "||";
  var peg$c327 = "&&";
  var peg$c328 = "/*";
  var peg$c329 = "*/";
  var peg$c330 = "--";
  var peg$c331 = "#";

  var peg$r0 = /^[^"]/;
  var peg$r1 = /^[^']/;
  var peg$r2 = /^[^`]/;
  var peg$r3 = /^[A-Za-z_]/;
  var peg$r4 = /^[A-Za-z0-9_\-]/;
  var peg$r5 = /^[A-Za-z0-9_]/;
  var peg$r6 = /^[\n]/;
  var peg$r7 = /^[^"\\\0-\x1F\x7F]/;
  var peg$r8 = /^[^'\\]/;
  var peg$r9 = /^[\n\r]/;
  var peg$r10 = /^[0-9]/;
  var peg$r11 = /^[0-9a-fA-F]/;
  var peg$r12 = /^[eE]/;
  var peg$r13 = /^[+\-]/;
  var peg$r14 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation("EXTENSION", true);
  var peg$e1 = peg$literalExpectation("SCHEMA", true);
  var peg$e2 = peg$literalExpectation("VERSION", true);
  var peg$e3 = peg$literalExpectation("INCREMENT", true);
  var peg$e4 = peg$literalExpectation("MINVALUE", true);
  var peg$e5 = peg$literalExpectation("NO", true);
  var peg$e6 = peg$literalExpectation("MAXVALUE", true);
  var peg$e7 = peg$literalExpectation("START", true);
  var peg$e8 = peg$literalExpectation("CACHE", true);
  var peg$e9 = peg$literalExpectation("CYCLE", true);
  var peg$e10 = peg$literalExpectation("OWNED", true);
  var peg$e11 = peg$literalExpectation("NONE", true);
  var peg$e12 = peg$literalExpectation("NULLS", true);
  var peg$e13 = peg$literalExpectation("FIRST", true);
  var peg$e14 = peg$literalExpectation("LAST", true);
  var peg$e15 = peg$literalExpectation("AUTO_INCREMENT", true);
  var peg$e16 = peg$literalExpectation("UNIQUE", true);
  var peg$e17 = peg$literalExpectation("KEY", true);
  var peg$e18 = peg$literalExpectation("PRIMARY", true);
  var peg$e19 = peg$literalExpectation("COLUMN_FORMAT", true);
  var peg$e20 = peg$literalExpectation("FIXED", true);
  var peg$e21 = peg$literalExpectation("DYNAMIC", true);
  var peg$e22 = peg$literalExpectation("DEFAULT", true);
  var peg$e23 = peg$literalExpectation("STORAGE", true);
  var peg$e24 = peg$literalExpectation("DISK", true);
  var peg$e25 = peg$literalExpectation("MEMORY", true);
  var peg$e26 = peg$literalExpectation("ALGORITHM", true);
  var peg$e27 = peg$literalExpectation("INSTANT", true);
  var peg$e28 = peg$literalExpectation("INPLACE", true);
  var peg$e29 = peg$literalExpectation("COPY", true);
  var peg$e30 = peg$literalExpectation("LOCK", true);
  var peg$e31 = peg$literalExpectation("SHARED", true);
  var peg$e32 = peg$literalExpectation("EXCLUSIVE", true);
  var peg$e33 = peg$literalExpectation("PRIMARY KEY", true);
  var peg$e34 = peg$literalExpectation("FOREIGN KEY", true);
  var peg$e35 = peg$literalExpectation("MATCH FULL", true);
  var peg$e36 = peg$literalExpectation("MATCH PARTIAL", true);
  var peg$e37 = peg$literalExpectation("MATCH SIMPLE", true);
  var peg$e38 = peg$literalExpectation("ON DELETE", true);
  var peg$e39 = peg$literalExpectation("ON UPDATE", true);
  var peg$e40 = peg$literalExpectation("RESTRICT", true);
  var peg$e41 = peg$literalExpectation("CASCADE", true);
  var peg$e42 = peg$literalExpectation("SET NULL", true);
  var peg$e43 = peg$literalExpectation("NO ACTION", true);
  var peg$e44 = peg$literalExpectation("SET DEFAULT", true);
  var peg$e45 = peg$literalExpectation("TRIGGER", true);
  var peg$e46 = peg$literalExpectation("BEFORE", true);
  var peg$e47 = peg$literalExpectation("AFTER", true);
  var peg$e48 = peg$literalExpectation("INSTEAD OF", true);
  var peg$e49 = peg$literalExpectation("ON", true);
  var peg$e50 = peg$literalExpectation("EXECUTE", true);
  var peg$e51 = peg$literalExpectation("PROCEDURE", true);
  var peg$e52 = peg$literalExpectation("OF", true);
  var peg$e53 = peg$literalExpectation("NOT", true);
  var peg$e54 = peg$literalExpectation("DEFERRABLE", true);
  var peg$e55 = peg$literalExpectation("INITIALLY IMMEDIATE", true);
  var peg$e56 = peg$literalExpectation("INITIALLY DEFERRED", true);
  var peg$e57 = peg$literalExpectation("FOR", true);
  var peg$e58 = peg$literalExpectation("EACH", true);
  var peg$e59 = peg$literalExpectation("ROW", true);
  var peg$e60 = peg$literalExpectation("STATEMENT", true);
  var peg$e61 = peg$literalExpectation("CHARACTER", true);
  var peg$e62 = peg$literalExpectation("SET", true);
  var peg$e63 = peg$literalExpectation("CHARSET", true);
  var peg$e64 = peg$literalExpectation("COLLATE", true);
  var peg$e65 = peg$literalExpectation("AVG_ROW_LENGTH", true);
  var peg$e66 = peg$literalExpectation("KEY_BLOCK_SIZE", true);
  var peg$e67 = peg$literalExpectation("MAX_ROWS", true);
  var peg$e68 = peg$literalExpectation("MIN_ROWS", true);
  var peg$e69 = peg$literalExpectation("STATS_SAMPLE_PAGES", true);
  var peg$e70 = peg$literalExpectation("CONNECTION", true);
  var peg$e71 = peg$literalExpectation("COMPRESSION", true);
  var peg$e72 = peg$literalExpectation("'", false);
  var peg$e73 = peg$literalExpectation("ZLIB", true);
  var peg$e74 = peg$literalExpectation("LZ4", true);
  var peg$e75 = peg$literalExpectation("ENGINE", true);
  var peg$e76 = peg$literalExpectation("IN", true);
  var peg$e77 = peg$literalExpectation("ACCESS SHARE", true);
  var peg$e78 = peg$literalExpectation("ROW SHARE", true);
  var peg$e79 = peg$literalExpectation("ROW EXCLUSIVE", true);
  var peg$e80 = peg$literalExpectation("SHARE UPDATE EXCLUSIVE", true);
  var peg$e81 = peg$literalExpectation("SHARE ROW EXCLUSIVE", true);
  var peg$e82 = peg$literalExpectation("ACCESS EXCLUSIVE", true);
  var peg$e83 = peg$literalExpectation("SHARE", true);
  var peg$e84 = peg$literalExpectation("MODE", true);
  var peg$e85 = peg$literalExpectation("NOWAIT", true);
  var peg$e86 = peg$literalExpectation("TABLES", true);
  var peg$e87 = peg$literalExpectation("(", false);
  var peg$e88 = peg$literalExpectation(")", false);
  var peg$e89 = peg$literalExpectation("BTREE", true);
  var peg$e90 = peg$literalExpectation("HASH", true);
  var peg$e91 = peg$literalExpectation("GIST", true);
  var peg$e92 = peg$literalExpectation("GIN", true);
  var peg$e93 = peg$literalExpectation("WITH", true);
  var peg$e94 = peg$literalExpectation("PARSER", true);
  var peg$e95 = peg$literalExpectation("VISIBLE", true);
  var peg$e96 = peg$literalExpectation("INVISIBLE", true);
  var peg$e97 = peg$literalExpectation("TABLESAMPLE", true);
  var peg$e98 = peg$literalExpectation("REPEATABLE", true);
  var peg$e99 = peg$literalExpectation("FOLLOWING", true);
  var peg$e100 = peg$literalExpectation("PRECEDING", true);
  var peg$e101 = peg$literalExpectation("CURRENT", true);
  var peg$e102 = peg$literalExpectation("UNBOUNDED", true);
  var peg$e103 = peg$literalExpectation("=", false);
  var peg$e104 = peg$literalExpectation("!", false);
  var peg$e105 = peg$literalExpectation(">=", false);
  var peg$e106 = peg$literalExpectation(">", false);
  var peg$e107 = peg$literalExpectation("<=", false);
  var peg$e108 = peg$literalExpectation("<>", false);
  var peg$e109 = peg$literalExpectation("<", false);
  var peg$e110 = peg$literalExpectation("!=", false);
  var peg$e111 = peg$literalExpectation("SIMILAR", true);
  var peg$e112 = peg$literalExpectation("@>", false);
  var peg$e113 = peg$literalExpectation("<@", false);
  var peg$e114 = peg$literalExpectation("?", false);
  var peg$e115 = peg$literalExpectation("?|", false);
  var peg$e116 = peg$literalExpectation("?&", false);
  var peg$e117 = peg$literalExpectation("#-", false);
  var peg$e118 = peg$literalExpectation("+", false);
  var peg$e119 = peg$literalExpectation("-", false);
  var peg$e120 = peg$literalExpectation("*", false);
  var peg$e121 = peg$literalExpectation("/", false);
  var peg$e122 = peg$literalExpectation("%", false);
  var peg$e123 = peg$literalExpectation("$", false);
  var peg$e124 = peg$literalExpectation("E", true);
  var peg$e125 = peg$literalExpectation("\"", false);
  var peg$e126 = peg$classExpectation(["\""], true, false);
  var peg$e127 = peg$classExpectation(["'"], true, false);
  var peg$e128 = peg$literalExpectation("`", false);
  var peg$e129 = peg$classExpectation(["`"], true, false);
  var peg$e130 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false);
  var peg$e131 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_", "-"], false, false);
  var peg$e132 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e133 = peg$literalExpectation(":", false);
  var peg$e134 = peg$literalExpectation("OVER", true);
  var peg$e135 = peg$literalExpectation("FIRST_VALUE", true);
  var peg$e136 = peg$literalExpectation("LAST_VALUE", true);
  var peg$e137 = peg$literalExpectation("ROW_NUMBER", true);
  var peg$e138 = peg$literalExpectation("DENSE_RANK", true);
  var peg$e139 = peg$literalExpectation("RANK", true);
  var peg$e140 = peg$literalExpectation("LAG", true);
  var peg$e141 = peg$literalExpectation("LEAD", true);
  var peg$e142 = peg$literalExpectation("NTH_VALUE", true);
  var peg$e143 = peg$literalExpectation("IGNORE", true);
  var peg$e144 = peg$literalExpectation("RESPECT", true);
  var peg$e145 = peg$literalExpectation("percentile_cont", true);
  var peg$e146 = peg$literalExpectation("percentile_disc", true);
  var peg$e147 = peg$literalExpectation("within", true);
  var peg$e148 = peg$literalExpectation("mode", true);
  var peg$e149 = peg$literalExpectation("CENTURY", true);
  var peg$e150 = peg$literalExpectation("DAY", true);
  var peg$e151 = peg$literalExpectation("DECADE", true);
  var peg$e152 = peg$literalExpectation("DOW", true);
  var peg$e153 = peg$literalExpectation("DOY", true);
  var peg$e154 = peg$literalExpectation("EPOCH", true);
  var peg$e155 = peg$literalExpectation("HOUR", true);
  var peg$e156 = peg$literalExpectation("ISODOW", true);
  var peg$e157 = peg$literalExpectation("ISOYEAR", true);
  var peg$e158 = peg$literalExpectation("MICROSECONDS", true);
  var peg$e159 = peg$literalExpectation("MILLENNIUM", true);
  var peg$e160 = peg$literalExpectation("MILLISECONDS", true);
  var peg$e161 = peg$literalExpectation("MINUTE", true);
  var peg$e162 = peg$literalExpectation("MONTH", true);
  var peg$e163 = peg$literalExpectation("QUARTER", true);
  var peg$e164 = peg$literalExpectation("SECOND", true);
  var peg$e165 = peg$literalExpectation("TIMEZONE", true);
  var peg$e166 = peg$literalExpectation("TIMEZONE_HOUR", true);
  var peg$e167 = peg$literalExpectation("TIMEZONE_MINUTE", true);
  var peg$e168 = peg$literalExpectation("WEEK", true);
  var peg$e169 = peg$literalExpectation("YEAR", true);
  var peg$e170 = peg$classExpectation(["\n"], false, false);
  var peg$e171 = peg$classExpectation(["\"", "\\", ["\0", "\x1F"], "\x7F"], true, false);
  var peg$e172 = peg$classExpectation(["'", "\\"], true, false);
  var peg$e173 = peg$literalExpectation("\\'", false);
  var peg$e174 = peg$literalExpectation("\\\"", false);
  var peg$e175 = peg$literalExpectation("\\\\", false);
  var peg$e176 = peg$literalExpectation("\\/", false);
  var peg$e177 = peg$literalExpectation("\\b", false);
  var peg$e178 = peg$literalExpectation("\\f", false);
  var peg$e179 = peg$literalExpectation("\\n", false);
  var peg$e180 = peg$literalExpectation("\\r", false);
  var peg$e181 = peg$literalExpectation("\\t", false);
  var peg$e182 = peg$literalExpectation("\\u", false);
  var peg$e183 = peg$literalExpectation("\\", false);
  var peg$e184 = peg$literalExpectation("''", false);
  var peg$e185 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e186 = peg$literalExpectation(".", false);
  var peg$e187 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e188 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e189 = peg$classExpectation(["e", "E"], false, false);
  var peg$e190 = peg$classExpectation(["+", "-"], false, false);
  var peg$e191 = peg$literalExpectation("NULL", true);
  var peg$e192 = peg$literalExpectation("NOT NULL", true);
  var peg$e193 = peg$literalExpectation("TRUE", true);
  var peg$e194 = peg$literalExpectation("TO", true);
  var peg$e195 = peg$literalExpectation("FALSE", true);
  var peg$e196 = peg$literalExpectation("SHOW", true);
  var peg$e197 = peg$literalExpectation("DROP", true);
  var peg$e198 = peg$literalExpectation("USE", true);
  var peg$e199 = peg$literalExpectation("ALTER", true);
  var peg$e200 = peg$literalExpectation("SELECT", true);
  var peg$e201 = peg$literalExpectation("UPDATE", true);
  var peg$e202 = peg$literalExpectation("CREATE", true);
  var peg$e203 = peg$literalExpectation("TEMPORARY", true);
  var peg$e204 = peg$literalExpectation("TEMP", true);
  var peg$e205 = peg$literalExpectation("IF NOT EXISTS", true);
  var peg$e206 = peg$literalExpectation("DELETE", true);
  var peg$e207 = peg$literalExpectation("INSERT", true);
  var peg$e208 = peg$literalExpectation("RECURSIVE", false);
  var peg$e209 = peg$literalExpectation("REPLACE", true);
  var peg$e210 = peg$literalExpectation("RETURNING", true);
  var peg$e211 = peg$literalExpectation("RENAME", true);
  var peg$e212 = peg$literalExpectation("EXPLAIN", true);
  var peg$e213 = peg$literalExpectation("PARTITION", true);
  var peg$e214 = peg$literalExpectation("INTO", true);
  var peg$e215 = peg$literalExpectation("FROM", true);
  var peg$e216 = peg$literalExpectation("AS", true);
  var peg$e217 = peg$literalExpectation("TABLE", true);
  var peg$e218 = peg$literalExpectation("DATABASE", true);
  var peg$e219 = peg$literalExpectation("SCHEME", true);
  var peg$e220 = peg$literalExpectation("SEQUENCE", true);
  var peg$e221 = peg$literalExpectation("TABLESPACE", true);
  var peg$e222 = peg$literalExpectation("LEFT", true);
  var peg$e223 = peg$literalExpectation("RIGHT", true);
  var peg$e224 = peg$literalExpectation("FULL", true);
  var peg$e225 = peg$literalExpectation("INNER", true);
  var peg$e226 = peg$literalExpectation("JOIN", true);
  var peg$e227 = peg$literalExpectation("OUTER", true);
  var peg$e228 = peg$literalExpectation("UNION", true);
  var peg$e229 = peg$literalExpectation("VALUES", true);
  var peg$e230 = peg$literalExpectation("USING", true);
  var peg$e231 = peg$literalExpectation("WHERE", true);
  var peg$e232 = peg$literalExpectation("GROUP", true);
  var peg$e233 = peg$literalExpectation("BY", true);
  var peg$e234 = peg$literalExpectation("ORDER", true);
  var peg$e235 = peg$literalExpectation("HAVING", true);
  var peg$e236 = peg$literalExpectation("WINDOW", true);
  var peg$e237 = peg$literalExpectation("LIMIT", true);
  var peg$e238 = peg$literalExpectation("OFFSET", true);
  var peg$e239 = peg$literalExpectation("ASC", true);
  var peg$e240 = peg$literalExpectation("DESC", true);
  var peg$e241 = peg$literalExpectation("ALL", true);
  var peg$e242 = peg$literalExpectation("DISTINCT", true);
  var peg$e243 = peg$literalExpectation("BETWEEN", true);
  var peg$e244 = peg$literalExpectation("IS", true);
  var peg$e245 = peg$literalExpectation("LIKE", true);
  var peg$e246 = peg$literalExpectation("ILIKE", true);
  var peg$e247 = peg$literalExpectation("EXISTS", true);
  var peg$e248 = peg$literalExpectation("AND", true);
  var peg$e249 = peg$literalExpectation("OR", true);
  var peg$e250 = peg$literalExpectation("ARRAY", true);
  var peg$e251 = peg$literalExpectation("ARRAY_AGG", true);
  var peg$e252 = peg$literalExpectation("COUNT", true);
  var peg$e253 = peg$literalExpectation("GROUP_CONCAT", true);
  var peg$e254 = peg$literalExpectation("MAX", true);
  var peg$e255 = peg$literalExpectation("MIN", true);
  var peg$e256 = peg$literalExpectation("SUM", true);
  var peg$e257 = peg$literalExpectation("AVG", true);
  var peg$e258 = peg$literalExpectation("EXTRACT", true);
  var peg$e259 = peg$literalExpectation("CALL", true);
  var peg$e260 = peg$literalExpectation("CASE", true);
  var peg$e261 = peg$literalExpectation("WHEN", true);
  var peg$e262 = peg$literalExpectation("THEN", true);
  var peg$e263 = peg$literalExpectation("ELSE", true);
  var peg$e264 = peg$literalExpectation("END", true);
  var peg$e265 = peg$literalExpectation("CAST", true);
  var peg$e266 = peg$literalExpectation("BOOL", true);
  var peg$e267 = peg$literalExpectation("BOOLEAN", true);
  var peg$e268 = peg$literalExpectation("CHAR", true);
  var peg$e269 = peg$literalExpectation("VARCHAR", true);
  var peg$e270 = peg$literalExpectation("NUMERIC", true);
  var peg$e271 = peg$literalExpectation("DECIMAL", true);
  var peg$e272 = peg$literalExpectation("SIGNED", true);
  var peg$e273 = peg$literalExpectation("UNSIGNED", true);
  var peg$e274 = peg$literalExpectation("INT", true);
  var peg$e275 = peg$literalExpectation("ZEROFILL", true);
  var peg$e276 = peg$literalExpectation("INTEGER", true);
  var peg$e277 = peg$literalExpectation("JSON", true);
  var peg$e278 = peg$literalExpectation("JSONB", true);
  var peg$e279 = peg$literalExpectation("GEOMETRY", true);
  var peg$e280 = peg$literalExpectation("SMALLINT", true);
  var peg$e281 = peg$literalExpectation("SERIAL", true);
  var peg$e282 = peg$literalExpectation("TINYINT", true);
  var peg$e283 = peg$literalExpectation("TINYTEXT", true);
  var peg$e284 = peg$literalExpectation("TEXT", true);
  var peg$e285 = peg$literalExpectation("MEDIUMTEXT", true);
  var peg$e286 = peg$literalExpectation("LONGTEXT", true);
  var peg$e287 = peg$literalExpectation("BIGINT", true);
  var peg$e288 = peg$literalExpectation("ENUM", true);
  var peg$e289 = peg$literalExpectation("FLOAT", true);
  var peg$e290 = peg$literalExpectation("DOUBLE", true);
  var peg$e291 = peg$literalExpectation("DATE", true);
  var peg$e292 = peg$literalExpectation("DATETIME", true);
  var peg$e293 = peg$literalExpectation("ROWS", true);
  var peg$e294 = peg$literalExpectation("TIME", true);
  var peg$e295 = peg$literalExpectation("TIMESTAMP", true);
  var peg$e296 = peg$literalExpectation("TRUNCATE", true);
  var peg$e297 = peg$literalExpectation("USER", true);
  var peg$e298 = peg$literalExpectation("UUID", true);
  var peg$e299 = peg$literalExpectation("CURRENT_DATE", true);
  var peg$e300 = peg$literalExpectation("ADDDATE", true);
  var peg$e301 = peg$literalExpectation("INTERVAL", true);
  var peg$e302 = peg$literalExpectation("CURRENT_TIME", true);
  var peg$e303 = peg$literalExpectation("CURRENT_TIMESTAMP", true);
  var peg$e304 = peg$literalExpectation("CURRENT_USER", true);
  var peg$e305 = peg$literalExpectation("SESSION_USER", true);
  var peg$e306 = peg$literalExpectation("SYSTEM_USER", true);
  var peg$e307 = peg$literalExpectation("GLOBAL", true);
  var peg$e308 = peg$literalExpectation("SESSION", true);
  var peg$e309 = peg$literalExpectation("LOCAL", true);
  var peg$e310 = peg$literalExpectation("PERSIST", true);
  var peg$e311 = peg$literalExpectation("PERSIST_ONLY", true);
  var peg$e312 = peg$literalExpectation("@", false);
  var peg$e313 = peg$literalExpectation("@@", false);
  var peg$e314 = peg$literalExpectation("return", true);
  var peg$e315 = peg$literalExpectation(":=", false);
  var peg$e316 = peg$literalExpectation("::", false);
  var peg$e317 = peg$literalExpectation("DUAL", true);
  var peg$e318 = peg$literalExpectation("ADD", true);
  var peg$e319 = peg$literalExpectation("COLUMN", true);
  var peg$e320 = peg$literalExpectation("INDEX", true);
  var peg$e321 = peg$literalExpectation("FULLTEXT", true);
  var peg$e322 = peg$literalExpectation("SPATIAL", true);
  var peg$e323 = peg$literalExpectation("COMMENT", true);
  var peg$e324 = peg$literalExpectation("CONSTRAINT", true);
  var peg$e325 = peg$literalExpectation("CONCURRENTLY", true);
  var peg$e326 = peg$literalExpectation("REFERENCES", true);
  var peg$e327 = peg$literalExpectation("SQL_CALC_FOUND_ROWS", true);
  var peg$e328 = peg$literalExpectation("SQL_CACHE", true);
  var peg$e329 = peg$literalExpectation("SQL_NO_CACHE", true);
  var peg$e330 = peg$literalExpectation("SQL_SMALL_RESULT", true);
  var peg$e331 = peg$literalExpectation("SQL_BIG_RESULT", true);
  var peg$e332 = peg$literalExpectation("SQL_BUFFER_RESULT", true);
  var peg$e333 = peg$literalExpectation(",", false);
  var peg$e334 = peg$literalExpectation("[", false);
  var peg$e335 = peg$literalExpectation("]", false);
  var peg$e336 = peg$literalExpectation(";", false);
  var peg$e337 = peg$literalExpectation("->", false);
  var peg$e338 = peg$literalExpectation("->>", false);
  var peg$e339 = peg$literalExpectation("#>", false);
  var peg$e340 = peg$literalExpectation("#>>", false);
  var peg$e341 = peg$literalExpectation("||", false);
  var peg$e342 = peg$literalExpectation("&&", false);
  var peg$e343 = peg$literalExpectation("/*", false);
  var peg$e344 = peg$literalExpectation("*/", false);
  var peg$e345 = peg$literalExpectation("--", false);
  var peg$e346 = peg$literalExpectation("#", false);
  var peg$e347 = peg$anyExpectation();
  var peg$e348 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
// @ts-ignore

  var peg$f0 = function(n) {
    // => multiple_stmt | cmd_stmt | crud_stmt
// @ts-ignore
    return n
  };// @ts-ignore

  var peg$f1 = function(head, tail) {
      /*
      // is in reality: { tableList: any[]; columnList: any[]; ast: T; }
// @ts-ignore
      export type AstStatement<T> = T;
// @ts-ignore
       => AstStatement<crud_stmt[]> */
// @ts-ignore
      const cur = [head && head.ast || head];
// @ts-ignore
      for (let i = 0; i < tail.length; i++) {
// @ts-ignore
        if(!tail[i][3] || tail[i][3].length === 0) continue;
// @ts-ignore
        cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);
      }
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
      	ast: cur
      }
    };// @ts-ignore

  var peg$f2 = function(head, tail, ob, l) {
// @ts-ignore
     /* export interface union_stmt_node extends select_stmt_node  {
// @ts-ignore
         _next: union_stmt_node;
// @ts-ignore
         union: 'union' | 'union all';
      }
// @ts-ignore
     => AstStatement<union_stmt_node>
     */
// @ts-ignore
      let cur = head
// @ts-ignore
      for (let i = 0; i < tail.length; i++) {
// @ts-ignore
        cur._next = tail[i][5]
// @ts-ignore
        cur.union = tail[i][3] ? 'union all' : 'union'
// @ts-ignore
        cur = cur._next
      }
// @ts-ignore
      if(ob) head._orderby = ob
// @ts-ignore
      if(l) head._limit = l
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: head
      }
    };// @ts-ignore

  var peg$f3 = function(a, e, ife, n, w, s, v, f) {
      /*
// @ts-ignore
       export type nameOrLiteral = literal_string | { type: 'same', value: string; };
      => {
// @ts-ignore
          type: 'create';
// @ts-ignore
          keyword: 'extension';
// @ts-ignore
          if_not_exists?: 'if not exists';
// @ts-ignore
          extension: nameOrLiteral;
// @ts-ignore
          with: 'with';
// @ts-ignore
          schema: nameOrLiteral;
// @ts-ignore
          version: nameOrLiteral;
// @ts-ignore
          from: nameOrLiteral;
        }
      */
// @ts-ignore
      return {
// @ts-ignore
        type: 'create',
// @ts-ignore
        keyword: e.toLowerCase(),
// @ts-ignore
        if_not_exists: ife && ife[0].toLowerCase(),
// @ts-ignore
        extension: commonStrToLiteral(n),
// @ts-ignore
        with: w && w[0].toLowerCase(),
// @ts-ignore
        schema: commonStrToLiteral(s && s[2].toLowerCase()), // <== wont that be a bug ?
// @ts-ignore
        version: commonStrToLiteral(v && v[2]),
// @ts-ignore
        from: commonStrToLiteral(f && f[2]),
      }
    };// @ts-ignore

  var peg$f4 = function(head, tail) {
    // => create_option_character_set[]
// @ts-ignore
    return createList(head, tail, 1)
  };// @ts-ignore

  var peg$f5 = function(a, k, ife, t, c) {
      /*
// @ts-ignore
      export type create_db_stmt = {
// @ts-ignore
        type: 'create',
// @ts-ignore
        keyword: 'database',
// @ts-ignore
        if_not_exists?: 'if not exists',
// @ts-ignore
        database: string,
// @ts-ignore
        create_definition?: create_db_definition
      }
// @ts-ignore
      => AstStatement<create_db_stmt>
      */
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a[0].toLowerCase(),
// @ts-ignore
          keyword: 'database',
// @ts-ignore
          if_not_exists: ife && ife[0].toLowerCase(),
// @ts-ignore
          database: t,
// @ts-ignore
          create_definitions: c,
        }
      }
    };// @ts-ignore

  var peg$f6 = function(a, tp, ife, t, c, to, ir, as, qe) {
      /*
// @ts-ignore
      export type create_table_stmt_node = create_table_stmt_node_simple | create_table_stmt_node_like;
// @ts-ignore
      export interface create_table_stmt_node_base {
// @ts-ignore
        type: 'create';
// @ts-ignore
        keyword: 'table';
// @ts-ignore
        temporary?: 'temporary';
// @ts-ignore
        if_not_exists?: 'if not exists';
// @ts-ignore
        table: table_ref_list;
      }
// @ts-ignore
      export interface create_table_stmt_node_simple extends create_table_stmt_node_base{
// @ts-ignore
        ignore_replace?: 'ignore' | 'replace';
// @ts-ignore
        as?: 'as';
// @ts-ignore
        query_expr?: union_stmt_node;
// @ts-ignore
        create_definition?: create_table_definition;
// @ts-ignore
        table_options?: table_options;
      }
// @ts-ignore
      => AstStatement<create_table_stmt_node>
      */
// @ts-ignore
      if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a[0].toLowerCase(),
// @ts-ignore
          keyword: 'table',
// @ts-ignore
          temporary: tp && tp.toLowerCase(),
// @ts-ignore
          if_not_exists: ife && ife[0].toLowerCase(),
// @ts-ignore
          table: t,
// @ts-ignore
          ignore_replace: ir && ir[0].toLowerCase(),
// @ts-ignore
          as: as && as[0].toLowerCase(),
// @ts-ignore
          query_expr: qe && qe.ast,
// @ts-ignore
          create_definitions: c,
// @ts-ignore
          table_options: to
        }
      }
    };// @ts-ignore

  var peg$f7 = function(a, tp, ife, t, lt) {
      /*

// @ts-ignore
      export interface create_table_stmt_node_like extends create_table_stmt_node_base{
// @ts-ignore
        like: create_like_table;
      }
// @ts-ignore
      => AstStatement<create_table_stmt_node>;
      */
// @ts-ignore
      if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a[0].toLowerCase(),
// @ts-ignore
          keyword: 'table',
// @ts-ignore
          temporary: tp && tp.toLowerCase(),
// @ts-ignore
          if_not_exists: ife && ife[0].toLowerCase(),
// @ts-ignore
          table: t,
// @ts-ignore
          like: lt
        }
      }
    };// @ts-ignore

  var peg$f8 = function(a, tp, ife, t, as, c) {
      /*
// @ts-ignore
      export type create_sequence_stmt = {
// @ts-ignore
        type: 'create',
// @ts-ignore
        keyword: 'sequence',
// @ts-ignore
        temporary?: 'temporary' | 'temp',
// @ts-ignore
        if_not_exists?: 'if not exists',
// @ts-ignore
        table: table_ref_list,
// @ts-ignore
        create_definition?: create_sequence_definition_list
      }
// @ts-ignore
      => AstStatement<create_sequence_stmt>
      */
// @ts-ignore
      t.as = as && as[2]
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a[0].toLowerCase(),
// @ts-ignore
          keyword: 'sequence',
// @ts-ignore
          temporary: tp && tp.toLowerCase(),
// @ts-ignore
          if_not_exists: ife && ife[0].toLowerCase(),
// @ts-ignore
          sequence: [t],
// @ts-ignore
          create_definitions: c,
        }
      }
    };// @ts-ignore

  var peg$f9 = function(k, b, n) {
    /*
// @ts-ignore
    export type sequence_definition = { "resource": "sequence", prefix?: string,value: literal | column_ref }
// @ts-ignore
    => sequence_definition
    */
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      prefix: b ? `${k.toLowerCase()} by` : k.toLowerCase(),
// @ts-ignore
      value: n
    }
  };// @ts-ignore

  var peg$f10 = function(k, n) {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      prefix: k.toLowerCase(),
// @ts-ignore
      value: n
    }
  };// @ts-ignore

  var peg$f11 = function() {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      value: {
// @ts-ignore
        type: 'origin',
// @ts-ignore
        value: 'no minvalue'
      }
    }
  };// @ts-ignore

  var peg$f12 = function(k, n) {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      prefix: k.toLowerCase(),
// @ts-ignore
      value: n
    }
  };// @ts-ignore

  var peg$f13 = function() {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      value: {
// @ts-ignore
        type: 'origin',
// @ts-ignore
        value: 'no maxvalue'
      }
    }
  };// @ts-ignore

  var peg$f14 = function(k, w, n) {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      prefix: w ? `${k.toLowerCase()} with` : k.toLowerCase(),
// @ts-ignore
      value: n
    }
  };// @ts-ignore

  var peg$f15 = function(k, n) {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      prefix: k.toLowerCase(),
// @ts-ignore
      value: n
    }
  };// @ts-ignore

  var peg$f16 = function(n) {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      value: {
// @ts-ignore
        type: 'origin',
// @ts-ignore
        value: n ? 'no cycle' : 'cycle'
      }
    }
  };// @ts-ignore

  var peg$f17 = function() {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      prefix: 'owned by',
// @ts-ignore
      value: {
// @ts-ignore
        type: 'origin',
// @ts-ignore
        value: 'none'
      }
    }
  };// @ts-ignore

  var peg$f18 = function(n, col) {
    // => sequence_definition
// @ts-ignore
    return {
// @ts-ignore
      resource: 'sequence',
// @ts-ignore
      prefix: 'owned by',
// @ts-ignore
      value: col
    }
  };// @ts-ignore

  var peg$f19 = function(head, tail) {
    // => create_sequence_definition[]
// @ts-ignore
    return createList(head, tail, 1)
};// @ts-ignore

  var peg$f20 = function(a, kw, t, co, n, on, ta, um, cols, wr, ts, w) {
    /*
// @ts-ignore
    export interface create_index_stmt_node {
// @ts-ignore
      type: 'create';
// @ts-ignore
      index_type?: 'unique';
// @ts-ignore
      keyword: 'index';
// @ts-ignore
      concurrently?: 'concurrently';
// @ts-ignore
      index: string;
// @ts-ignore
      on_kw: string;
// @ts-ignore
      table: table_name;
// @ts-ignore
      index_using?: index_type;
// @ts-ignore
      index_columns: column_order[];
// @ts-ignore
      with?: index_option[];
// @ts-ignore
      with_before_where: true;
// @ts-ignore
      tablespace?: {type: 'origin'; value: string; }
// @ts-ignore
      where?: where_clause;
    }
// @ts-ignore
    => AstStatement<create_index_stmt_node>
    */
// @ts-ignore
    return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a[0].toLowerCase(),
// @ts-ignore
          index_type: kw && kw.toLowerCase(),
// @ts-ignore
          keyword: t.toLowerCase(),
// @ts-ignore
          concurrently: co && co.toLowerCase(),
// @ts-ignore
          index: n,
// @ts-ignore
          on_kw: on[0].toLowerCase(),
// @ts-ignore
          table: ta,
// @ts-ignore
          index_using: um,
// @ts-ignore
          index_columns: cols,
// @ts-ignore
          with: wr && wr[4],
// @ts-ignore
          with_before_where: true,
// @ts-ignore
          tablespace: ts && { type: 'origin', value: ts[2] },
// @ts-ignore
          where: w,
        }
    }
  };// @ts-ignore

  var peg$f21 = function(head, tail) {
    // => column_order[]
// @ts-ignore
    return createList(head, tail)
  };// @ts-ignore

  var peg$f22 = function(c, ca, op, o, nf) {
    /*
    => {
// @ts-ignore
      column: expr;
// @ts-ignore
      collate: collate_expr;
// @ts-ignore
      opclass: ident;
// @ts-ignore
      order: 'asc' | 'desc';
// @ts-ignore
      nulls: 'nulls last' | 'nulls first';
    }
    */
// @ts-ignore
    return {
// @ts-ignore
      column: c,
// @ts-ignore
      collate: ca,
// @ts-ignore
      opclass: op,
// @ts-ignore
      order: o && o.toLowerCase() || 'asc',
// @ts-ignore
      nulls: nf && `${nf[0].toLowerCase()} ${nf[2].toLowerCase()}`,
    }
  };// @ts-ignore

  var peg$f23 = function(t) {
    // => { type: 'like'; table: table_ref_list; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'like',
// @ts-ignore
      table: t
    }
  };// @ts-ignore

  var peg$f24 = function(e) {
// @ts-ignore
      return {
// @ts-ignore
        type: 'like',
// @ts-ignore
        table: e.table,
// @ts-ignore
        parentheses: true
      };
  };// @ts-ignore

  var peg$f25 = function(head, tail) {
      // => create_definition[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f26 = function(a) {
    // => { auto_increment: 'auto_increment'; }
// @ts-ignore
    return { auto_increment: a.toLowerCase() }
  };// @ts-ignore

  var peg$f27 = function(u) {
    // => { unique_or_primary: 'unique' | 'primary key'; }
// @ts-ignore
    const unique_or_primary = []
// @ts-ignore
    if (u) unique_or_primary.push(u[0], u[2])
// @ts-ignore
    return { unique_or_primary: unique_or_primary.filter(v => v).join(' ').toLowerCase('') }
  };// @ts-ignore

  var peg$f28 = function(co) {
    // => { comment: keyword_comment; }
// @ts-ignore
    return { comment: co }
  };// @ts-ignore

  var peg$f29 = function(ca) {
    // => { collate: collate_expr; }
// @ts-ignore
    return { collate: ca }
  };// @ts-ignore

  var peg$f30 = function(cf) {
    // => { column_format: column_format; }
// @ts-ignore
    return { column_format: cf }
  };// @ts-ignore

  var peg$f31 = function(s) {
    // => { storage: storage }
// @ts-ignore
    return { storage: s }
  };// @ts-ignore

  var peg$f32 = function(re) {
    // => { reference_definition: reference_definition; }
// @ts-ignore
    return { reference_definition: re }
  };// @ts-ignore

  var peg$f33 = function(t, s, v) {
    // => { character_set: collate_expr }
// @ts-ignore
    return { character_set: { type: t, value: v, symbol: s }}
  };// @ts-ignore

  var peg$f34 = function(head, tail) {
    /*
      => {
// @ts-ignore
        nullable?: column_constraint['nullable'];
// @ts-ignore
        default_val?: column_constraint['default_val'];
// @ts-ignore
        auto_increment?: 'auto_increment';
// @ts-ignore
        unique_or_primary?: 'unique' | 'primary key';
// @ts-ignore
        comment?: keyword_comment;
// @ts-ignore
        collate?: collate_expr;
// @ts-ignore
        column_format?: column_format;
// @ts-ignore
        storage?: storage;
// @ts-ignore
        reference_definition?: reference_definition;
      }
      */
// @ts-ignore
    let opt = head
// @ts-ignore
    for (let i = 0; i < tail.length; i++) {
// @ts-ignore
      opt = { ...opt, ...tail[i][1] }
    }
// @ts-ignore
    return opt
  };// @ts-ignore

  var peg$f35 = function(c, d, cdo) {
      /*
      => {
// @ts-ignore
        column: column_ref;
// @ts-ignore
        definition: data_type;
// @ts-ignore
        nullable: column_constraint['nullable'];
// @ts-ignore
        default_val: column_constraint['default_val'];
// @ts-ignore
        auto_increment?: 'auto_increment';
// @ts-ignore
        unique_or_primary?: 'unique' | 'primary key';
// @ts-ignore
        comment?: keyword_comment;
// @ts-ignore
        collate?: collate_expr;
// @ts-ignore
        column_format?: column_format;
// @ts-ignore
        storage?: storage;
// @ts-ignore
        reference_definition?: reference_definition;
// @ts-ignore
        resource: 'column';
      }
      */
// @ts-ignore
      columnList.add(`create::${c.table}::${c.column}`)
// @ts-ignore
      return {
// @ts-ignore
        column: c,
// @ts-ignore
        definition: d,
// @ts-ignore
        resource: 'column',
// @ts-ignore
        ...(cdo || {})
      }
    };// @ts-ignore

  var peg$f36 = function(n, df) {
    // => { nullable: literal_null | literal_not_null; default_val: default_expr; }
// @ts-ignore
    if (n && !n.value) n.value = 'null'
// @ts-ignore
    return {
// @ts-ignore
      default_val: df,
// @ts-ignore
      nullable: n
    }
  };// @ts-ignore

  var peg$f37 = function(df, n) {
    // => { nullable: literal_null | literal_not_null; default_val: default_expr; }
// @ts-ignore
    if (n && !n.value) n.value = 'null'
// @ts-ignore
    return {
// @ts-ignore
      default_val: df,
// @ts-ignore
      nullable: n
    }
  };// @ts-ignore

  var peg$f38 = function(s, ca) {
    // => { type: 'collate'; symbol: '=' | null; value: ident; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'collate',
// @ts-ignore
      symbol: s,
// @ts-ignore
      value: ca,
    }
  };// @ts-ignore

  var peg$f39 = function(k, f) {
    // => { type: 'column_format'; value: 'fixed' | 'dynamic' | 'default'; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'column_format',
// @ts-ignore
      value: f.toLowerCase()
    }
  };// @ts-ignore

  var peg$f40 = function(k, s) {
    // => { type: 'storage'; value: 'disk' | 'memory' }
// @ts-ignore
    return {
// @ts-ignore
      type: 'storage',
// @ts-ignore
      value: s.toLowerCase()
    }
  };// @ts-ignore

  var peg$f41 = function(ce) {
    // => { type: 'default'; value: literal | expr; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'default',
// @ts-ignore
      value: ce
    }
  };// @ts-ignore

  var peg$f42 = function(head, tail) {
    // => (ALTER_ALGORITHM | ALTER_LOCK)[]
// @ts-ignore
    return createList(head, tail, 1)
  };// @ts-ignore

  var peg$f43 = function(a, r, t) {
      /*
// @ts-ignore
      export interface drop_stmt_node {
// @ts-ignore
        type: 'drop';
// @ts-ignore
        keyword: 'table';
// @ts-ignore
        name: table_ref_list;
      }
// @ts-ignore
      => AstStatement<drop_stmt_node>
      */
// @ts-ignore
      if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a.toLowerCase(),
// @ts-ignore
          keyword: r.toLowerCase(),
// @ts-ignore
          name: t
        }
      };
    };// @ts-ignore

  var peg$f44 = function(a, r, i, t, op) {
      /*
// @ts-ignore
      export interface drop_index_stmt_node {
// @ts-ignore
        type: 'drop';
// @ts-ignore
        keyword: string;
// @ts-ignore
        name: column_ref;
// @ts-ignore
        table: table_name;
// @ts-ignore
        options?: drop_index_opt;
      }
// @ts-ignore
      => AstStatement<drop_index_stmt_node>
      */
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a.toLowerCase(),
// @ts-ignore
          keyword: r.toLowerCase(),
// @ts-ignore
          name: i,
// @ts-ignore
          table: t,
// @ts-ignore
          options: op
        }
      };
    };// @ts-ignore

  var peg$f45 = function(a, kw, t) {
      /*
// @ts-ignore
      export interface truncate_stmt_node {
// @ts-ignore
        type: 'trucate';
// @ts-ignore
        keyword: 'table';
// @ts-ignore
        name: table_ref_list;
      }
// @ts-ignore
      => AstStatement<truncate_stmt_node>
      */
// @ts-ignore
      if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: a.toLowerCase(),
// @ts-ignore
          keyword: kw && kw.toLowerCase() || 'table',
// @ts-ignore
          name: t
        }
      };
    };// @ts-ignore

  var peg$f46 = function(d) {
      /*
// @ts-ignore
      export interface use_stmt_node {
// @ts-ignore
        type: 'use';
// @ts-ignore
        db: ident;
      }
// @ts-ignore
      => AstStatement<use_stmt_node>
      */
// @ts-ignore
      tableList.add(`use::${d}::null`);
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: 'use',
// @ts-ignore
          db: d
        }
      };
    };// @ts-ignore

  var peg$f47 = function(t, e) {
      /*
// @ts-ignore
      export interface alter_table_stmt_node {
// @ts-ignore
        type: 'alter';
// @ts-ignore
        table: table_ref_list;
// @ts-ignore
        expr: alter_action_list;
      }
// @ts-ignore
      => AstStatement<alter_table_stmt_node>
      */
// @ts-ignore
      if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: 'alter',
// @ts-ignore
          table: t,
// @ts-ignore
          expr: e
        }
      };
    };// @ts-ignore

  var peg$f48 = function(head, tail) {
      // => alter_action[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f49 = function(kc, cd) {
      /*
      => {
// @ts-ignore
        action: 'add';
// @ts-ignore
        keyword: KW_COLUMN;
// @ts-ignore
        resource: 'column';
// @ts-ignore
        type: 'alter';
// @ts-ignore
      } & create_column_definition;
      */
// @ts-ignore
      return {
// @ts-ignore
        action: 'add',
// @ts-ignore
        ...cd,
// @ts-ignore
        keyword: kc,
// @ts-ignore
        resource: 'column',
// @ts-ignore
        type: 'alter',
      }
    };// @ts-ignore

  var peg$f50 = function(kc, c) {
      /* => {
// @ts-ignore
        action: 'drop';
// @ts-ignore
        collumn: column_ref;
// @ts-ignore
        keyword: KW_COLUMN;
// @ts-ignore
        resource: 'column';
// @ts-ignore
        type: 'alter';
      } */
// @ts-ignore
      return {
// @ts-ignore
        action: 'drop',
// @ts-ignore
        column: c,
// @ts-ignore
        keyword: kc,
// @ts-ignore
        resource: 'column',
// @ts-ignore
        type: 'alter',
      }
    };// @ts-ignore

  var peg$f51 = function(id) {
       /* => {
// @ts-ignore
         action: 'add';
// @ts-ignore
         type: 'alter';
// @ts-ignore
         } & create_index_definition */
// @ts-ignore
      return {
// @ts-ignore
        action: 'add',
// @ts-ignore
        type: 'alter',
// @ts-ignore
        ...id,
      }
    };// @ts-ignore

  var peg$f52 = function(kw, tn) {
       /* => {
// @ts-ignore
         action: 'rename';
// @ts-ignore
         type: 'alter';
// @ts-ignore
         resource: 'table';
// @ts-ignore
         keyword?: 'to' | 'as';
// @ts-ignore
         table: ident;
         } */
// @ts-ignore
    return {
// @ts-ignore
      action: 'rename',
// @ts-ignore
      type: 'alter',
// @ts-ignore
      resource: 'table',
// @ts-ignore
      keyword: kw && kw[0].toLowerCase(),
// @ts-ignore
      table: tn
    }
  };// @ts-ignore

  var peg$f53 = function(s, val) {
    /* => {
// @ts-ignore
        type: 'alter';
// @ts-ignore
        keyword: 'algorithm';
// @ts-ignore
        resource: 'algorithm';
// @ts-ignore
        symbol?: '=';
// @ts-ignore
        algorithm: 'DEFAULT' | 'INSTANT' | 'INPLACE' | 'COPY';
      }*/
// @ts-ignore
    return {
// @ts-ignore
      type: 'alter',
// @ts-ignore
      keyword: 'algorithm',
// @ts-ignore
      resource: 'algorithm',
// @ts-ignore
      symbol: s,
// @ts-ignore
      algorithm: val
    }
  };// @ts-ignore

  var peg$f54 = function(s, val) {
    /* => {
// @ts-ignore
      type: 'alter';
// @ts-ignore
      keyword: 'lock';
// @ts-ignore
      resource: 'lock';
// @ts-ignore
      symbol?: '=';
// @ts-ignore
      lock: 'DEFAULT' | 'NONE' | 'SHARED' | 'EXCLUSIVE';
    }*/
// @ts-ignore
    return {
// @ts-ignore
      type: 'alter',
// @ts-ignore
      keyword: 'lock',
// @ts-ignore
      resource: 'lock',
// @ts-ignore
      symbol: s,
// @ts-ignore
      lock: val
    }
  };// @ts-ignore

  var peg$f55 = function(kc, c, t, de, id) {
       /* => {
// @ts-ignore
         index: column;
// @ts-ignore
         definition: cte_column_definition;
// @ts-ignore
         keyword: 'index' | 'key';
// @ts-ignore
         index_type?: index_type;
// @ts-ignore
         resource: 'index';
// @ts-ignore
         index_options?: index_options;
       }*/
// @ts-ignore
      return {
// @ts-ignore
        index: c,
// @ts-ignore
        definition: de,
// @ts-ignore
        keyword: kc.toLowerCase(),
// @ts-ignore
        index_type: t,
// @ts-ignore
        resource: 'index',
// @ts-ignore
        index_options: id,
      }
    };// @ts-ignore

  var peg$f56 = function(p, kc, c, de, id) {
      /* => {
// @ts-ignore
          index: column;
// @ts-ignore
          definition: cte_column_definition;
// @ts-ignore
          keyword: 'fulltext' | 'spatial' | 'fulltext key' | 'spatial key' | 'fulltext index' | 'spatial index';
// @ts-ignore
          index_options?: index_options;
// @ts-ignore
          resource: 'index';
        }*/
// @ts-ignore
      return {
// @ts-ignore
        index: c,
// @ts-ignore
        definition: de,
// @ts-ignore
        keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),
// @ts-ignore
        index_options: id,
// @ts-ignore
        resource: 'index',
      }
    };// @ts-ignore

  var peg$f57 = function(kc, c) {
    // => { keyword: 'constraint'; constraint: ident; }
// @ts-ignore
    return {
// @ts-ignore
      keyword: kc.toLowerCase(),
// @ts-ignore
      constraint: c
    }
  };// @ts-ignore

  var peg$f58 = function(kc, p, t, de, id) {
    /* => {
// @ts-ignore
      constraint?: constraint_name['constraint'];
// @ts-ignore
      definition: cte_column_definition;
// @ts-ignore
      constraint_type: 'primary key';
// @ts-ignore
      index_type?: index_type;
// @ts-ignore
      resource: 'constraint';
// @ts-ignore
      index_options?: index_options;
    }*/
// @ts-ignore
    return {
// @ts-ignore
        constraint: kc && kc.constraint,
// @ts-ignore
        definition: de,
// @ts-ignore
        constraint_type: p.toLowerCase(),
// @ts-ignore
        keyword: kc && kc.keyword,
// @ts-ignore
        index_type: t,
// @ts-ignore
        resource: 'constraint',
// @ts-ignore
        index_options: id,
      }
  };// @ts-ignore

  var peg$f59 = function(kc, u, p, i, t, de, id) {
    /* => {
// @ts-ignore
      constraint?: constraint_name['constraint'];
// @ts-ignore
      definition: cte_column_definition;
// @ts-ignore
      constraint_type: 'unique key' | 'unique' | 'unique index';
// @ts-ignore
      index_type?: index_type;
// @ts-ignore
      resource: 'constraint';
// @ts-ignore
      index_options?: index_options;
    }*/
// @ts-ignore
    return {
// @ts-ignore
        constraint: kc && kc.constraint,
// @ts-ignore
        definition: de,
// @ts-ignore
        constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),
// @ts-ignore
        keyword: kc && kc.keyword,
// @ts-ignore
        index_type: t,
// @ts-ignore
        index: i,
// @ts-ignore
        resource: 'constraint',
// @ts-ignore
        index_options: id
      }
  };// @ts-ignore

  var peg$f60 = function(kc, p, i, de, id) {
    /* => {
// @ts-ignore
      constraint?: constraint_name['constraint'];
// @ts-ignore
      definition: cte_column_definition;
// @ts-ignore
      constraint_type: 'FOREIGN KEY';
// @ts-ignore
      keyword: constraint_name['keyword'];
// @ts-ignore
      index?: column;
// @ts-ignore
      resource: 'constraint';
// @ts-ignore
      reference_definition?: reference_definition;
    }*/
// @ts-ignore
    return {
// @ts-ignore
        constraint: kc && kc.constraint,
// @ts-ignore
        definition: de,
// @ts-ignore
        constraint_type: p,
// @ts-ignore
        keyword: kc && kc.keyword,
// @ts-ignore
        index: i,
// @ts-ignore
        resource: 'constraint',
// @ts-ignore
        reference_definition: id
      }
  };// @ts-ignore

  var peg$f61 = function(kc, t, de, m, od, ou) {
    /* => {
// @ts-ignore
        definition: cte_column_definition;
// @ts-ignore
        table: table_ref_list;
// @ts-ignore
        keyword: 'references';
// @ts-ignore
        match: 'match full' | 'match partial' | 'match simple';
// @ts-ignore
        on_delete?: on_reference;
// @ts-ignore
        on_update?: on_reference;
      }*/
// @ts-ignore
    return {
// @ts-ignore
        definition: de,
// @ts-ignore
        table: t,
// @ts-ignore
        keyword: kc.toLowerCase(),
// @ts-ignore
        match:m && m.toLowerCase(),
// @ts-ignore
        on_delete: od,
// @ts-ignore
        on_update: ou,
      }
  };// @ts-ignore

  var peg$f62 = function(kw, ro) {
    // => { type: 'on delete' | 'on update'; value: reference_option; }
// @ts-ignore
    return {
// @ts-ignore
      type: kw.toLowerCase(),
// @ts-ignore
      value: ro
    }
  };// @ts-ignore

  var peg$f63 = function(kc) {
    // => 'restrict' | 'cascade' | 'set null' | 'no action' | 'set default'
// @ts-ignore
    return kc.toLowerCase()
  };// @ts-ignore

  var peg$f64 = function(kw, kc, t, c, p, te, on, tn, fr, de, fe, tw, fc, fct) {
    /*
    => {
// @ts-ignore
      type: 'create';
// @ts-ignore
      constraint: string;
// @ts-ignore
      location: 'before' | 'after' | 'instead of';
// @ts-ignore
      events: trigger_event_list;
// @ts-ignore
      table: table_name;
// @ts-ignore
      from?: table_name;
// @ts-ignore
      deferrable?: trigger_deferrable;
// @ts-ignore
      for_each?: trigger_for_row;
// @ts-ignore
      when?: trigger_when;
// @ts-ignore
      execute: {
// @ts-ignore
        keyword: 'execute procedure';
// @ts-ignore
        expr: proc_func_call;
      };
// @ts-ignore
      constraint_type: 'trigger';
// @ts-ignore
      keyword: 'trigger';
// @ts-ignore
      constraint_kw: 'constraint';
// @ts-ignore
      resource: 'constraint';
    }
    */
// @ts-ignore
    return {
// @ts-ignore
        type: 'create',
// @ts-ignore
        constraint: c,
// @ts-ignore
        location: p && p.toLowerCase(),
// @ts-ignore
        events: te,
// @ts-ignore
        table: tn,
// @ts-ignore
        from: fr && fr[2],
// @ts-ignore
        deferrable: de,
// @ts-ignore
        for_each: fe,
// @ts-ignore
        when: tw,
// @ts-ignore
        execute: {
// @ts-ignore
          keyword: 'execute procedure',
// @ts-ignore
          expr: fct
        },
// @ts-ignore
        constraint_type: t && t.toLowerCase(),
// @ts-ignore
        keyword: t && t.toLowerCase(),
// @ts-ignore
        constraint_kw: kc && kc.toLowerCase(),
// @ts-ignore
        resource: 'constraint',
      }
  };// @ts-ignore

  var peg$f65 = function(kw) {
    // => { keyword: 'insert' | 'delete' | 'truncate' }
// @ts-ignore
    const keyword = Array.isArray(kw) ? kw[0].toLowerCase() : kw.toLowerCase()
// @ts-ignore
    return {
// @ts-ignore
      keyword,
    }
  };// @ts-ignore

  var peg$f66 = function(kw, a) {
    // => { keyword: 'update'; args?: { keyword: 'of', columns: column_ref_list; }}
// @ts-ignore
    return {
// @ts-ignore
      keyword: kw && kw[0] && kw[0].toLowerCase(),
// @ts-ignore
      args: a && { keyword: a[0], columns: a[2] } || null
    }
  };// @ts-ignore

  var peg$f67 = function(head, tail) {
    // => trigger_event[];
// @ts-ignore
    return createList(head, tail)
  };// @ts-ignore

  var peg$f68 = function(kw, args) {
    // => { keyword: 'deferrable' | 'not deferrable'; args: 'initially immediate' | 'initially deferred' }
// @ts-ignore
    return {
// @ts-ignore
      keyword: kw && kw[0] ? `${kw[0].toLowerCase()} deferrable` : 'deferrable',
// @ts-ignore
      args: args && args.toLowerCase(),
    }
  };// @ts-ignore

  var peg$f69 = function(kw, e, ob) {
    // => { keyword: 'for' | 'for each'; args: 'row' | 'statement' }
// @ts-ignore
    return {
// @ts-ignore
      keyword: e ? `${kw.toLowerCase()} ${e.toLowerCase()}` : kw.toLowerCase(),
// @ts-ignore
      args: ob.toLowerCase()
    }
  };// @ts-ignore

  var peg$f70 = function(condition) {
    // => { type: 'when'; cond: expr; parentheses: true; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'when',
// @ts-ignore
      cond: condition,
// @ts-ignore
      parentheses: true,
    }
  };// @ts-ignore

  var peg$f71 = function(head, tail) {
    // => table_option[]
// @ts-ignore
    return createList(head, tail)
  };// @ts-ignore

  var peg$f72 = function() {
    // => string
// @ts-ignore
    return 'CHARACTER SET'
  };// @ts-ignore

  var peg$f73 = function(kw, t, s, v) {
    /* => {
// @ts-ignore
      keyword: 'character set' | 'charset' | 'collate' | 'default character set' | 'default charset' | 'default collate';
// @ts-ignore
      symbol: '=';
// @ts-ignore
      value: ident_name;
      } */
// @ts-ignore
    return {
// @ts-ignore
      keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),
// @ts-ignore
      symbol: s,
// @ts-ignore
      value: v
    }
  };// @ts-ignore

  var peg$f74 = function(kw, s, v) {
    /* => {
// @ts-ignore
      keyword: 'auto_increment' | 'avg_row_length' | 'key_block_size' | 'max_rows' | 'min_rows' | 'stats_sample_pages';
// @ts-ignore
      symbol: '=';
// @ts-ignore
      value: number; // <== literal_numeric['value']
      } */
// @ts-ignore
    return {
// @ts-ignore
      keyword: kw.toLowerCase(),
// @ts-ignore
      symbol: s,
// @ts-ignore
      value: v.value
    }
  };// @ts-ignore

  var peg$f75 = function(kw, s, c) {
    // => { keyword: 'connection' | 'comment'; symbol: '='; value: string; }
// @ts-ignore
    return {
// @ts-ignore
      keyword: kw.toLowerCase(),
// @ts-ignore
      symbol: s,
// @ts-ignore
      value: `'${c.value}'`
    }
  };// @ts-ignore

  var peg$f76 = function(kw, s, v) {
    // => { keyword: 'compression'; symbol: '='; value: "'ZLIB'" | "'LZ4'" | "'NONE'" }
// @ts-ignore
    return {
// @ts-ignore
      keyword: kw.toLowerCase(),
// @ts-ignore
      symbol: s,
// @ts-ignore
      value: v.join('').toUpperCase()
    }
  };// @ts-ignore

  var peg$f77 = function(kw, s, c) {
    // => { keyword: 'engine'; symbol: '='; value: string; }
// @ts-ignore
    return {
// @ts-ignore
      keyword: kw.toLowerCase(),
// @ts-ignore
      symbol: s,
// @ts-ignore
      value: c.toUpperCase()
    }
  };// @ts-ignore

  var peg$f78 = function(fsid) {
       // => create_fulltext_spatial_index_definition & { action: 'add'; type: 'alter' }
// @ts-ignore
      return {
// @ts-ignore
        action: 'add',
// @ts-ignore
        type: 'alter',
// @ts-ignore
        ...fsid,
      }
    };// @ts-ignore

  var peg$f79 = function(t) {
      /*
// @ts-ignore
      export interface rename_stmt_node {
// @ts-ignore
        type: 'rename';
// @ts-ignore
        table: table_to_list;
      }
// @ts-ignore
       => AstStatement<rename_stmt_node>
       */
// @ts-ignore
      t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: 'rename',
// @ts-ignore
          table: t
        }
      };
    };// @ts-ignore

  var peg$f80 = function(kw, a) {
      /*
// @ts-ignore
      export interface set_stmt_node {
// @ts-ignore
        type: 'set';
// @ts-ignore
        expr: assign_stmt & { keyword?: 'GLOBAL' | 'SESSION' | 'LOCAL' | 'PERSIST' | 'PERSIST_ONLY'; };
      }
// @ts-ignore
       => AstStatement<set_stmt_node>
       */
// @ts-ignore
    a.keyword = kw
// @ts-ignore
    return {
// @ts-ignore
      tableList: Array.from(tableList),
// @ts-ignore
      columnList: columnListTableAlias(columnList),
// @ts-ignore
      ast: {
// @ts-ignore
        type: 'set',
// @ts-ignore
        expr: a
      }
    }
  };// @ts-ignore

  var peg$f81 = function(m) {
    // => { mode: string; }
// @ts-ignore
    return {
// @ts-ignore
      mode: `in ${m.toLowerCase()} mode`
    }
  };// @ts-ignore

  var peg$f82 = function(k, t, lm, nw) {

      /*
// @ts-ignore
      export interface lock_stmt_node {
// @ts-ignore
        type: 'lock';
// @ts-ignore
        keyword: 'lock';
// @ts-ignore
        tables: [[table_base], ...{table: table_ref}[]]; // see table_ref_list
// @ts-ignore
        lock_mode?: lock_mode;
// @ts-ignore
        nowait?: 'NOWAIT';
      }
// @ts-ignore
       => AstStatement<lock_stmt_node>
       */

// @ts-ignore
    if (t) t.forEach(tt => tableList.add(`lock::${tt.db}::${tt.table}`))
// @ts-ignore
    return {
// @ts-ignore
      tableList: Array.from(tableList),
// @ts-ignore
      columnList: columnListTableAlias(columnList),
// @ts-ignore
      ast: {
// @ts-ignore
        type: 'lock',
// @ts-ignore
        keyword: k && k.toLowerCase(),
// @ts-ignore
        tables: t.map((table) => ({ table })),
// @ts-ignore
        lock_mode: lm,
// @ts-ignore
        nowait: nw
      }
    }
  };// @ts-ignore

  var peg$f83 = function(e) {
    /*
// @ts-ignore
    export interface call_stmt_node {
// @ts-ignore
      type: 'call';
// @ts-ignore
      expr: proc_func_call;
    }
// @ts-ignore
    => AstStatement<call_stmt_node>
    */
// @ts-ignore
    return {
// @ts-ignore
      tableList: Array.from(tableList),
// @ts-ignore
      columnList: columnListTableAlias(columnList),
// @ts-ignore
      ast: {
// @ts-ignore
        type: 'call',
// @ts-ignore
        expr: e
      }
    }
  };// @ts-ignore

  var peg$f84 = function() {
// @ts-ignore
    return {
      /*
// @ts-ignore
        export interface show_stmt_node {
// @ts-ignore
          type: 'show';
// @ts-ignore
          keyword: 'tables';
        }
// @ts-ignore
        => AstStatement<show_stmt_node>
       */
// @ts-ignore
      tableList: Array.from(tableList),
// @ts-ignore
      columnList: columnListTableAlias(columnList),
// @ts-ignore
      ast: {
// @ts-ignore
        type: 'show',
// @ts-ignore
        keyword: 'tables'
      }
    }
  };// @ts-ignore

  var peg$f85 = function(s) {
    /*
// @ts-ignore
    export interface select_stmt_node extends select_stmt_nake  {
// @ts-ignore
       parentheses_symbol: true;
      }
// @ts-ignore
      => select_stmt_node
      */
// @ts-ignore
      return {
// @ts-ignore
        ...s[2],
// @ts-ignore
        parentheses_symbol: true,
      }
    };// @ts-ignore

  var peg$f86 = function(head, tail) {
      // => cte_definition[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f87 = function(cte) {
      // => [cte_definition & {recursive: true; }]
// @ts-ignore
      cte.recursive = true;
// @ts-ignore
      return [cte]
    };// @ts-ignore

  var peg$f88 = function(name, columns, stmt) {
    // => { name: { type: 'default'; value: string; }; stmt: union_stmt; columns?: cte_column_definition; }
// @ts-ignore
    if (typeof name === 'string') name = { type: 'default', value: name }
// @ts-ignore
      return { name, stmt, columns };
    };// @ts-ignore

  var peg$f89 = function(head, tail) {
    // => column[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f90 = function(d, o, c) {
    // => {type: string; columns: column_ref_list;}
// @ts-ignore
    console.lo
// @ts-ignore
    return {
// @ts-ignore
      type: `${d} ON`,
// @ts-ignore
      columns: c
    }
  };// @ts-ignore

  var peg$f91 = function(d) {
    // => { type: string | undefined; }
// @ts-ignore
    return {
// @ts-ignore
      type: d,
    }
  };// @ts-ignore

  var peg$f92 = function(cte, opts, d, c, f, w, g, h, o, l, win) {
      /* => {
// @ts-ignore
          with?: with_clause;
// @ts-ignore
          type: 'select';
// @ts-ignore
          options?: option_clause;
// @ts-ignore
          distinct?: {type: string; columns?: column_list; };
// @ts-ignore
          columns: column_clause;
// @ts-ignore
          from?: from_clause;
// @ts-ignore
          where?: where_clause;
// @ts-ignore
          groupby?: group_by_clause;
// @ts-ignore
          having?: having_clause;
// @ts-ignore
          orderby?: order_by_clause;
// @ts-ignore
          limit?: limit_clause;
// @ts-ignore
          window?: window_clause;
        }*/
// @ts-ignore
      if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));
// @ts-ignore
      return {
// @ts-ignore
          with: cte,
// @ts-ignore
          type: 'select',
// @ts-ignore
          options: opts,
// @ts-ignore
          distinct: d,
// @ts-ignore
          columns: c,
// @ts-ignore
          from: f,
// @ts-ignore
          where: w,
// @ts-ignore
          groupby: g,
// @ts-ignore
          having: h,
// @ts-ignore
          orderby: o,
// @ts-ignore
          limit: l,
// @ts-ignore
          window: win,
      };
  };// @ts-ignore

  var peg$f93 = function(head, tail) {
    // => query_option[]
// @ts-ignore
    const opts = [head];
// @ts-ignore
    for (let i = 0, l = tail.length; i < l; ++i) {
// @ts-ignore
      opts.push(tail[i][1]);
    }
// @ts-ignore
    return opts;
  };// @ts-ignore

  var peg$f94 = function(option) {
      // =>  'SQL_CALC_FOUND_ROWS'| 'SQL_CACHE'| 'SQL_NO_CACHE'| 'SQL_BIG_RESULT'| 'SQL_SMALL_RESULT'| 'SQL_BUFFER_RESULT'
// @ts-ignore
      return option;
    };// @ts-ignore

  var peg$f95 = function(head, tail) {
      // => 'ALL' | '*' | column_list_item[]
// @ts-ignore
      columnList.add('select::null::(.*)');
// @ts-ignore
      if (tail && tail.length > 0) {
// @ts-ignore
        head[0] = {
// @ts-ignore
          expr: {
// @ts-ignore
            type: 'column_ref',
// @ts-ignore
            table: null,
// @ts-ignore
            column: '*'
          },
// @ts-ignore
          as: null
        };
// @ts-ignore
        return createList(head[0], tail);
      }
// @ts-ignore
      return head[0];
    };// @ts-ignore

  var peg$f96 = function(head, tail) {
    // => column_list_item[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f97 = function(n) {
    // => { brackets: boolean, number: number }
// @ts-ignore
    return {
// @ts-ignore
      brackets: true,
// @ts-ignore
      number: n
    }
  };// @ts-ignore

  var peg$f98 = function(e, a) {
    // => expr & { array_index: array_index }
// @ts-ignore
    if (a) e.array_index = a
// @ts-ignore
    return e
  };// @ts-ignore

  var peg$f99 = function(c) {
    // => { expr: expr; as: null; }
// @ts-ignore
    return { expr: c, as: null }
  };// @ts-ignore

  var peg$f100 = function(e, s, t, tail, alias) {
    // => { type: 'cast'; expr: expr; symbol: '::'; target: data_type;  as?: null; }
// @ts-ignore
    return {
// @ts-ignore
      as: alias,
// @ts-ignore
      type: 'cast',
// @ts-ignore
      expr: e,
// @ts-ignore
      symbol: '::',
// @ts-ignore
      target: t,
// @ts-ignore
      tail: tail && tail[0] && { operator: tail[0][1], expr: tail[0][3] },
    }
  };// @ts-ignore

  var peg$f101 = function(tbl) {
    // => { type: 'star_ref'; expr: column_ref; as: null; }
// @ts-ignore
      columnList.add(`select::${tbl}::(.*)`);
// @ts-ignore
      return {
// @ts-ignore
        type: 'star_ref',
// @ts-ignore
        expr: {
// @ts-ignore
          type: 'column_ref',
// @ts-ignore
          table: tbl,
// @ts-ignore
          column: '*'
        },
// @ts-ignore
        as: null
      };
    };// @ts-ignore

  var peg$f102 = function(e, alias) {
    // => { type: 'expr'; expr: expr; as?: alias_clause; }
// @ts-ignore
      return { type: 'expr', expr: e, as: alias };
    };// @ts-ignore

  var peg$f103 = function(i) {// @ts-ignore
 /*=>alias_ident*/ return i; };// @ts-ignore

  var peg$f104 = function(i) {// @ts-ignore
 /*=>ident*/ return i; };// @ts-ignore

  var peg$f105 = function(l) {// @ts-ignore
 /*=>table_ref_list*/return l; };// @ts-ignore

  var peg$f106 = function(head, tail) {
    // => table_to_item[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f107 = function(head, tail) {
    // => table_name[]
// @ts-ignore
      return [head, tail]
    };// @ts-ignore

  var peg$f108 = function(t) {
    // => { keyword: 'using'; type: 'btree' | 'hash' | 'gist' | 'gin' }
// @ts-ignore
    return {
// @ts-ignore
      keyword: 'using',
// @ts-ignore
      type: t.toLowerCase(),
    }
  };// @ts-ignore

  var peg$f109 = function(head, tail) {
    // => index_option[]
// @ts-ignore
    return createList(head, tail)
  };// @ts-ignore

  var peg$f110 = function(head, tail) {
    // => index_option[]
// @ts-ignore
    const result = [head];
// @ts-ignore
    for (let i = 0; i < tail.length; i++) {
// @ts-ignore
      result.push(tail[i][1]);
    }
// @ts-ignore
    return result;
  };// @ts-ignore

  var peg$f111 = function(k, e, kbs) {
    // => { type: 'key_block_size'; symbol: '='; expr: number; }
// @ts-ignore
    return {
// @ts-ignore
      type: k.toLowerCase(),
// @ts-ignore
      symbol: e,
// @ts-ignore
      expr: kbs
    }
  };// @ts-ignore

  var peg$f112 = function(k, e, kbs) {
    // => { type: ident_name; symbol: '='; expr: number | {type: 'origin'; value: ident; }; }
// @ts-ignore
    return {
// @ts-ignore
      type: k.toLowerCase(),
// @ts-ignore
      symbol: e,
// @ts-ignore
      expr: typeof kbs === 'string' && { type: 'origin', value: kbs } || kbs
    };
  };// @ts-ignore

  var peg$f113 = function(pn) {
    // => { type: 'with parser'; expr: ident_name }
// @ts-ignore
    return {
// @ts-ignore
      type: 'with parser',
// @ts-ignore
      expr: pn
    }
  };// @ts-ignore

  var peg$f114 = function(k) {
    // => { type: 'visible'; expr: 'visible' } | { type: 'invisible'; expr: 'invisible' }
// @ts-ignore
    return {
// @ts-ignore
      type: k.toLowerCase(),
// @ts-ignore
      expr: k.toLowerCase()
    }
  };// @ts-ignore

  var peg$f115 = function(head, tail) {
      // => [table_base, ...table_ref[]]
// @ts-ignore
      tail.unshift(head);
// @ts-ignore
      tail.forEach(tableInfo => {
// @ts-ignore
        const { table, as } = tableInfo
// @ts-ignore
        tableAlias[table] = table
// @ts-ignore
        if (as) tableAlias[as] = table
// @ts-ignore
        refreshColumnList(columnList)
      })
// @ts-ignore
      return tail;
    };// @ts-ignore

  var peg$f116 = function(t) {// @ts-ignore
 /* => table_base */ return t; };// @ts-ignore

  var peg$f117 = function(t) {// @ts-ignore
 /* => table_join */ return t; };// @ts-ignore

  var peg$f118 = function(op, t, head, tail) {
      // => table_base & {join: join_op; using: ident_name[]; }
// @ts-ignore
      t.join = op;
// @ts-ignore
      t.using = createList(head, tail);
// @ts-ignore
      return t;
    };// @ts-ignore

  var peg$f119 = function(op, t, expr) {
    // => table_base & {join: join_op; on?: on_clause; }
// @ts-ignore
      t.join = op;
// @ts-ignore
      t.on = expr;
// @ts-ignore
      return t;
    };// @ts-ignore

  var peg$f120 = function(op, stmt, alias, expr) {
    /* => {
// @ts-ignore
      expr: union_stmt & { parentheses: true; };
// @ts-ignore
      as?: alias_clause;
// @ts-ignore
      join: join_op;
// @ts-ignore
      on?: on_clause;
    }*/
// @ts-ignore
    stmt.parentheses = true;
// @ts-ignore
    return {
// @ts-ignore
      expr: stmt,
// @ts-ignore
      as: alias,
// @ts-ignore
      join: op,
// @ts-ignore
      on: expr
    };
  };// @ts-ignore

  var peg$f121 = function() {
    // => { type: 'dual' }
// @ts-ignore
      return {
// @ts-ignore
        type: 'dual'
      };
  };// @ts-ignore

  var peg$f122 = function(stmt, alias) {
    // => { expr: value_clause; as?: alias_clause; }
// @ts-ignore
    return {
// @ts-ignore
      expr: { type: 'values', values: stmt },
// @ts-ignore
      as: alias
    };
  };// @ts-ignore

  var peg$f123 = function(stmt, alias) {
    // => { expr: union_stmt | value_clause; as?: alias_clause; }
// @ts-ignore
    if (Array.isArray(stmt)) stmt = { type: 'values', values: stmt }
// @ts-ignore
    stmt.parentheses = true;
// @ts-ignore
    return {
// @ts-ignore
      expr: stmt,
// @ts-ignore
      as: alias
    };
  };// @ts-ignore

  var peg$f124 = function(e, alias) {
    // => { type: 'expr'; expr: expr; as?: alias_clause; }
// @ts-ignore
      return { type: 'expr', expr: e, as: alias };
    };// @ts-ignore

  var peg$f125 = function(t, f, re, alias) {
    // => table_name & { expr: expr, repeatable: literal_numeric; as?: alias_clause;}
// @ts-ignore
    return {
// @ts-ignore
      ...t,
// @ts-ignore
      as: alias,
// @ts-ignore
      tablesample: {
// @ts-ignore
        expr: f,
// @ts-ignore
        repeatable: re && re[4],
      }
    }
  };// @ts-ignore

  var peg$f126 = function(t, alias) {
    // => table_name & { as?: alias_clause; }
// @ts-ignore
      if (t.type === 'var') {
// @ts-ignore
        t.as = alias;
// @ts-ignore
        return t;
// @ts-ignore
      } else {
// @ts-ignore
        return {
// @ts-ignore
          ...t,
// @ts-ignore
          as: alias
        };
      }
    };// @ts-ignore

  var peg$f127 = function() {// @ts-ignore
 /* => 'LEFT JOIN' */ return 'LEFT JOIN'; };// @ts-ignore

  var peg$f128 = function() {// @ts-ignore
 /* =>  'RIGHT JOIN' */ return 'RIGHT JOIN'; };// @ts-ignore

  var peg$f129 = function() {// @ts-ignore
 /* => 'FULL JOIN' */ return 'FULL JOIN'; };// @ts-ignore

  var peg$f130 = function() {// @ts-ignore
 /* => 'INNER JOIN' */ return 'INNER JOIN'; };// @ts-ignore

  var peg$f131 = function(dt, schema, tail) {
      // => { db?: ident; schema?: ident, table: ident | '*'; }
// @ts-ignore
      const obj = { db: null, table: dt };
// @ts-ignore
      if (tail !== null) {
// @ts-ignore
        obj.db = dt;
// @ts-ignore
        obj.schema = schema[3];
// @ts-ignore
        obj.table = tail[3];
      }
// @ts-ignore
      return obj;
    };// @ts-ignore

  var peg$f132 = function(dt) {
    // => IGNORE
// @ts-ignore
      tableList.add(`select::${dt}::(.*)`);
// @ts-ignore
      return {
// @ts-ignore
        db: dt,
// @ts-ignore
        table: '*'
      }
    };// @ts-ignore

  var peg$f133 = function(dt, tail) {
    // => IGNORE
// @ts-ignore
      const obj = { db: null, table: dt };
// @ts-ignore
      if (tail !== null) {
// @ts-ignore
        obj.db = dt;
// @ts-ignore
        obj.table = tail[3];
      }
// @ts-ignore
      return obj;
    };// @ts-ignore

  var peg$f134 = function(v) {
    // => IGNORE
// @ts-ignore
      v.db = null;
// @ts-ignore
      v.table = v.name;
// @ts-ignore
      return v;
    };// @ts-ignore

  var peg$f135 = function(e) {// @ts-ignore
 /* => expr */ return e; };// @ts-ignore

  var peg$f136 = function(e) {// @ts-ignore
 /* => binary_expr */ return e; };// @ts-ignore

  var peg$f137 = function(e) {// @ts-ignore
 /* => expr_list['value'] */ return e.value; };// @ts-ignore

  var peg$f138 = function(head, tail) {
    // => column_ref[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f139 = function(e) {// @ts-ignore
 /* => expr */ return e; };// @ts-ignore

  var peg$f140 = function(l) {
    // => { keyword: 'window'; type: 'window', expr: named_window_expr_list; }
// @ts-ignore
    return {
// @ts-ignore
      keyword: 'window',
// @ts-ignore
      type: 'window',
// @ts-ignore
      expr: l,
    }
  };// @ts-ignore

  var peg$f141 = function(head, tail) {
    // => named_window_expr[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f142 = function(nw, anw) {
    // => { name: ident_name;  as_window_specification: as_window_specification; }
// @ts-ignore
    return {
// @ts-ignore
      name: nw,
// @ts-ignore
      as_window_specification: anw,
    }
  };// @ts-ignore

  var peg$f143 = function(ws) {
    // => { window_specification: window_specification; parentheses: boolean }
// @ts-ignore
    return {
// @ts-ignore
      window_specification: ws || {},
// @ts-ignore
      parentheses: true
    }
  };// @ts-ignore

  var peg$f144 = function(bc, l, w) {
    // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: string | null; }
// @ts-ignore
    return {
// @ts-ignore
      name: null,
// @ts-ignore
      partitionby: bc,
// @ts-ignore
      orderby: l,
// @ts-ignore
      window_frame_clause: w
    }
  };// @ts-ignore

  var peg$f145 = function(bc, l) {
    // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: null }
// @ts-ignore
    return {
// @ts-ignore
      name: null,
// @ts-ignore
      partitionby: bc,
// @ts-ignore
      orderby: l,
// @ts-ignore
      window_frame_clause: null
    }
  };// @ts-ignore

  var peg$f146 = function(kw, s) {
    // => string
// @ts-ignore
    return `rows ${s.value}`
  };// @ts-ignore

  var peg$f147 = function(p, f) {
    // => string
// @ts-ignore
    return `rows between ${p.value} and ${f.value}`
  };// @ts-ignore

  var peg$f148 = function(s) {
    // => string
// @ts-ignore
    s.value += ' FOLLOWING'
// @ts-ignore
    return s
  };// @ts-ignore

  var peg$f149 = function(s) {
    // => string
// @ts-ignore
    s.value += ' PRECEDING'
// @ts-ignore
    return s
  };// @ts-ignore

  var peg$f150 = function() {
    // => { type: 'single_quote_string'; value: string }
// @ts-ignore
    return { type: 'single_quote_string', value: 'current row' }
  };// @ts-ignore

  var peg$f151 = function(s) {
    // => literal_string
// @ts-ignore
    return { type: 'single_quote_string', value: s.toUpperCase() }
  };// @ts-ignore

  var peg$f152 = function(bc) {// @ts-ignore
 /* => column_clause */ return bc; };// @ts-ignore

  var peg$f153 = function(l) {// @ts-ignore
 /* => order_by_list */ return l; };// @ts-ignore

  var peg$f154 = function(head, tail) {
    // => order_by_element[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f155 = function(e, d) {
    // => { expr: expr; type: 'ASC' | 'DESC'; }
// @ts-ignore
    const obj = { expr: e, type: 'ASC' };
// @ts-ignore
    if (d === 'DESC') obj.type = 'DESC';
// @ts-ignore
    return obj;
  };// @ts-ignore

  var peg$f156 = function(i1, tail) {
    // => { separator: 'offset' | ''; value: [number_or_param | { type: 'origin', value: 'all' }, number_or_param?] }
// @ts-ignore
      const res = []
// @ts-ignore
      if (typeof i1 === 'string') res.push({ type: 'origin', value: 'all' })
// @ts-ignore
      else res.push(i1)
// @ts-ignore
      if (tail) res.push(tail[2]);
// @ts-ignore
      return {
// @ts-ignore
        seperator: tail && tail[0] && tail[0].toLowerCase() || '',
// @ts-ignore
        value: res
      };
    };// @ts-ignore

  var peg$f157 = function(t, l, w, r) {
// @ts-ignore
      /* export interface update_stmt_node {
// @ts-ignore
         type: 'update';
// @ts-ignore
         table: table_ref_list;
// @ts-ignore
         set: set_list;
// @ts-ignore
         where?: where_clause;
// @ts-ignore
         returning?: returning_stmt;
      }
// @ts-ignore
     => AstStatement<update_stmt_node>
     */
// @ts-ignore
      if (t) t.forEach(tableInfo => {
// @ts-ignore
        const { db, as, table } = tableInfo
// @ts-ignore
        tableList.add(`update::${db}::${table}`)
      });
// @ts-ignore
      if(l) {
// @ts-ignore
        l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));
      }
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: 'update',
// @ts-ignore
          table: t,
// @ts-ignore
          set: l,
// @ts-ignore
          where: w,
// @ts-ignore
          returning: r,
        }
      };
    };// @ts-ignore

  var peg$f158 = function(t, f, w) {
      /*
// @ts-ignore
      export interface table_ref_addition extends table_name {
// @ts-ignore
        addition: true;
// @ts-ignore
        as?: alias_clause;
      }
// @ts-ignore
       export interface delete_stmt_node {
// @ts-ignore
         type: 'delete';
// @ts-ignore
         table?: table_ref_list | [table_ref_addition];
// @ts-ignore
         where?: where_clause;
      }
// @ts-ignore
     => AstStatement<delete_stmt_node>
     */
// @ts-ignore
      if(f) f.forEach(info => {
// @ts-ignore
        info.table && tableList.add(`delete::${info.db}::${info.table}`);
// @ts-ignore
        columnList.add(`delete::${info.table}::(.*)`);
      });
// @ts-ignore
      if (t === null && f.length === 1) {
// @ts-ignore
        const tableInfo = f[0]
// @ts-ignore
        t = [{
// @ts-ignore
          db: tableInfo.db,
// @ts-ignore
          table: tableInfo.table,
// @ts-ignore
          as: tableInfo.as,
// @ts-ignore
          addition: true
        }]
      }
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: 'delete',
// @ts-ignore
          table: t,
// @ts-ignore
          from: f,
// @ts-ignore
          where: w
        }
      };
    };// @ts-ignore

  var peg$f159 = function(head, tail) {
      // => set_item[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f160 = function(tbl, c, v) {
      // => { column: ident; value: additive_expr; table?: ident;}
// @ts-ignore
      return { column: c, value: v, table: tbl && tbl[0] };
    };// @ts-ignore

  var peg$f161 = function(tbl, c, v) {
      // => { column: ident; value: column_ref; table?: ident; keyword: 'values' }
// @ts-ignore
      return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };
  };// @ts-ignore

  var peg$f162 = function(k, c) {
    // => { type: 'returning'; columns: column_ref_list | column_ref; }
// @ts-ignore
    return {
// @ts-ignore
      type: k && k.toLowerCase() || 'returning',
// @ts-ignore
      columns: c === '*' && [{ type: 'columne_ref', table: null, column: '*' }] || c
    }
  };// @ts-ignore

  var peg$f163 = function(head, tail) {
    // => ident_name[]
// @ts-ignore
      return createList(head, tail)
    };// @ts-ignore

  var peg$f164 = function(v) {
    // => value_item
// @ts-ignore
    return v
  };// @ts-ignore

  var peg$f165 = function(ri, t, p, c, v, r) {
      /*
// @ts-ignore
       export interface replace_insert_stmt_node {
// @ts-ignore
         type: 'insert' | 'replace';
// @ts-ignore
         table?: [table_name];
// @ts-ignore
         columns: column_list;
// @ts-ignore
         values: insert_value_clause;
// @ts-ignore
         partition?: insert_partition;
// @ts-ignore
         returning?: returning_stmt;
      }
// @ts-ignore
     => AstStatement<replace_insert_stmt_node>
     */
// @ts-ignore
      if (t) {
// @ts-ignore
        tableList.add(`insert::${t.db}::${t.table}`)
// @ts-ignore
        t.as = null
      }
// @ts-ignore
      if (c) {
// @ts-ignore
        let table = t && t.table || null
// @ts-ignore
        if(Array.isArray(v)) {
// @ts-ignore
          v.forEach((row, idx) => {
// @ts-ignore
            if(row.value.length != c.length) {
// @ts-ignore
              throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)
            }
          })
        }
// @ts-ignore
        c.forEach(c => columnList.add(`insert::${table}::${c}`));
      }
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: ri,
// @ts-ignore
          table: [t],
// @ts-ignore
          columns: c,
// @ts-ignore
          values: v,
// @ts-ignore
          partition: p,
// @ts-ignore
          returning: r,
        }
      };
    };// @ts-ignore

  var peg$f166 = function(ri, t, p, v, r) {
     // => AstStatement<replace_insert_stmt_node>
// @ts-ignore
      if (t) {
// @ts-ignore
        tableList.add(`insert::${t.db}::${t.table}`)
// @ts-ignore
        columnList.add(`insert::${t.table}::(.*)`);
// @ts-ignore
        t.as = null
      }
// @ts-ignore
      return {
// @ts-ignore
        tableList: Array.from(tableList),
// @ts-ignore
        columnList: columnListTableAlias(columnList),
// @ts-ignore
        ast: {
// @ts-ignore
          type: ri,
// @ts-ignore
          table: [t],
// @ts-ignore
          columns: null,
// @ts-ignore
          values: v,
// @ts-ignore
          partition: p,
// @ts-ignore
          returning: r,
        }
      };
    };// @ts-ignore

  var peg$f167 = function() {// @ts-ignore
 /* => 'insert' */ return 'insert'; };// @ts-ignore

  var peg$f168 = function() {// @ts-ignore
 /* => 'replace' */return 'replace'; };// @ts-ignore

  var peg$f169 = function(l) {// @ts-ignore
 /* => value_list */ return l; };// @ts-ignore

  var peg$f170 = function(head, tail) {
    // => value_item[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f171 = function(l) {
    // => expr_list
// @ts-ignore
      return l;
    };// @ts-ignore

  var peg$f172 = function(head, tail) {
    // => { type: 'expr_list'; value: expr_item[] }
// @ts-ignore
      const el = { type: 'expr_list' };
// @ts-ignore
      el.value = createList(head, tail);
// @ts-ignore
      return el;
    };// @ts-ignore

  var peg$f173 = function(e, u) {
      // => { type: 'interval', expr: expr; unit: interval_unit; }
// @ts-ignore
      return {
// @ts-ignore
        type: 'interval',
// @ts-ignore
        expr: e,
// @ts-ignore
        unit: u.toLowerCase(),
      }
    };// @ts-ignore

  var peg$f174 = function(e) {
      // => { type: 'interval', expr: expr; unit: interval_unit; }
// @ts-ignore
      return {
// @ts-ignore
        type: 'interval',
// @ts-ignore
        expr: e,
// @ts-ignore
        unit: '',
      }
    };// @ts-ignore

  var peg$f175 = function(condition_list, otherwise) {
      /* => {
// @ts-ignore
          type: 'case';
// @ts-ignore
          expr:  null;
          // nb: Only the last element is a case_else
// @ts-ignore
          args: (case_when_then | case_else)[];
        } */
// @ts-ignore
      if (otherwise) condition_list.push(otherwise);
// @ts-ignore
      return {
// @ts-ignore
        type: 'case',
// @ts-ignore
        expr: null,
// @ts-ignore
        args: condition_list
      };
    };// @ts-ignore

  var peg$f176 = function(expr, condition_list, otherwise) {
      /* => {
// @ts-ignore
          type: 'case';
// @ts-ignore
          expr: expr;
          // nb: Only the last element is a case_else
// @ts-ignore
          args: (case_when_then | case_else)[];
        } */
// @ts-ignore
      if (otherwise) condition_list.push(otherwise);
// @ts-ignore
      return {
// @ts-ignore
        type: 'case',
// @ts-ignore
        expr: expr,
// @ts-ignore
        args: condition_list
      };
    };// @ts-ignore

  var peg$f177 = function(condition, result) {
    // => { type: 'when'; cond: binary_expr; result: expr; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'when',
// @ts-ignore
      cond: condition,
// @ts-ignore
      result: result
    };
  };// @ts-ignore

  var peg$f178 = function(result) {
    // => { type: 'else'; condition?: never; result: expr; }
// @ts-ignore
    return { type: 'else', result: result };
  };// @ts-ignore

  var peg$f179 = function(head, tail) {
    /*
// @ts-ignore
    export type BINARY_OPERATORS = LOGIC_OPERATOR | 'OR' | 'AND' | multiplicative_operator | additive_operator
// @ts-ignore
      | arithmetic_comparison_operator
// @ts-ignore
      | 'IN' | 'NOT IN'
// @ts-ignore
      | 'BETWEEN' | 'NOT BETWEEN'
// @ts-ignore
      | 'IS' | 'IS NOT'
// @ts-ignore
      | 'LIKE'
// @ts-ignore
      | '@>' | '<@' | OPERATOR_CONCATENATION | DOUBLE_WELL_ARROW | WELL_ARROW | '?' | '?|' | '?&' | '#-'
// @ts-ignore
    export interface binary_expr {
// @ts-ignore
      type: 'binary_expr',
// @ts-ignore
      operator: BINARY_OPERATORS,
// @ts-ignore
      left: expr,
// @ts-ignore
      right: expr
    }
// @ts-ignore
    => binary_expr
    */
// @ts-ignore
    return createBinaryExprChain(head, tail);
  };// @ts-ignore

  var peg$f180 = function(op, tail) {
    /*
// @ts-ignore
    export type UNARY_OPERATORS = '+' | '-' | 'EXISTS' | 'NOT EXISTS'  | 'NULL'
    => {
// @ts-ignore
      type: 'unary_expr',
// @ts-ignore
      operator: UNARY_OPERATORS,
// @ts-ignore
      expr: expr;
// @ts-ignore
      parentheses?: boolean;
    } */
// @ts-ignore
    return createUnaryExpr(op, tail[0][1]);
  };// @ts-ignore

  var peg$f181 = function(head, tail) {
    // => binary_expr | { type: 'expr_list'; value: expr[] }
// @ts-ignore
    let result = head;
// @ts-ignore
    let seperator = ''
// @ts-ignore
    for (let i = 0; i < tail.length; i++) {
// @ts-ignore
      if (tail[i][1] === ',') {
// @ts-ignore
        seperator = ','
// @ts-ignore
        if (!Array.isArray(result)) result = [result]
// @ts-ignore
        result.push(tail[i][3])
// @ts-ignore
      } else {
// @ts-ignore
        result = createBinaryExpr(tail[i][1], result, tail[i][3]);
      }
    }
// @ts-ignore
    if (seperator === ',') {
// @ts-ignore
      const el = { type: 'expr_list' };
// @ts-ignore
      el.value = result
// @ts-ignore
      return el
    }
// @ts-ignore
    return result;
  };// @ts-ignore

  var peg$f182 = function(head, tail) {
      // => binary_expr
// @ts-ignore
      return createBinaryExprChain(head, tail);
    };// @ts-ignore

  var peg$f183 = function(head, tail) {
      // => binary_expr
// @ts-ignore
      return createBinaryExprChain(head, tail);
    };// @ts-ignore

  var peg$f184 = function(expr) {
    // => unary_expr
// @ts-ignore
      return createUnaryExpr('NOT', expr);
    };// @ts-ignore

  var peg$f185 = function(left, rh) {
    // => binary_expr
// @ts-ignore
      if (rh === null) return left;
// @ts-ignore
      else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);
// @ts-ignore
      else return createBinaryExpr(rh.op, left, rh.right);
    };// @ts-ignore

  var peg$f186 = function(op, stmt) {
    // => unary_expr
// @ts-ignore
    stmt.parentheses = true;
// @ts-ignore
    return createUnaryExpr(op, stmt);
  };// @ts-ignore

  var peg$f187 = function(nk) {// @ts-ignore
 /* => 'NOT EXISTS' */ return nk[0] + ' ' + nk[2]; };// @ts-ignore

  var peg$f188 = function(l) {
    // => { type: 'arithmetic'; tail: any }
// @ts-ignore
      return { type: 'arithmetic', tail: l };
    };// @ts-ignore

  var peg$f189 = function(right) {
    // => { op: 'IS'; right: additive_expr; }
// @ts-ignore
      return { op: 'IS', right: right };
    };// @ts-ignore

  var peg$f190 = function(right) {
    // => { type: 'origin'; value: string; }
// @ts-ignore
    const { db, table } = right.pop()
// @ts-ignore
    const tableName = table === '*' ? '*' : `"${table}"`
// @ts-ignore
    let tableStr = db ? `"${db}".${tableName}` : tableName
// @ts-ignore
    return { op: 'IS', right: {
// @ts-ignore
      type: 'default',
// @ts-ignore
      value: `DISTINCT FROM ${tableStr}`
    }}
  };// @ts-ignore

  var peg$f191 = function(right) {
      // => { type: 'IS NOT'; right: additive_expr; }
// @ts-ignore
      return { op: 'IS NOT', right: right };
  };// @ts-ignore

  var peg$f192 = function(op, begin, end) {
    // => { op: 'BETWEEN' | 'NOT BETWEEN'; right: { type: 'expr_list'; value: [expr, expr] }  }
// @ts-ignore
      return {
// @ts-ignore
        op: op,
// @ts-ignore
        right: {
// @ts-ignore
          type: 'expr_list',
// @ts-ignore
          value: [begin, end]
        }
      };
    };// @ts-ignore

  var peg$f193 = function(nk) {// @ts-ignore
 /* => 'NOT BETWEEN' */ return nk[0] + ' ' + nk[2]; };// @ts-ignore

  var peg$f194 = function(nk) {// @ts-ignore
 /* => 'LIKE' */ return nk[0] + ' ' + nk[2]; };// @ts-ignore

  var peg$f195 = function() {
    // => 'SIMILAR TO'
// @ts-ignore
    return 'SIMILAR TO'
  };// @ts-ignore

  var peg$f196 = function(nk) {// @ts-ignore
 /* => 'NOT IN' */ return nk[0] + ' ' + nk[2]; };// @ts-ignore

  var peg$f197 = function(op, right) {
     // => { op: like_op; right: literal | comparison_expr}
// @ts-ignore
      return { op: op, right: right };
    };// @ts-ignore

  var peg$f198 = function(op, l) {
    // => {op: in_op; right: expr_list | var_decl | literal_string; }
// @ts-ignore
      return { op: op, right: l };
    };// @ts-ignore

  var peg$f199 = function(op, e) {
    // => IGNORE
// @ts-ignore
      return { op: op, right: e };
    };// @ts-ignore

  var peg$f200 = function(s, c) {
    // => { op: string; right: expr }
// @ts-ignore
    return {
// @ts-ignore
      op: s,
// @ts-ignore
      right: c && c.expr || c
    }
  };// @ts-ignore

  var peg$f201 = function(head, tail) {
      // => binary_expr
// @ts-ignore
      return createBinaryExprChain(head, tail);
    };// @ts-ignore

  var peg$f202 = function(head, tail) {
      // => binary_expr
// @ts-ignore
      return createBinaryExprChain(head, tail)
    };// @ts-ignore

  var peg$f203 = function(c, a) {
    // => column_ref
// @ts-ignore
    c.array_index = a
// @ts-ignore
    return c
  };// @ts-ignore

  var peg$f204 = function(list) {
    // => or_and_where_expr
// @ts-ignore
        list.parentheses = true;
// @ts-ignore
        return list;
    };// @ts-ignore

  var peg$f205 = function(p, n) {
    // => { type: 'origin'; value: string; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'origin',
// @ts-ignore
      value: `$<${n.value}>`,
    }
  };// @ts-ignore

  var peg$f206 = function(p, n) {
    // => { type: 'origin'; value: string; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'origin',
// @ts-ignore
      value: `$${n.value}`,
    }
  };// @ts-ignore

  var peg$f207 = function(n) {
    // => { type: 'origin'; value: string; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'origin',
// @ts-ignore
      value: `E'${n.join('')}'`
    }
  };// @ts-ignore

  var peg$f208 = function(tbl) {
    // => IGNORE
// @ts-ignore
      columnList.add(`select::${tbl}::(.*)`);
// @ts-ignore
      return {
// @ts-ignore
          type: 'column_ref',
// @ts-ignore
          table: tbl,
// @ts-ignore
          column: '*'
      }
    };// @ts-ignore

  var peg$f209 = function(tbl, col, a, j) {
    // => IGNORE
// @ts-ignore
      const tableName = tbl && tbl[0] || null
// @ts-ignore
      columnList.add(`select::${tableName}::${col}`);
// @ts-ignore
      return {
// @ts-ignore
        type: 'column_ref',
// @ts-ignore
        table: tableName,
// @ts-ignore
        column: col,
// @ts-ignore
        arrow: a,
// @ts-ignore
        property: j
      };
  };// @ts-ignore

  var peg$f210 = function(schema, tbl, col) {
    /* => {
// @ts-ignore
        type: 'column_ref';
// @ts-ignore
        schema: string;
// @ts-ignore
        table: string;
// @ts-ignore
        column: column | '*';
// @ts-ignore
        arrow?: '->>' | '->';
// @ts-ignore
        property?: literal_string | literal_numeric;
      } */
// @ts-ignore
      columnList.add(`select::${schema}.${tbl[3]}::${col[3]}`);
// @ts-ignore
      return {
// @ts-ignore
        type: 'column_ref',
// @ts-ignore
        schema: schema,
// @ts-ignore
        table: tbl[3],
// @ts-ignore
        column: col[3]
      };
    };// @ts-ignore

  var peg$f211 = function(tbl, col) {
      /* => {
// @ts-ignore
        type: 'column_ref';
// @ts-ignore
        table: ident;
// @ts-ignore
        column: column | '*';
// @ts-ignore
        arrow?: '->>' | '->';
// @ts-ignore
        property?: literal_string | literal_numeric;
      } */
// @ts-ignore
      columnList.add(`select::${tbl}::${col}`);
// @ts-ignore
      return {
// @ts-ignore
        type: 'column_ref',
// @ts-ignore
        table: tbl,
// @ts-ignore
        column: col
      };
    };// @ts-ignore

  var peg$f212 = function(col) {
    // => IGNORE
// @ts-ignore
      columnList.add(`select::null::${col}`);
// @ts-ignore
      return {
// @ts-ignore
        type: 'column_ref',
// @ts-ignore
        table: null,
// @ts-ignore
        column: col
      };
    };// @ts-ignore

  var peg$f213 = function(head, tail) {
    // => column[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f214 = function(name) {// @ts-ignore
 return reservedMap[name.toUpperCase()] === true; };// @ts-ignore

  var peg$f215 = function(name) {
      // => ident_name
// @ts-ignore
      return name;
    };// @ts-ignore

  var peg$f216 = function(name) {
      // => indent_name
// @ts-ignore
      return name;
    };// @ts-ignore

  var peg$f217 = function(name) {// @ts-ignore
 if (reservedMap[name.toUpperCase()] === true) throw new Error("Error: "+ JSON.stringify(name)+" is a reserved word, can not as alias clause"); return false };// @ts-ignore

  var peg$f218 = function(name, c) {
    // => string
// @ts-ignore
    return `${name}(${c.join(', ')})`
  };// @ts-ignore

  var peg$f219 = function(name) {
// @ts-ignore
      if (reservedMap[name.toUpperCase()] === true) throw new Error("Error: "+ JSON.stringify(name)+" is a reserved word, can not as alias clause");
// @ts-ignore
      return false
    };// @ts-ignore

  var peg$f220 = function(name) {
      // => string
// @ts-ignore
      return name;
    };// @ts-ignore

  var peg$f221 = function(name) {
      // => IGNORE
// @ts-ignore
      return name;
    };// @ts-ignore

  var peg$f222 = function(chars) {// @ts-ignore
 /* => string */ return chars.join(''); };// @ts-ignore

  var peg$f223 = function(chars) {// @ts-ignore
 /* => string */ return chars.join(''); };// @ts-ignore

  var peg$f224 = function(chars) {// @ts-ignore
 /* => string */ return chars.join(''); };// @ts-ignore

  var peg$f225 = function(name) {// @ts-ignore
 return reservedMap[name.toUpperCase()] === true; };// @ts-ignore

  var peg$f226 = function(name) {// @ts-ignore
 /* => string */ return name; };// @ts-ignore

  var peg$f227 = function(start, parts) {// @ts-ignore
 /* => string */ return start + parts.join(''); };// @ts-ignore

  var peg$f228 = function(start, parts) {
      // => string
// @ts-ignore
      return start + parts.join('');
    };// @ts-ignore

  var peg$f229 = function(l) {
    // => { type: 'param'; value: ident_name }
// @ts-ignore
      return { type: 'param', value: l[1] };
    };// @ts-ignore

  var peg$f230 = function(kw, l) {
    // => { type: 'on update'; keyword: string; parentheses: boolean; expr: expr }
// @ts-ignore
    return {
// @ts-ignore
      type: 'on update',
// @ts-ignore
      keyword: kw,
// @ts-ignore
      parentheses: true,
// @ts-ignore
      expr: l
    }
  };// @ts-ignore

  var peg$f231 = function(kw) {
    // => { type: 'on update'; keyword: string; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'on update',
// @ts-ignore
      keyword: kw,
    }
  };// @ts-ignore

  var peg$f232 = function(aws) {
    // => { type: 'windows'; as_window_specification: as_window_specification }
// @ts-ignore
    return {
// @ts-ignore
      type: 'window',
// @ts-ignore
      as_window_specification: aws,
    }
  };// @ts-ignore

  var peg$f233 = function(bc, l) {
    // => { partitionby: partition_by_clause; orderby: order_by_clause }
// @ts-ignore
    return {
// @ts-ignore
      partitionby: bc,
// @ts-ignore
      orderby: l
    }
  };// @ts-ignore

  var peg$f234 = function(name, over) {
    // => { type: 'window_func'; name: string; over: over_partition }
// @ts-ignore
    return {
// @ts-ignore
      type: 'window_func',
// @ts-ignore
      name: name,
// @ts-ignore
      over: over
    }
  };// @ts-ignore

  var peg$f235 = function(name, l, cn, over) {
    // => { type: 'window_func'; name: string; args: expr_list; consider_nulls: null | string; over: over_partition }
// @ts-ignore
    return {
// @ts-ignore
      type: 'window_func',
// @ts-ignore
      name: name,
// @ts-ignore
      args: l,
// @ts-ignore
      over: over,
// @ts-ignore
      consider_nulls: cn
    };
  };// @ts-ignore

  var peg$f236 = function(name, l, cn, over) {
    // => window_fun_laglead
// @ts-ignore
    return {
// @ts-ignore
      type: 'window_func',
// @ts-ignore
      name: name,
// @ts-ignore
      args: {
// @ts-ignore
        type: 'expr_list', value: [l]
      },
// @ts-ignore
      over: over,
// @ts-ignore
      consider_nulls: cn
    };
  };// @ts-ignore

  var peg$f237 = function(v) {
    // => string
// @ts-ignore
    return v.toUpperCase() + ' NULLS'
  };// @ts-ignore

  var peg$f238 = function(name, e, bc) {
    // => { type: 'aggr_func'; name: 'SUM' | 'MAX' | 'MIN' | 'AVG'; args: { expr: additive_expr }; over: over_partition }
// @ts-ignore
      return {
// @ts-ignore
        type: 'aggr_func',
// @ts-ignore
        name: name,
// @ts-ignore
        args: {
// @ts-ignore
          expr: e
        },
// @ts-ignore
        over: bc
      };
    };// @ts-ignore

  var peg$f239 = function(name, arg, bc) {
    // => { type: 'aggr_func'; name: 'COUNT' | 'GROUP_CONCAT'; args:count_arg; over: over_partition }
// @ts-ignore
      return {
// @ts-ignore
        type: 'aggr_func',
// @ts-ignore
        name: name,
// @ts-ignore
        args: arg,
// @ts-ignore
        over: bc
      };
    };// @ts-ignore

  var peg$f240 = function(name, arg, or, bc) {
   // => { type: 'aggr_func'; name: 'PERCENTILE_CONT' | 'PERCENTILE_DISC'; args: literal_numeric / literal_array; within_group_orderby: order_by_clause; over?: over_partition }
// @ts-ignore
    return {
// @ts-ignore
        type: 'aggr_func',
// @ts-ignore
        name: name.toUpperCase(),
// @ts-ignore
        args: {
// @ts-ignore
          expr: arg
        },
// @ts-ignore
        within_group_orderby: or,
// @ts-ignore
        over: bc
      };
  };// @ts-ignore

  var peg$f241 = function(name, or, bc) {
    // => { type: 'aggr_func'; name: 'MODE'; args: literal_numeric / literal_array; within_group_orderby: order_by_clause; over?: over_partition }
// @ts-ignore
    return {
// @ts-ignore
        type: 'aggr_func',
// @ts-ignore
        name: name.toUpperCase(),
// @ts-ignore
        args: { expr: {} },
// @ts-ignore
        within_group_orderby: or,
// @ts-ignore
        over: bc
      };
  };// @ts-ignore

  var peg$f242 = function(d, c) {// @ts-ignore
 /* => { distinct: 'DISTINCT'; expr: column_ref; } */  return { distinct: d, expr: c }; };// @ts-ignore

  var peg$f243 = function(d, c, or) {// @ts-ignore
  /* => { distinct: 'DISTINCT'; expr: expr; orderby?: order_by_clause; } */  c.parentheses = true; return { distinct: d, expr: c, orderby: or }; };// @ts-ignore

  var peg$f244 = function(e) {// @ts-ignore
 /* => { expr: star_expr } */ return { expr: e }; };// @ts-ignore

  var peg$f245 = function(name, arg, o) {
    // => { type: 'aggr_func'; args:count_arg; name: 'ARRAY_AGG'; orderby?: order_by_clause  }
// @ts-ignore
      return {
// @ts-ignore
        type: 'aggr_func',
// @ts-ignore
        name: name,
// @ts-ignore
        args: arg,
// @ts-ignore
        orderby: o,
      };
    };// @ts-ignore

  var peg$f246 = function() {// @ts-ignore
 /* => { type: 'star'; value: '*' } */ return { type: 'star', value: '*' }; };// @ts-ignore

  var peg$f247 = function(name, l) {
      // => { type: 'function'; name: string; args: expr_list; }
// @ts-ignore
      if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }
// @ts-ignore
      return {
// @ts-ignore
        type: 'function',
// @ts-ignore
        name: name,
// @ts-ignore
        args: l ? l: { type: 'expr_list', value: [] }
      };
    };// @ts-ignore

  var peg$f248 = function(name, l, bc) {
    // => { type: 'function'; name: string; args: expr_list; over?: over_partition; }
// @ts-ignore
      return {
// @ts-ignore
        type: 'function',
// @ts-ignore
        name: name,
// @ts-ignore
        args: l ? l: { type: 'expr_list', value: [] },
// @ts-ignore
        over: bc
      };
    };// @ts-ignore

  var peg$f249 = function(f, up) {
    // => { type: 'function'; name: string; over?: on_update_current_timestamp; }
// @ts-ignore
    return {
// @ts-ignore
        type: 'function',
// @ts-ignore
        name: f,
// @ts-ignore
        over: up
    }
  };// @ts-ignore

  var peg$f250 = function() {
    // => 'string'
// @ts-ignore
    return f
  };// @ts-ignore

  var peg$f251 = function(kw, f, t, s) {
    // => { type: 'extract'; args: { field: extract_filed; cast_type: 'TIMESTAMP' | 'INTERVAL' | 'TIME'; source: expr; }}
// @ts-ignore
    return {
// @ts-ignore
        type: kw.toLowerCase(),
// @ts-ignore
        args: {
// @ts-ignore
          field: f,
// @ts-ignore
          cast_type: t,
// @ts-ignore
          source: s,
        }
    }
  };// @ts-ignore

  var peg$f252 = function(e, s, t, alias) {
    /* => {
// @ts-ignore
        as?: alias_clause,
// @ts-ignore
        type: 'cast';
// @ts-ignore
        expr: literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param
// @ts-ignore
          | expr;
// @ts-ignore
        symbol: '::' | 'as',
// @ts-ignore
        target: data_type;
      }
      */
// @ts-ignore
    e.parentheses = true
// @ts-ignore
    return {
// @ts-ignore
      as: alias,
// @ts-ignore
      type: 'cast',
// @ts-ignore
      expr: e,
// @ts-ignore
      symbol: '::',
// @ts-ignore
      target: t,
    }
  };// @ts-ignore

  var peg$f253 = function(e, s, t, alias) {
    /* => {
// @ts-ignore
        as?: alias_clause,
// @ts-ignore
        type: 'cast';
// @ts-ignore
        expr: literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param
// @ts-ignore
          | expr;
// @ts-ignore
        symbol: '::' | 'as',
// @ts-ignore
        target: data_type;
      }
      */
// @ts-ignore
    return {
// @ts-ignore
      as: alias,
// @ts-ignore
      type: 'cast',
// @ts-ignore
      expr: e,
// @ts-ignore
      symbol: '::',
// @ts-ignore
      target: t
    }
  };// @ts-ignore

  var peg$f254 = function(e, t) {
    // => IGNORE
// @ts-ignore
    return {
// @ts-ignore
      type: 'cast',
// @ts-ignore
      expr: e,
// @ts-ignore
      symbol: 'as',
// @ts-ignore
      target: t
    };
  };// @ts-ignore

  var peg$f255 = function(e, precision) {
    // => IGNORE
// @ts-ignore
    return {
// @ts-ignore
      type: 'cast',
// @ts-ignore
      expr: e,
// @ts-ignore
      symbol: 'as',
// @ts-ignore
      target: {
// @ts-ignore
        dataType: 'DECIMAL(' + precision + ')'
      }
    };
  };// @ts-ignore

  var peg$f256 = function(e, precision, scale) {
      // => IGNORE
// @ts-ignore
      return {
// @ts-ignore
        type: 'cast',
// @ts-ignore
        expr: e,
// @ts-ignore
        symbol: 'as',
// @ts-ignore
        target: {
// @ts-ignore
          dataType: 'DECIMAL(' + precision + ', ' + scale + ')'
        }
      };
    };// @ts-ignore

  var peg$f257 = function(e, s, t) {// @ts-ignore
 /* MySQL cast to un-/signed integer */
    // => IGNORE
// @ts-ignore
    return {
// @ts-ignore
      type: 'cast',
// @ts-ignore
      expr: e,
// @ts-ignore
      symbol: 'as',
// @ts-ignore
      target: {
// @ts-ignore
        dataType: s + (t ? ' ' + t: '')
      }
    };
  };// @ts-ignore

  var peg$f258 = function(s, c) {
    /*
      => {
// @ts-ignore
        expr_list: expr_list | {type: 'origin', value: ident },
// @ts-ignore
        type: string,
// @ts-ignore
        keyword: string,
// @ts-ignore
        brackets: boolean
      }
    */
// @ts-ignore
    return {
// @ts-ignore
      expr_list: c || { type: 'origin', value: '' },
// @ts-ignore
      type: 'array',
// @ts-ignore
      keyword: 'array',
// @ts-ignore
      brackets: true
    }
  };// @ts-ignore

  var peg$f259 = function(head, tail) {
    // => literal[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f260 = function() {
    // => { type: 'null'; value: null }
// @ts-ignore
      return { type: 'null', value: null };
    };// @ts-ignore

  var peg$f261 = function() {
    // => { type: 'not null'; value: 'not null' }
// @ts-ignore
    return {
// @ts-ignore
      type: 'not null',
// @ts-ignore
      value: 'not null',
    }
  };// @ts-ignore

  var peg$f262 = function() {
      // => { type: 'bool', value: true }
// @ts-ignore
      return { type: 'bool', value: true };
    };// @ts-ignore

  var peg$f263 = function() {
      //=> { type: 'bool', value: false }
// @ts-ignore
      return { type: 'bool', value: false };
    };// @ts-ignore

  var peg$f264 = function(ca, fs) {
      // => { type: 'single_quote_string'; value: string; }
// @ts-ignore
      return {
// @ts-ignore
        type: 'single_quote_string',
// @ts-ignore
        value: `${ca[1].join('')}${fs[1].join('')}`
      };
    };// @ts-ignore

  var peg$f265 = function(ca) {
      // => { type: 'single_quote_string'; value: string; }
// @ts-ignore
      return {
// @ts-ignore
        type: 'single_quote_string',
// @ts-ignore
        value: ca[1].join('')
      };
    };// @ts-ignore

  var peg$f266 = function(ca) {
      // => { type: 'string'; value: string; }
// @ts-ignore
      return {
// @ts-ignore
        type: 'double_quote_string',
// @ts-ignore
        value: ca[1].join('')
      };
    };// @ts-ignore

  var peg$f267 = function(type, ca) {
      // => { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }
// @ts-ignore
      return {
// @ts-ignore
        type: type.toLowerCase(),
// @ts-ignore
        value: ca[1].join('')
      };
    };// @ts-ignore

  var peg$f268 = function(type, ca) {
    // => { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }
// @ts-ignore
      return {
// @ts-ignore
        type: type.toLowerCase(),
// @ts-ignore
        value: ca[1].join('')
      };
    };// @ts-ignore

  var peg$f269 = function() {// @ts-ignore
 return "\\'";  };// @ts-ignore

  var peg$f270 = function() {// @ts-ignore
 return '\\"';  };// @ts-ignore

  var peg$f271 = function() {// @ts-ignore
 return "\\\\"; };// @ts-ignore

  var peg$f272 = function() {// @ts-ignore
 return "\\/";  };// @ts-ignore

  var peg$f273 = function() {// @ts-ignore
 return "\b"; };// @ts-ignore

  var peg$f274 = function() {// @ts-ignore
 return "\f"; };// @ts-ignore

  var peg$f275 = function() {// @ts-ignore
 return "\n"; };// @ts-ignore

  var peg$f276 = function() {// @ts-ignore
 return "\r"; };// @ts-ignore

  var peg$f277 = function() {// @ts-ignore
 return "\t"; };// @ts-ignore

  var peg$f278 = function(h1, h2, h3, h4) {
// @ts-ignore
      return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
    };// @ts-ignore

  var peg$f279 = function() {// @ts-ignore
 return "\\"; };// @ts-ignore

  var peg$f280 = function() {// @ts-ignore
 return "''" };// @ts-ignore

  var peg$f281 = function(n) {
    // => number | { type: 'bigint'; value: string; }
// @ts-ignore
      if (n && n.type === 'bigint') return n
// @ts-ignore
      return { type: 'number', value: n };
    };// @ts-ignore

  var peg$f282 = function(int_, frac, exp) {
// @ts-ignore
    const numStr = int_ + frac + exp
// @ts-ignore
    return {
// @ts-ignore
      type: 'bigint',
// @ts-ignore
      value: numStr
    }
  };// @ts-ignore

  var peg$f283 = function(int_, frac) {
    // => IGNORE
// @ts-ignore
    const numStr = int_ + frac
// @ts-ignore
    if (isBigInt(int_)) return {
// @ts-ignore
      type: 'bigint',
// @ts-ignore
      value: numStr
    }
// @ts-ignore
    return parseFloat(numStr);
  };// @ts-ignore

  var peg$f284 = function(int_, exp) {
    // => IGNORE
// @ts-ignore
    const numStr = int_ + exp
// @ts-ignore
    return {
// @ts-ignore
      type: 'bigint',
// @ts-ignore
      value: numStr
    }
  };// @ts-ignore

  var peg$f285 = function(int_) {
    // => IGNORE
// @ts-ignore
    if (isBigInt(int_)) return {
// @ts-ignore
      type: 'bigint',
// @ts-ignore
      value: int_
    }
// @ts-ignore
    return parseFloat(int_);
  };// @ts-ignore

  var peg$f286 = function(op, digits) {// @ts-ignore
 return "-" + digits; };// @ts-ignore

  var peg$f287 = function(op, digit) {// @ts-ignore
 return "-" + digit; };// @ts-ignore

  var peg$f288 = function(digits) {// @ts-ignore
 return "." + digits; };// @ts-ignore

  var peg$f289 = function(e, digits) {// @ts-ignore
 return e + digits; };// @ts-ignore

  var peg$f290 = function(digits) {// @ts-ignore
 return digits.join(""); };// @ts-ignore

  var peg$f291 = function(e, sign) {// @ts-ignore
 return e + (sign !== null ? sign: ''); };// @ts-ignore

  var peg$f292 = function() {// @ts-ignore
 return 'DROP'; };// @ts-ignore

  var peg$f293 = function() {// @ts-ignore
 return 'TEMPORARY'; };// @ts-ignore

  var peg$f294 = function() {// @ts-ignore
 return 'TEMP'; };// @ts-ignore

  var peg$f295 = function() {// @ts-ignore
 return 'RETURNING' };// @ts-ignore

  var peg$f296 = function() {// @ts-ignore
 return 'PARTITION' };// @ts-ignore

  var peg$f297 = function() {// @ts-ignore
 return 'TABLE'; };// @ts-ignore

  var peg$f298 = function() {// @ts-ignore
 return 'DATABASE'; };// @ts-ignore

  var peg$f299 = function() {// @ts-ignore
 return 'SCHEME'; };// @ts-ignore

  var peg$f300 = function() {// @ts-ignore
 return 'SEQUENCE'; };// @ts-ignore

  var peg$f301 = function() {// @ts-ignore
 return 'TABLESPACE'; };// @ts-ignore

  var peg$f302 = function() {// @ts-ignore
 return 'COLLATE'; };// @ts-ignore

  var peg$f303 = function() {// @ts-ignore
 return 'OFFSET' };// @ts-ignore

  var peg$f304 = function() {// @ts-ignore
 return 'ASC'; };// @ts-ignore

  var peg$f305 = function() {// @ts-ignore
 return 'DESC'; };// @ts-ignore

  var peg$f306 = function() {// @ts-ignore
 return 'ALL'; };// @ts-ignore

  var peg$f307 = function() {// @ts-ignore
 return 'DISTINCT';};// @ts-ignore

  var peg$f308 = function() {// @ts-ignore
 return 'BETWEEN'; };// @ts-ignore

  var peg$f309 = function() {// @ts-ignore
 return 'IN'; };// @ts-ignore

  var peg$f310 = function() {// @ts-ignore
 return 'IS'; };// @ts-ignore

  var peg$f311 = function() {// @ts-ignore
 return 'LIKE'; };// @ts-ignore

  var peg$f312 = function() {// @ts-ignore
 return 'ILIKE'; };// @ts-ignore

  var peg$f313 = function() {// @ts-ignore
 /* => 'EXISTS' */ return 'EXISTS'; };// @ts-ignore

  var peg$f314 = function() {// @ts-ignore
 return 'NOT'; };// @ts-ignore

  var peg$f315 = function() {// @ts-ignore
 return 'AND'; };// @ts-ignore

  var peg$f316 = function() {// @ts-ignore
 return 'OR'; };// @ts-ignore

  var peg$f317 = function() {// @ts-ignore
 return 'ARRAY'; };// @ts-ignore

  var peg$f318 = function() {// @ts-ignore
 return 'ARRAY_AGG'; };// @ts-ignore

  var peg$f319 = function() {// @ts-ignore
 return 'COUNT'; };// @ts-ignore

  var peg$f320 = function() {// @ts-ignore
 return 'GROUP_CONCAT'; };// @ts-ignore

  var peg$f321 = function() {// @ts-ignore
 return 'MAX'; };// @ts-ignore

  var peg$f322 = function() {// @ts-ignore
 return 'MIN'; };// @ts-ignore

  var peg$f323 = function() {// @ts-ignore
 return 'SUM'; };// @ts-ignore

  var peg$f324 = function() {// @ts-ignore
 return 'AVG'; };// @ts-ignore

  var peg$f325 = function() {// @ts-ignore
 return 'EXTRACT'; };// @ts-ignore

  var peg$f326 = function() {// @ts-ignore
 return 'CALL'; };// @ts-ignore

  var peg$f327 = function() {// @ts-ignore
 return 'BOOL'; };// @ts-ignore

  var peg$f328 = function() {// @ts-ignore
 return 'BOOLEAN'; };// @ts-ignore

  var peg$f329 = function() {// @ts-ignore
 return 'CHAR'; };// @ts-ignore

  var peg$f330 = function() {// @ts-ignore
 return 'VARCHAR';};// @ts-ignore

  var peg$f331 = function() {// @ts-ignore
 return 'NUMERIC'; };// @ts-ignore

  var peg$f332 = function() {// @ts-ignore
 return 'DECIMAL'; };// @ts-ignore

  var peg$f333 = function() {// @ts-ignore
 return 'SIGNED'; };// @ts-ignore

  var peg$f334 = function() {// @ts-ignore
 return 'UNSIGNED'; };// @ts-ignore

  var peg$f335 = function() {// @ts-ignore
 return 'INT'; };// @ts-ignore

  var peg$f336 = function() {// @ts-ignore
 return 'ZEROFILL'; };// @ts-ignore

  var peg$f337 = function() {// @ts-ignore
 return 'INTEGER'; };// @ts-ignore

  var peg$f338 = function() {// @ts-ignore
 return 'JSON'; };// @ts-ignore

  var peg$f339 = function() {// @ts-ignore
 return 'JSONB'; };// @ts-ignore

  var peg$f340 = function() {// @ts-ignore
 return 'GEOMETRY'; };// @ts-ignore

  var peg$f341 = function() {// @ts-ignore
 return 'SMALLINT'; };// @ts-ignore

  var peg$f342 = function() {// @ts-ignore
 return 'SERIAL'; };// @ts-ignore

  var peg$f343 = function() {// @ts-ignore
 return 'TINYINT'; };// @ts-ignore

  var peg$f344 = function() {// @ts-ignore
 return 'TINYTEXT'; };// @ts-ignore

  var peg$f345 = function() {// @ts-ignore
 return 'TEXT'; };// @ts-ignore

  var peg$f346 = function() {// @ts-ignore
 return 'MEDIUMTEXT'; };// @ts-ignore

  var peg$f347 = function() {// @ts-ignore
 return 'LONGTEXT'; };// @ts-ignore

  var peg$f348 = function() {// @ts-ignore
 return 'BIGINT'; };// @ts-ignore

  var peg$f349 = function() {// @ts-ignore
 return 'ENUM'; };// @ts-ignore

  var peg$f350 = function() {// @ts-ignore
 return 'FLOAT'; };// @ts-ignore

  var peg$f351 = function() {// @ts-ignore
 return 'DOUBLE'; };// @ts-ignore

  var peg$f352 = function() {// @ts-ignore
 return 'DATE'; };// @ts-ignore

  var peg$f353 = function() {// @ts-ignore
 return 'DATETIME'; };// @ts-ignore

  var peg$f354 = function() {// @ts-ignore
 return 'ROWS'; };// @ts-ignore

  var peg$f355 = function() {// @ts-ignore
 return 'TIME'; };// @ts-ignore

  var peg$f356 = function() {// @ts-ignore
 return 'TIMESTAMP'; };// @ts-ignore

  var peg$f357 = function() {// @ts-ignore
 return 'TRUNCATE'; };// @ts-ignore

  var peg$f358 = function() {// @ts-ignore
 return 'USER'; };// @ts-ignore

  var peg$f359 = function() {// @ts-ignore
 return 'UUID'; };// @ts-ignore

  var peg$f360 = function() {// @ts-ignore
 return 'CURRENT_DATE'; };// @ts-ignore

  var peg$f361 = function() {// @ts-ignore
 return 'ADDDATE'; };// @ts-ignore

  var peg$f362 = function() {// @ts-ignore
 return 'INTERVAL'; };// @ts-ignore

  var peg$f363 = function() {// @ts-ignore
 return 'YEAR'; };// @ts-ignore

  var peg$f364 = function() {// @ts-ignore
 return 'MONTH'; };// @ts-ignore

  var peg$f365 = function() {// @ts-ignore
 return 'DAY'; };// @ts-ignore

  var peg$f366 = function() {// @ts-ignore
 return 'HOUR'; };// @ts-ignore

  var peg$f367 = function() {// @ts-ignore
 return 'MINUTE'; };// @ts-ignore

  var peg$f368 = function() {// @ts-ignore
 return 'SECOND'; };// @ts-ignore

  var peg$f369 = function() {// @ts-ignore
 return 'CURRENT_TIME'; };// @ts-ignore

  var peg$f370 = function() {// @ts-ignore
 return 'CURRENT_TIMESTAMP'; };// @ts-ignore

  var peg$f371 = function() {// @ts-ignore
 return 'CURRENT_USER'; };// @ts-ignore

  var peg$f372 = function() {// @ts-ignore
 return 'SESSION_USER'; };// @ts-ignore

  var peg$f373 = function() {// @ts-ignore
 return 'SYSTEM_USER'; };// @ts-ignore

  var peg$f374 = function() {// @ts-ignore
 return 'GLOBAL'; };// @ts-ignore

  var peg$f375 = function() {// @ts-ignore
 return 'SESSION'; };// @ts-ignore

  var peg$f376 = function() {// @ts-ignore
 return 'LOCAL'; };// @ts-ignore

  var peg$f377 = function() {// @ts-ignore
 return 'PERSIST'; };// @ts-ignore

  var peg$f378 = function() {// @ts-ignore
 return 'PERSIST_ONLY'; };// @ts-ignore

  var peg$f379 = function() {// @ts-ignore
 return 'ADD'; };// @ts-ignore

  var peg$f380 = function() {// @ts-ignore
 return 'COLUMN'; };// @ts-ignore

  var peg$f381 = function() {// @ts-ignore
 return 'INDEX'; };// @ts-ignore

  var peg$f382 = function() {// @ts-ignore
 return 'KEY'; };// @ts-ignore

  var peg$f383 = function() {// @ts-ignore
 return 'FULLTEXT'; };// @ts-ignore

  var peg$f384 = function() {// @ts-ignore
 return 'SPATIAL'; };// @ts-ignore

  var peg$f385 = function() {// @ts-ignore
 return 'UNIQUE'; };// @ts-ignore

  var peg$f386 = function() {// @ts-ignore
 return 'KEY_BLOCK_SIZE'; };// @ts-ignore

  var peg$f387 = function() {// @ts-ignore
 return 'COMMENT'; };// @ts-ignore

  var peg$f388 = function() {// @ts-ignore
 return 'CONSTRAINT'; };// @ts-ignore

  var peg$f389 = function() {// @ts-ignore
 return 'CONCURRENTLY'; };// @ts-ignore

  var peg$f390 = function() {// @ts-ignore
 return 'REFERENCES'; };// @ts-ignore

  var peg$f391 = function(k, s, c) {
    // => { type: 'comment'; keyword: 'comment'; symbol: '='; value: literal_string; }
// @ts-ignore
    return {
// @ts-ignore
      type: k.toLowerCase(),
// @ts-ignore
      keyword: k.toLowerCase(),
// @ts-ignore
      symbol: s,
// @ts-ignore
      value: c,
    }
  };// @ts-ignore

  var peg$f392 = function() {// @ts-ignore
 varList = []; return true; };// @ts-ignore

  var peg$f393 = function(s) {
      // => { type: 'proc'; stmt: assign_stmt | return_stmt; vars: any }
// @ts-ignore
      return { type: 'proc', stmt: s, vars: varList };
    };// @ts-ignore

  var peg$f394 = function(va, s, e) {
    // => { type: 'assign'; left: var_decl | without_prefix_var_decl; symbol: ':=' | '='; right: proc_expr; }
// @ts-ignore
    return {
// @ts-ignore
      type: 'assign',
// @ts-ignore
      left: va,
// @ts-ignore
      symbol: s,
// @ts-ignore
      right: e
    };
  };// @ts-ignore

  var peg$f395 = function(e) {
    // => { type: 'return'; expr: proc_expr; }
// @ts-ignore
      return { type: 'return', expr: e };
    };// @ts-ignore

  var peg$f396 = function(head, tail) {
      // => binary_expr
// @ts-ignore
      return createBinaryExprChain(head, tail);
    };// @ts-ignore

  var peg$f397 = function(head, tail) {
      // => binary_expr
// @ts-ignore
      return createBinaryExprChain(head, tail);
    };// @ts-ignore

  var peg$f398 = function(lt, op, rt, expr) {
    // => { type: 'join'; ltable: var_decl; rtable: var_decl; op: join_op; expr: on_clause; }
// @ts-ignore
      return {
// @ts-ignore
        type: 'join',
// @ts-ignore
        ltable: lt,
// @ts-ignore
        rtable: rt,
// @ts-ignore
        op: op,
// @ts-ignore
        on: expr
      };
    };// @ts-ignore

  var peg$f399 = function(e) {
    // => proc_additive_expr & { parentheses: true; }
// @ts-ignore
      e.parentheses = true;
// @ts-ignore
      return e;
    };// @ts-ignore

  var peg$f400 = function(dt, tail) {
    // => string
// @ts-ignore
      let name = dt
// @ts-ignore
      if (tail !== null) {
// @ts-ignore
        name = `${dt}.${tail[3]}`
      }
// @ts-ignore
      return name;
    };// @ts-ignore

  var peg$f401 = function(name, l) {
    // => { type: 'function'; name: string; args: null | { type: expr_list; value: proc_primary_list; }}
      //compatible with original func_call
// @ts-ignore
      return {
// @ts-ignore
        type: 'function',
// @ts-ignore
        name: name,
// @ts-ignore
        args: {
// @ts-ignore
          type: 'expr_list',
// @ts-ignore
          value: l
        }
      };
    };// @ts-ignore

  var peg$f402 = function(name) {
    // => IGNORE
// @ts-ignore
    return {
// @ts-ignore
        type: 'function',
// @ts-ignore
        name: name,
// @ts-ignore
        args: null
      };
  };// @ts-ignore

  var peg$f403 = function(head, tail) {
    // => proc_primary[]
// @ts-ignore
      return createList(head, tail);
    };// @ts-ignore

  var peg$f404 = function(l) {
    // => { type: 'array'; value: proc_primary_list }
// @ts-ignore
    return { type: 'array', value: l };
  };// @ts-ignore

  var peg$f405 = function(p, d) {
    // => without_prefix_var_decl & { type: 'var'; prefix: string; };
    //push for analysis
// @ts-ignore
    return {
// @ts-ignore
      type: 'var',
// @ts-ignore
      ...d,
// @ts-ignore
      prefix: p
    };
  };// @ts-ignore

  var peg$f406 = function(name, m) {
    // => { type: 'var'; prefix: string; name: ident_name; members: mem_chain; }
    //push for analysis
// @ts-ignore
    varList.push(name);
// @ts-ignore
    return {
// @ts-ignore
      type: 'var',
// @ts-ignore
      name: name,
// @ts-ignore
      members: m,
// @ts-ignore
      prefix: null,
    };
  };// @ts-ignore

  var peg$f407 = function(l) {
    // => ident_name[];
// @ts-ignore
    const s = [];
// @ts-ignore
    for (let i = 0; i < l.length; i++) {
// @ts-ignore
      s.push(l[i][1]);
    }
// @ts-ignore
    return s;
  };// @ts-ignore

  var peg$f408 = function(t) {
// @ts-ignore
    /* => data_type */
// @ts-ignore
    return { ...t, array: 'two' }
  };// @ts-ignore

  var peg$f409 = function(t) {
// @ts-ignore
    /* => data_type */
// @ts-ignore
    return { ...t, array: 'one' }
  };// @ts-ignore

  var peg$f410 = function(t) {// @ts-ignore
 /* => data_type */ return { dataType: t }};// @ts-ignore

  var peg$f411 = function(t, l) {
    // => data_type
// @ts-ignore
    return { dataType: t, length: parseInt(l.join(''), 10) };
  };// @ts-ignore

  var peg$f412 = function(t) {// @ts-ignore
 /* =>  data_type */ return { dataType: t }; };// @ts-ignore

  var peg$f413 = function(t) {// @ts-ignore
 /* =>  data_type */  return { dataType: t }; };// @ts-ignore

  var peg$f414 = function(un, ze) {
    // => any[];
// @ts-ignore
    const result = []
// @ts-ignore
    if (un) result.push(un)
// @ts-ignore
    if (ze) result.push(ze)
// @ts-ignore
    return result
  };// @ts-ignore

  var peg$f415 = function(t, l, r, s) {// @ts-ignore
 /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s }; };// @ts-ignore

  var peg$f416 = function(t, l, s) {// @ts-ignore
 /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), suffix: s }; };// @ts-ignore

  var peg$f417 = function(t, s) {// @ts-ignore
 /* =>  data_type */ return { dataType: t, suffix: s }; };// @ts-ignore

  var peg$f418 = function(t, l) {// @ts-ignore
 /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10) }; };// @ts-ignore

  var peg$f419 = function(t) {// @ts-ignore
 /* =>  data_type */  return { dataType: t }; };// @ts-ignore

  var peg$f420 = function(t, e) {
// @ts-ignore
    /* =>  data_type */
// @ts-ignore
    e.parentheses = true
// @ts-ignore
    return {
// @ts-ignore
      dataType: t,
// @ts-ignore
      expr: e
    }
  };// @ts-ignore

  var peg$f421 = function(t) {// @ts-ignore
 /* =>  data_type */  return { dataType: t }; };// @ts-ignore

  var peg$f422 = function(t) {// @ts-ignore
/* =>  data_type */  return { dataType: t }; };// @ts-ignore

  var peg$f423 = function(t) {// @ts-ignore
 /* =>  data_type */  return { dataType: t }; };// @ts-ignore

  var peg$f424 = function(t) {// @ts-ignore
 /* =>  data_type */ return { dataType: `${t}[]` }};// @ts-ignore

  var peg$f425 = function(t) {// @ts-ignore
 /* =>  data_type */ return { dataType: t }};// @ts-ignore

  var peg$f426 = function(t) {// @ts-ignore
/* =>  data_type */  return { dataType: t }};
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse__();
// @ts-ignore
    s2 = peg$parsemultiple_stmt();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parsecmd_stmt();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parsecrud_stmt();
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f0(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecmd_stmt() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsedrop_stmt();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecreate_stmt();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsetruncate_stmt();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parserename_stmt();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsecall_stmt();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseuse_stmt();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parsealter_table_stmt();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseset_stmt();
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$parselock_stmt();
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$parseshow_stmt();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_stmt() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsecreate_table_stmt();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecreate_constraint_trigger();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsecreate_extension_stmt();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsecreate_index_stmt();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsecreate_sequence();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsecreate_db_stmt();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecrud_stmt() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseunion_stmt();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseupdate_stmt();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsereplace_insert_stmt();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseinsert_no_columns_stmt();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsedelete_stmt();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsecmd_stmt();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseproc_stmts();
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemultiple_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecrud_stmt();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseSEMICOLON();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsecrud_stmt();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseSEMICOLON();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parsecrud_stmt();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f1(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunion_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseselect_stmt();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_UNION();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseKW_ALL();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parseselect_stmt();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7, s8, s9];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_UNION();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseKW_ALL();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseselect_stmt();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7, s8, s9];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseorder_by_clause();
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      s5 = peg$parse__();
// @ts-ignore
      s6 = peg$parselimit_clause();
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        s6 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f2(s1, s2, s4, s6);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_extension_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CREATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c0) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 9);
// @ts-ignore
        peg$currPos += 9;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_IF_NOT_EXISTS();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseident_name();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = peg$parseliteral_string();
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseKW_WITH();
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s9 = null;
          }
// @ts-ignore
          s10 = peg$parse__();
// @ts-ignore
          s11 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1) {
// @ts-ignore
            s12 = input.substr(peg$currPos, 6);
// @ts-ignore
            peg$currPos += 6;
// @ts-ignore
          } else {
// @ts-ignore
            s12 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
// @ts-ignore
          if (s12 !== peg$FAILED) {
// @ts-ignore
            s13 = peg$parse__();
// @ts-ignore
            s14 = peg$parseident_name();
// @ts-ignore
            if (s14 !== peg$FAILED) {
// @ts-ignore
              s12 = [s12, s13, s14];
// @ts-ignore
              s11 = s12;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s11;
// @ts-ignore
              s11 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s11;
// @ts-ignore
            s11 = peg$FAILED;
          }
// @ts-ignore
          if (s11 === peg$FAILED) {
// @ts-ignore
            s11 = peg$parseliteral_string();
          }
// @ts-ignore
          if (s11 === peg$FAILED) {
// @ts-ignore
            s11 = null;
          }
// @ts-ignore
          s12 = peg$parse__();
// @ts-ignore
          s13 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c2) {
// @ts-ignore
            s14 = input.substr(peg$currPos, 7);
// @ts-ignore
            peg$currPos += 7;
// @ts-ignore
          } else {
// @ts-ignore
            s14 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
// @ts-ignore
          if (s14 !== peg$FAILED) {
// @ts-ignore
            s15 = peg$parse__();
// @ts-ignore
            s16 = peg$parseident_name();
// @ts-ignore
            if (s16 === peg$FAILED) {
// @ts-ignore
              s16 = peg$parseliteral_string();
            }
// @ts-ignore
            if (s16 !== peg$FAILED) {
// @ts-ignore
              s14 = [s14, s15, s16];
// @ts-ignore
              s13 = s14;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s13;
// @ts-ignore
              s13 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s13;
// @ts-ignore
            s13 = peg$FAILED;
          }
// @ts-ignore
          if (s13 === peg$FAILED) {
// @ts-ignore
            s13 = null;
          }
// @ts-ignore
          s14 = peg$parse__();
// @ts-ignore
          s15 = peg$currPos;
// @ts-ignore
          s16 = peg$parseKW_FROM();
// @ts-ignore
          if (s16 !== peg$FAILED) {
// @ts-ignore
            s17 = peg$parse__();
// @ts-ignore
            s18 = peg$parseident_name();
// @ts-ignore
            if (s18 === peg$FAILED) {
// @ts-ignore
              s18 = peg$parseliteral_string();
            }
// @ts-ignore
            if (s18 !== peg$FAILED) {
// @ts-ignore
              s16 = [s16, s17, s18];
// @ts-ignore
              s15 = s16;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s15;
// @ts-ignore
              s15 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s15;
// @ts-ignore
            s15 = peg$FAILED;
          }
// @ts-ignore
          if (s15 === peg$FAILED) {
// @ts-ignore
            s15 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f3(s1, s3, s5, s7, s9, s11, s13, s15);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_db_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecreate_option_character_set();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsecreate_option_character_set();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsecreate_option_character_set();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f4(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_db_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CREATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_DATABASE();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_SCHEME();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_IF_NOT_EXISTS();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseident_name();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parsecreate_db_definition();
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s9 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f5(s1, s3, s5, s7, s9);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_table_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CREATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TEMPORARY();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_TABLE();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseKW_IF_NOT_EXISTS();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parsetable_ref_list();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse__();
// @ts-ignore
          s11 = peg$parsecreate_table_definition();
// @ts-ignore
          if (s11 !== peg$FAILED) {
// @ts-ignore
            s12 = peg$parse__();
// @ts-ignore
            s13 = peg$parsetable_options();
// @ts-ignore
            if (s13 === peg$FAILED) {
// @ts-ignore
              s13 = null;
            }
// @ts-ignore
            s14 = peg$parse__();
// @ts-ignore
            s15 = peg$parseKW_IGNORE();
// @ts-ignore
            if (s15 === peg$FAILED) {
// @ts-ignore
              s15 = peg$parseKW_REPLACE();
            }
// @ts-ignore
            if (s15 === peg$FAILED) {
// @ts-ignore
              s15 = null;
            }
// @ts-ignore
            s16 = peg$parse__();
// @ts-ignore
            s17 = peg$parseKW_AS();
// @ts-ignore
            if (s17 === peg$FAILED) {
// @ts-ignore
              s17 = null;
            }
// @ts-ignore
            s18 = peg$parse__();
// @ts-ignore
            s19 = peg$parseunion_stmt();
// @ts-ignore
            if (s19 === peg$FAILED) {
// @ts-ignore
              s19 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f6(s1, s3, s7, s9, s11, s13, s15, s17, s19);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_CREATE();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_TEMPORARY();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_TABLE();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseKW_IF_NOT_EXISTS();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parsetable_ref_list();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parsecreate_like_table();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f7(s1, s3, s7, s9, s11);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_sequence() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CREATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TEMPORARY();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_TEMP();
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_SEQUENCE();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseKW_IF_NOT_EXISTS();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parsetable_name();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse__();
// @ts-ignore
          s11 = peg$currPos;
// @ts-ignore
          s12 = peg$parseKW_AS();
// @ts-ignore
          if (s12 !== peg$FAILED) {
// @ts-ignore
            s13 = peg$parse__();
// @ts-ignore
            s14 = peg$parsealias_ident();
// @ts-ignore
            if (s14 !== peg$FAILED) {
// @ts-ignore
              s12 = [s12, s13, s14];
// @ts-ignore
              s11 = s12;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s11;
// @ts-ignore
              s11 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s11;
// @ts-ignore
            s11 = peg$FAILED;
          }
// @ts-ignore
          if (s11 === peg$FAILED) {
// @ts-ignore
            s11 = null;
          }
// @ts-ignore
          s12 = peg$parse__();
// @ts-ignore
          s13 = peg$parsecreate_sequence_definition_list();
// @ts-ignore
          if (s13 === peg$FAILED) {
// @ts-ignore
            s13 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f8(s1, s3, s7, s9, s11, s13);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesequence_definition_increment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c3) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_BY();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseliteral_numeric();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f9(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesequence_definition_minval() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c4) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseliteral_numeric();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f10(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c5) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 2);
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c4) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 8);
// @ts-ignore
          peg$currPos += 8;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f11();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesequence_definition_maxval() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c6) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseliteral_numeric();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f12(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c5) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 2);
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c6) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 8);
// @ts-ignore
          peg$currPos += 8;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f13();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesequence_definition_start() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c7) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_WITH();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseliteral_numeric();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f14(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesequence_definition_cache() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c8) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseliteral_numeric();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f15(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesequence_definition_cycle() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c5) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c9) {
// @ts-ignore
      s3 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f16(s1);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesequence_definition_owned() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c10) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_BY();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c11) {
// @ts-ignore
          s5 = input.substr(peg$currPos, 4);
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f17();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c10) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 5);
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_BY();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parsecolumn_ref();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f18(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_sequence_definition() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsesequence_definition_increment();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsesequence_definition_minval();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsesequence_definition_maxval();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsesequence_definition_start();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsesequence_definition_cache();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsesequence_definition_cycle();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parsesequence_definition_owned();
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_sequence_definition_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecreate_sequence_definition();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsecreate_sequence_definition();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsecreate_sequence_definition();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f19(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_index_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CREATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_UNIQUE();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_INDEX();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseKW_CONCURRENTLY();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parseident();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse__();
// @ts-ignore
        s11 = peg$parseKW_ON();
// @ts-ignore
        if (s11 !== peg$FAILED) {
// @ts-ignore
          s12 = peg$parse__();
// @ts-ignore
          s13 = peg$parsetable_name();
// @ts-ignore
          if (s13 !== peg$FAILED) {
// @ts-ignore
            s14 = peg$parse__();
// @ts-ignore
            s15 = peg$parseindex_type();
// @ts-ignore
            if (s15 === peg$FAILED) {
// @ts-ignore
              s15 = null;
            }
// @ts-ignore
            s16 = peg$parse__();
// @ts-ignore
            s17 = peg$parseLPAREN();
// @ts-ignore
            if (s17 !== peg$FAILED) {
// @ts-ignore
              s18 = peg$parse__();
// @ts-ignore
              s19 = peg$parsecolumn_order_list();
// @ts-ignore
              if (s19 !== peg$FAILED) {
// @ts-ignore
                s20 = peg$parse__();
// @ts-ignore
                s21 = peg$parseRPAREN();
// @ts-ignore
                if (s21 !== peg$FAILED) {
// @ts-ignore
                  s22 = peg$parse__();
// @ts-ignore
                  s23 = peg$currPos;
// @ts-ignore
                  s24 = peg$parseKW_WITH();
// @ts-ignore
                  if (s24 !== peg$FAILED) {
// @ts-ignore
                    s25 = peg$parse__();
// @ts-ignore
                    s26 = peg$parseLPAREN();
// @ts-ignore
                    if (s26 !== peg$FAILED) {
// @ts-ignore
                      s27 = peg$parse__();
// @ts-ignore
                      s28 = peg$parseindex_options_list();
// @ts-ignore
                      if (s28 !== peg$FAILED) {
// @ts-ignore
                        s29 = peg$parse__();
// @ts-ignore
                        s30 = peg$parseRPAREN();
// @ts-ignore
                        if (s30 !== peg$FAILED) {
// @ts-ignore
                          s24 = [s24, s25, s26, s27, s28, s29, s30];
// @ts-ignore
                          s23 = s24;
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s23;
// @ts-ignore
                          s23 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s23;
// @ts-ignore
                        s23 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s23;
// @ts-ignore
                      s23 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s23;
// @ts-ignore
                    s23 = peg$FAILED;
                  }
// @ts-ignore
                  if (s23 === peg$FAILED) {
// @ts-ignore
                    s23 = null;
                  }
// @ts-ignore
                  s24 = peg$parse__();
// @ts-ignore
                  s25 = peg$currPos;
// @ts-ignore
                  s26 = peg$parseKW_TABLESPACE();
// @ts-ignore
                  if (s26 !== peg$FAILED) {
// @ts-ignore
                    s27 = peg$parse__();
// @ts-ignore
                    s28 = peg$parseident_name();
// @ts-ignore
                    if (s28 !== peg$FAILED) {
// @ts-ignore
                      s26 = [s26, s27, s28];
// @ts-ignore
                      s25 = s26;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s25;
// @ts-ignore
                      s25 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s25;
// @ts-ignore
                    s25 = peg$FAILED;
                  }
// @ts-ignore
                  if (s25 === peg$FAILED) {
// @ts-ignore
                    s25 = null;
                  }
// @ts-ignore
                  s26 = peg$parse__();
// @ts-ignore
                  s27 = peg$parsewhere_clause();
// @ts-ignore
                  if (s27 === peg$FAILED) {
// @ts-ignore
                    s27 = null;
                  }
// @ts-ignore
                  s28 = peg$parse__();
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f20(s1, s3, s5, s7, s9, s11, s13, s15, s19, s23, s25, s27);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_order_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecolumn_order();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsecolumn_order();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsecolumn_order();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f21(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_order() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecollate_expr();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseident();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parseKW_ASC();
// @ts-ignore
      if (s7 === peg$FAILED) {
// @ts-ignore
        s7 = peg$parseKW_DESC();
      }
// @ts-ignore
      if (s7 === peg$FAILED) {
// @ts-ignore
        s7 = null;
      }
// @ts-ignore
      s8 = peg$parse__();
// @ts-ignore
      s9 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c12) {
// @ts-ignore
        s10 = input.substr(peg$currPos, 5);
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s10 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
// @ts-ignore
      if (s10 !== peg$FAILED) {
// @ts-ignore
        s11 = peg$parse__();
// @ts-ignore
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c13) {
// @ts-ignore
          s12 = input.substr(peg$currPos, 5);
// @ts-ignore
          peg$currPos += 5;
// @ts-ignore
        } else {
// @ts-ignore
          s12 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
// @ts-ignore
        if (s12 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c14) {
// @ts-ignore
            s12 = input.substr(peg$currPos, 4);
// @ts-ignore
            peg$currPos += 4;
// @ts-ignore
          } else {
// @ts-ignore
            s12 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
        }
// @ts-ignore
        if (s12 !== peg$FAILED) {
// @ts-ignore
          s10 = [s10, s11, s12];
// @ts-ignore
          s9 = s10;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s9;
// @ts-ignore
          s9 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s9;
// @ts-ignore
        s9 = peg$FAILED;
      }
// @ts-ignore
      if (s9 === peg$FAILED) {
// @ts-ignore
        s9 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f22(s1, s3, s5, s7, s9);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_like_table_simple() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_LIKE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsetable_ref_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f23(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_like_table() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsecreate_like_table_paren();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecreate_like_table_simple();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_like_table_paren() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLPAREN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecreate_like_table();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f24(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_table_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLPAREN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecreate_definition();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseCOMMA();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parsecreate_definition();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8, s9];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseCOMMA();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parsecreate_definition();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s6 = [s6, s7, s8, s9];
// @ts-ignore
              s5 = s6;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s6 = peg$parseRPAREN();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f25(s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_definition() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsecreate_column_definition();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecreate_index_definition();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsecreate_fulltext_spatial_index_definition();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsecreate_constraint_definition();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_definition_opt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$parsecolumn_constraint();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c15) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 14);
// @ts-ignore
        peg$currPos += 14;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f26(s1);
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c16) {
// @ts-ignore
          s2 = input.substr(peg$currPos, 6);
// @ts-ignore
          peg$currPos += 6;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parse__();
// @ts-ignore
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c17) {
// @ts-ignore
            s4 = input.substr(peg$currPos, 3);
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s4 = null;
          }
// @ts-ignore
          s2 = [s2, s3, s4];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c18) {
// @ts-ignore
            s2 = input.substr(peg$currPos, 7);
// @ts-ignore
            peg$currPos += 7;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
// @ts-ignore
          if (s2 === peg$FAILED) {
// @ts-ignore
            s2 = null;
          }
// @ts-ignore
          s3 = peg$parse__();
// @ts-ignore
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c17) {
// @ts-ignore
            s4 = input.substr(peg$currPos, 3);
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3, s4];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f27(s1);
        }
// @ts-ignore
        s0 = s1;
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parsekeyword_comment();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f28(s1);
          }
// @ts-ignore
          s0 = s1;
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parsecollate_expr();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s1 = peg$f29(s1);
            }
// @ts-ignore
            s0 = s1;
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$parsecolumn_format();
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s1 = peg$f30(s1);
              }
// @ts-ignore
              s0 = s1;
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                s1 = peg$parsestorage();
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s1 = peg$f31(s1);
                }
// @ts-ignore
                s0 = s1;
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$currPos;
// @ts-ignore
                  s1 = peg$parsereference_definition();
// @ts-ignore
                  if (s1 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s1 = peg$f32(s1);
                  }
// @ts-ignore
                  s0 = s1;
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$currPos;
// @ts-ignore
                    s1 = peg$parsecreate_option_character_set_kw();
// @ts-ignore
                    if (s1 !== peg$FAILED) {
// @ts-ignore
                      s2 = peg$parse__();
// @ts-ignore
                      s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
                      if (s3 === peg$FAILED) {
// @ts-ignore
                        s3 = null;
                      }
// @ts-ignore
                      s4 = peg$parse__();
// @ts-ignore
                      s5 = peg$parseident_name();
// @ts-ignore
                      if (s5 !== peg$FAILED) {
// @ts-ignore
                        peg$savedPos = s0;
// @ts-ignore
                        s0 = peg$f33(s1, s3, s5);
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_definition_opt_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecolumn_definition_opt();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parse__();
// @ts-ignore
      s6 = peg$parsecolumn_definition_opt();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = [s5, s6];
// @ts-ignore
        s4 = s5;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s6 = peg$parsecolumn_definition_opt();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f34(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_column_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecolumn_ref();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsedata_type();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsecolumn_definition_opt_list();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f35(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_constraint() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseliteral_not_null();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseliteral_null();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsedefault_expr();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f36(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsedefault_expr();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseliteral_not_null();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$parseliteral_null();
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f37(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecollate_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_COLLATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseident();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f38(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_format() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c19) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 13);
// @ts-ignore
      peg$currPos += 13;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c20) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 5);
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c21) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 7);
// @ts-ignore
          peg$currPos += 7;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c22) {
// @ts-ignore
            s3 = input.substr(peg$currPos, 7);
// @ts-ignore
            peg$currPos += 7;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f39(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestorage() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c23) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c24) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 4);
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c25) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 6);
// @ts-ignore
          peg$currPos += 6;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f40(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedefault_expr() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DEFAULT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseliteral();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseexpr();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f41(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedrop_index_opt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseALTER_ALGORITHM();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseALTER_LOCK();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseALTER_ALGORITHM();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = peg$parseALTER_LOCK();
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseALTER_ALGORITHM();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = peg$parseALTER_LOCK();
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f42(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedrop_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DROP();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TABLE();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsetable_ref_list();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f43(s1, s3, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_DROP();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_INDEX();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parsecolumn_ref();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseKW_ON();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse__();
// @ts-ignore
              s9 = peg$parsetable_name();
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                s10 = peg$parse__();
// @ts-ignore
                s11 = peg$parsedrop_index_opt();
// @ts-ignore
                if (s11 === peg$FAILED) {
// @ts-ignore
                  s11 = null;
                }
// @ts-ignore
                s12 = peg$parse__();
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f44(s1, s3, s5, s9, s11);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetruncate_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_TRUNCATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TABLE();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsetable_ref_list();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f45(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseuse_stmt() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_USE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f46(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsealter_table_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ALTER();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TABLE();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsetable_ref_list();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsealter_action_list();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f47(s5, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsealter_action_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsealter_action();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsealter_action();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsealter_action();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f48(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsealter_action() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseALTER_ADD_COLUMN();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseALTER_DROP_COLUMN();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseALTER_ADD_INDEX_OR_KEY();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseALTER_RENAME_TABLE();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseALTER_ALGORITHM();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseALTER_LOCK();
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALTER_ADD_COLUMN() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ADD();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_COLUMN();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsecreate_column_definition();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f49(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALTER_DROP_COLUMN() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DROP();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_COLUMN();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsecolumn_ref();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f50(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALTER_ADD_INDEX_OR_KEY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ADD();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecreate_index_definition();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f51(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALTER_RENAME_TABLE() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_RENAME();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TO();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_AS();
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseident();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f52(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALTER_ALGORITHM() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c26) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c22) {
// @ts-ignore
        s5 = input.substr(peg$currPos, 7);
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c27) {
// @ts-ignore
          s5 = input.substr(peg$currPos, 7);
// @ts-ignore
          peg$currPos += 7;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c28) {
// @ts-ignore
            s5 = input.substr(peg$currPos, 7);
// @ts-ignore
            peg$currPos += 7;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e28); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c29) {
// @ts-ignore
              s5 = input.substr(peg$currPos, 4);
// @ts-ignore
              peg$currPos += 4;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
          }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f53(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALTER_LOCK() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c30) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c22) {
// @ts-ignore
        s5 = input.substr(peg$currPos, 7);
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c11) {
// @ts-ignore
          s5 = input.substr(peg$currPos, 4);
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c31) {
// @ts-ignore
            s5 = input.substr(peg$currPos, 6);
// @ts-ignore
            peg$currPos += 6;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c32) {
// @ts-ignore
              s5 = input.substr(peg$currPos, 9);
// @ts-ignore
              peg$currPos += 9;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
          }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f54(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_index_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_INDEX();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_KEY();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecolumn();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseindex_type();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parsecte_column_definition();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parseindex_options();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse__();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f55(s1, s3, s5, s7, s9);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_fulltext_spatial_index_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_FULLTEXT();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_SPATIAL();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_INDEX();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_KEY();
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsecolumn();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parsecte_column_definition();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parseindex_options();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse__();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f56(s1, s3, s5, s7, s9);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_constraint_definition() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsecreate_constraint_primary();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecreate_constraint_unique();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsecreate_constraint_foreign();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseconstraint_name() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CONSTRAINT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f57(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_constraint_primary() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseconstraint_name();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c33) {
// @ts-ignore
      s3 = input.substr(peg$currPos, 11);
// @ts-ignore
      peg$currPos += 11;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseindex_type();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parsecte_column_definition();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parseindex_options();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f58(s1, s3, s5, s7, s9);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_constraint_unique() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseconstraint_name();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    s3 = peg$parseKW_UNIQUE();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_INDEX();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = peg$parseKW_KEY();
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parsecolumn();
// @ts-ignore
      if (s7 === peg$FAILED) {
// @ts-ignore
        s7 = null;
      }
// @ts-ignore
      s8 = peg$parse__();
// @ts-ignore
      s9 = peg$parseindex_type();
// @ts-ignore
      if (s9 === peg$FAILED) {
// @ts-ignore
        s9 = null;
      }
// @ts-ignore
      s10 = peg$parse__();
// @ts-ignore
      s11 = peg$parsecte_column_definition();
// @ts-ignore
      if (s11 !== peg$FAILED) {
// @ts-ignore
        s12 = peg$parse__();
// @ts-ignore
        s13 = peg$parseindex_options();
// @ts-ignore
        if (s13 === peg$FAILED) {
// @ts-ignore
          s13 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f59(s1, s3, s5, s7, s9, s11, s13);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_constraint_foreign() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseconstraint_name();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c34) {
// @ts-ignore
      s3 = input.substr(peg$currPos, 11);
// @ts-ignore
      peg$currPos += 11;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsecolumn();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parsecte_column_definition();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parsereference_definition();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f60(s1, s3, s5, s7, s9);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereference_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_REFERENCES();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsetable_ref_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsecte_column_definition();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c35) {
// @ts-ignore
            s7 = input.substr(peg$currPos, 10);
// @ts-ignore
            peg$currPos += 10;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c36) {
// @ts-ignore
              s7 = input.substr(peg$currPos, 13);
// @ts-ignore
              peg$currPos += 13;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 12).toLowerCase() === peg$c37) {
// @ts-ignore
                s7 = input.substr(peg$currPos, 12);
// @ts-ignore
                peg$currPos += 12;
// @ts-ignore
              } else {
// @ts-ignore
                s7 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e37); }
              }
            }
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseon_reference();
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s9 = null;
          }
// @ts-ignore
          s10 = peg$parse__();
// @ts-ignore
          s11 = peg$parseon_reference();
// @ts-ignore
          if (s11 === peg$FAILED) {
// @ts-ignore
            s11 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f61(s1, s3, s5, s7, s9, s11);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseon_reference() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c38) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c39) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 9);
// @ts-ignore
        peg$currPos += 9;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsereference_option();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f62(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereference_option() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c40) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c41) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 7);
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c42) {
// @ts-ignore
          s1 = input.substr(peg$currPos, 8);
// @ts-ignore
          peg$currPos += 8;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c43) {
// @ts-ignore
            s1 = input.substr(peg$currPos, 9);
// @ts-ignore
            peg$currPos += 9;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e43); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c44) {
// @ts-ignore
              s1 = input.substr(peg$currPos, 11);
// @ts-ignore
              peg$currPos += 11;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e44); }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f63(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_constraint_trigger() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CREATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_CONSTRAINT();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c45) {
// @ts-ignore
        s5 = input.substr(peg$currPos, 7);
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseident_name();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c46) {
// @ts-ignore
            s9 = input.substr(peg$currPos, 6);
// @ts-ignore
            peg$currPos += 6;
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e46); }
          }
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c47) {
// @ts-ignore
              s9 = input.substr(peg$currPos, 5);
// @ts-ignore
              peg$currPos += 5;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e47); }
            }
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 10).toLowerCase() === peg$c48) {
// @ts-ignore
                s9 = input.substr(peg$currPos, 10);
// @ts-ignore
                peg$currPos += 10;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e48); }
              }
            }
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parsetrigger_event_list();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse__();
// @ts-ignore
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c49) {
// @ts-ignore
                s13 = input.substr(peg$currPos, 2);
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s13 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e49); }
              }
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parse__();
// @ts-ignore
                s15 = peg$parsetable_name();
// @ts-ignore
                if (s15 !== peg$FAILED) {
// @ts-ignore
                  s16 = peg$parse__();
// @ts-ignore
                  s17 = peg$currPos;
// @ts-ignore
                  s18 = peg$parseKW_FROM();
// @ts-ignore
                  if (s18 !== peg$FAILED) {
// @ts-ignore
                    s19 = peg$parse__();
// @ts-ignore
                    s20 = peg$parsetable_name();
// @ts-ignore
                    if (s20 !== peg$FAILED) {
// @ts-ignore
                      s18 = [s18, s19, s20];
// @ts-ignore
                      s17 = s18;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s17;
// @ts-ignore
                      s17 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s17;
// @ts-ignore
                    s17 = peg$FAILED;
                  }
// @ts-ignore
                  if (s17 === peg$FAILED) {
// @ts-ignore
                    s17 = null;
                  }
// @ts-ignore
                  s18 = peg$parse__();
// @ts-ignore
                  s19 = peg$parsetrigger_deferrable();
// @ts-ignore
                  if (s19 === peg$FAILED) {
// @ts-ignore
                    s19 = null;
                  }
// @ts-ignore
                  s20 = peg$parse__();
// @ts-ignore
                  s21 = peg$parsetrigger_for_row();
// @ts-ignore
                  if (s21 === peg$FAILED) {
// @ts-ignore
                    s21 = null;
                  }
// @ts-ignore
                  s22 = peg$parse__();
// @ts-ignore
                  s23 = peg$parsetrigger_when();
// @ts-ignore
                  if (s23 === peg$FAILED) {
// @ts-ignore
                    s23 = null;
                  }
// @ts-ignore
                  s24 = peg$parse__();
// @ts-ignore
                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c50) {
// @ts-ignore
                    s25 = input.substr(peg$currPos, 7);
// @ts-ignore
                    peg$currPos += 7;
// @ts-ignore
                  } else {
// @ts-ignore
                    s25 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e50); }
                  }
// @ts-ignore
                  if (s25 !== peg$FAILED) {
// @ts-ignore
                    s26 = peg$parse__();
// @ts-ignore
                    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c51) {
// @ts-ignore
                      s27 = input.substr(peg$currPos, 9);
// @ts-ignore
                      peg$currPos += 9;
// @ts-ignore
                    } else {
// @ts-ignore
                      s27 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e51); }
                    }
// @ts-ignore
                    if (s27 !== peg$FAILED) {
// @ts-ignore
                      s28 = peg$parse__();
// @ts-ignore
                      s29 = peg$parseproc_func_call();
// @ts-ignore
                      if (s29 !== peg$FAILED) {
// @ts-ignore
                        peg$savedPos = s0;
// @ts-ignore
                        s0 = peg$f64(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s29);
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetrigger_event() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_INSERT();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_DELETE();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_TRUNCATE();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f65(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_UPDATE();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c52) {
// @ts-ignore
          s4 = input.substr(peg$currPos, 2);
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$parsecolumn_ref_list();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f66(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetrigger_event_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsetrigger_event();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_OR();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsetrigger_event();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_OR();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsetrigger_event();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f67(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetrigger_deferrable() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c53) {
// @ts-ignore
      s2 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    s3 = peg$parse__();
// @ts-ignore
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c54) {
// @ts-ignore
      s4 = input.substr(peg$currPos, 10);
// @ts-ignore
      peg$currPos += 10;
// @ts-ignore
    } else {
// @ts-ignore
      s4 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      s2 = [s2, s3, s4];
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 19).toLowerCase() === peg$c55) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 19);
// @ts-ignore
        peg$currPos += 19;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 18).toLowerCase() === peg$c56) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 18);
// @ts-ignore
          peg$currPos += 18;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f68(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetrigger_for_row() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c57) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c58) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 4);
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {
// @ts-ignore
        s5 = input.substr(peg$currPos, 3);
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c60) {
// @ts-ignore
          s5 = input.substr(peg$currPos, 9);
// @ts-ignore
          peg$currPos += 9;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f69(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetrigger_when() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_WHEN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseexpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f70(s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_options() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsetable_option();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parsetable_option();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5, s6, s7];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsetable_option();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f71(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_option_character_set_kw() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c61) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 3);
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f72();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecreate_option_character_set() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DEFAULT();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    s3 = peg$parsecreate_option_character_set_kw();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c63) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 7);
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c64) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 7);
// @ts-ignore
          peg$currPos += 7;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
      }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse__();
// @ts-ignore
      s7 = peg$parseident_name();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f73(s1, s3, s5, s7);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_option() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c15) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 14);
// @ts-ignore
      peg$currPos += 14;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c65) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 14);
// @ts-ignore
        peg$currPos += 14;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c66) {
// @ts-ignore
          s1 = input.substr(peg$currPos, 14);
// @ts-ignore
          peg$currPos += 14;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c67) {
// @ts-ignore
            s1 = input.substr(peg$currPos, 8);
// @ts-ignore
            peg$currPos += 8;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c68) {
// @ts-ignore
              s1 = input.substr(peg$currPos, 8);
// @ts-ignore
              peg$currPos += 8;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c69) {
// @ts-ignore
                s1 = input.substr(peg$currPos, 18);
// @ts-ignore
                peg$currPos += 18;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e69); }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseliteral_numeric();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f74(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecreate_option_character_set();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseKW_COMMENT();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c70) {
// @ts-ignore
            s1 = input.substr(peg$currPos, 10);
// @ts-ignore
            peg$currPos += 10;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e70); }
          }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = null;
          }
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseliteral_string();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f75(s1, s3, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c71) {
// @ts-ignore
            s1 = input.substr(peg$currPos, 11);
// @ts-ignore
            peg$currPos += 11;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              s3 = null;
            }
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
              s6 = peg$c72;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e72); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c73) {
// @ts-ignore
                s7 = input.substr(peg$currPos, 4);
// @ts-ignore
                peg$currPos += 4;
// @ts-ignore
              } else {
// @ts-ignore
                s7 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e73); }
              }
// @ts-ignore
              if (s7 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c74) {
// @ts-ignore
                  s7 = input.substr(peg$currPos, 3);
// @ts-ignore
                  peg$currPos += 3;
// @ts-ignore
                } else {
// @ts-ignore
                  s7 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e74); }
                }
// @ts-ignore
                if (s7 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c11) {
// @ts-ignore
                    s7 = input.substr(peg$currPos, 4);
// @ts-ignore
                    peg$currPos += 4;
// @ts-ignore
                  } else {
// @ts-ignore
                    s7 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e11); }
                  }
                }
              }
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
                  s8 = peg$c72;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s8 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e72); }
                }
// @ts-ignore
                if (s8 !== peg$FAILED) {
// @ts-ignore
                  s6 = [s6, s7, s8];
// @ts-ignore
                  s5 = s6;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s5;
// @ts-ignore
                  s5 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s5;
// @ts-ignore
                s5 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f76(s1, s3, s5);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c75) {
// @ts-ignore
              s1 = input.substr(peg$currPos, 6);
// @ts-ignore
              peg$currPos += 6;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e75); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$parse__();
// @ts-ignore
              s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
              if (s3 === peg$FAILED) {
// @ts-ignore
                s3 = null;
              }
// @ts-ignore
              s4 = peg$parse__();
// @ts-ignore
              s5 = peg$parseident_name();
// @ts-ignore
              if (s5 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f77(s1, s3, s5);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ADD();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecreate_fulltext_spatial_index_definition();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f78(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parserename_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_RENAME();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TABLE();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsetable_to_list();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f79(s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseset_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_SET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_GLOBAL();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_SESSION();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$parseKW_LOCAL();
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = peg$parseKW_PERSIST();
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              s3 = peg$parseKW_PERSIST_ONLY();
            }
          }
        }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseassign_stmt();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f80(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselock_mode() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c76) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c77) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 12);
// @ts-ignore
        peg$currPos += 12;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c78) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 9);
// @ts-ignore
          peg$currPos += 9;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 13).toLowerCase() === peg$c79) {
// @ts-ignore
            s3 = input.substr(peg$currPos, 13);
// @ts-ignore
            peg$currPos += 13;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 22).toLowerCase() === peg$c80) {
// @ts-ignore
              s3 = input.substr(peg$currPos, 22);
// @ts-ignore
              peg$currPos += 22;
// @ts-ignore
            } else {
// @ts-ignore
              s3 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e80); }
            }
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 19).toLowerCase() === peg$c81) {
// @ts-ignore
                s3 = input.substr(peg$currPos, 19);
// @ts-ignore
                peg$currPos += 19;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e81); }
              }
// @ts-ignore
              if (s3 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c32) {
// @ts-ignore
                  s3 = input.substr(peg$currPos, 9);
// @ts-ignore
                  peg$currPos += 9;
// @ts-ignore
                } else {
// @ts-ignore
                  s3 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e32); }
                }
// @ts-ignore
                if (s3 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 16).toLowerCase() === peg$c82) {
// @ts-ignore
                    s3 = input.substr(peg$currPos, 16);
// @ts-ignore
                    peg$currPos += 16;
// @ts-ignore
                  } else {
// @ts-ignore
                    s3 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e82); }
                  }
// @ts-ignore
                  if (s3 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c83) {
// @ts-ignore
                      s3 = input.substr(peg$currPos, 5);
// @ts-ignore
                      peg$currPos += 5;
// @ts-ignore
                    } else {
// @ts-ignore
                      s3 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e83); }
                    }
                  }
                }
              }
            }
          }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c84) {
// @ts-ignore
          s5 = input.substr(peg$currPos, 4);
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f81(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselock_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_LOCK();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TABLE();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsetable_ref_list();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parselock_mode();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c85) {
// @ts-ignore
          s9 = input.substr(peg$currPos, 6);
// @ts-ignore
          peg$currPos += 6;
// @ts-ignore
        } else {
// @ts-ignore
          s9 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e85); }
        }
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f82(s3, s5, s7, s9);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecall_stmt() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CALL();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseproc_func_call();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f83(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseshow_stmt() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_SHOW();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c86) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 6);
// @ts-ignore
        peg$currPos += 6;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f84();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseselect_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$parseselect_stmt_nake();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s2 = peg$c87;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e87); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parseselect_stmt();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s6 = peg$c88;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e88); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3, s4, s5, s6];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f85(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewith_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_WITH();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecte_definition();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseCOMMA();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parsecte_definition();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8, s9];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseCOMMA();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parsecte_definition();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s6 = [s6, s7, s8, s9];
// @ts-ignore
              s5 = s6;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f86(s3, s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse__();
// @ts-ignore
      s2 = peg$parseKW_WITH();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parseKW_RECURSIVE();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$parsecte_definition();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f87(s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecte_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseliteral_string();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseident_name();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecte_column_definition();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_AS();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseLPAREN();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseunion_stmt();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parseRPAREN();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f88(s1, s3, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecte_column_definition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLPAREN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecolumn();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseCOMMA();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parsecolumn();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8, s9];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseCOMMA();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parsecolumn();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s6 = [s6, s7, s8, s9];
// @ts-ignore
              s5 = s6;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s6 = peg$parseRPAREN();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f89(s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedistinct_on() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DISTINCT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ON();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseLPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsecolumn_ref_list();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseRPAREN();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f90(s1, s3, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_DISTINCT();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f91(s1);
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseselect_stmt_nake() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse__();
// @ts-ignore
    s2 = peg$parsewith_clause();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    s3 = peg$parse__();
// @ts-ignore
    s4 = peg$parseKW_SELECT();
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      s5 = peg$parse___();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseoption_clause();
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s7 = peg$parse__();
// @ts-ignore
        s8 = peg$parsedistinct_on();
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s8 = null;
        }
// @ts-ignore
        s9 = peg$parse__();
// @ts-ignore
        s10 = peg$parsecolumn_clause();
// @ts-ignore
        if (s10 !== peg$FAILED) {
// @ts-ignore
          s11 = peg$parse__();
// @ts-ignore
          s12 = peg$parsefrom_clause();
// @ts-ignore
          if (s12 === peg$FAILED) {
// @ts-ignore
            s12 = null;
          }
// @ts-ignore
          s13 = peg$parse__();
// @ts-ignore
          s14 = peg$parsewhere_clause();
// @ts-ignore
          if (s14 === peg$FAILED) {
// @ts-ignore
            s14 = null;
          }
// @ts-ignore
          s15 = peg$parse__();
// @ts-ignore
          s16 = peg$parsegroup_by_clause();
// @ts-ignore
          if (s16 === peg$FAILED) {
// @ts-ignore
            s16 = null;
          }
// @ts-ignore
          s17 = peg$parse__();
// @ts-ignore
          s18 = peg$parsehaving_clause();
// @ts-ignore
          if (s18 === peg$FAILED) {
// @ts-ignore
            s18 = null;
          }
// @ts-ignore
          s19 = peg$parse__();
// @ts-ignore
          s20 = peg$parseorder_by_clause();
// @ts-ignore
          if (s20 === peg$FAILED) {
// @ts-ignore
            s20 = null;
          }
// @ts-ignore
          s21 = peg$parse__();
// @ts-ignore
          s22 = peg$parselimit_clause();
// @ts-ignore
          if (s22 === peg$FAILED) {
// @ts-ignore
            s22 = null;
          }
// @ts-ignore
          s23 = peg$parse__();
// @ts-ignore
          s24 = peg$parsewindow_clause();
// @ts-ignore
          if (s24 === peg$FAILED) {
// @ts-ignore
            s24 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f92(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseoption_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsequery_option();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsequery_option();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsequery_option();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f93(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsequery_option() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseOPT_SQL_CACHE();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseOPT_SQL_NO_CACHE();
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseOPT_SQL_BIG_RESULT();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseOPT_SQL_SMALL_RESULT();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseOPT_SQL_BUFFER_RESULT();
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f94(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ALL();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      s2 = peg$parseSTAR();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s4 = peg$parseident_start();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s3 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s2 = [s2, s3];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseSTAR();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsecolumn_list_item();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsecolumn_list_item();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f95(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsecolumn_list_item();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = [];
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsecolumn_list_item();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseCOMMA();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parsecolumn_list_item();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f96(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsearray_index() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRAKE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsenumber();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRBRAKE();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f97(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpr_item() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsearray_index();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f98(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_list_item() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsestring_constants_escape();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f99(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseexpr_item();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_DOUBLE_COLON();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsedata_type();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = [];
// @ts-ignore
            s6 = peg$currPos;
// @ts-ignore
            s7 = peg$parse__();
// @ts-ignore
            s8 = peg$parseadditive_operator();
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = peg$parsemultiplicative_operator();
            }
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              s9 = peg$parse__();
// @ts-ignore
              s10 = peg$parseexpr_item();
// @ts-ignore
              if (s10 !== peg$FAILED) {
// @ts-ignore
                s7 = [s7, s8, s9, s10];
// @ts-ignore
                s6 = s7;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s6;
// @ts-ignore
                s6 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s6;
// @ts-ignore
              s6 = peg$FAILED;
            }
// @ts-ignore
            while (s6 !== peg$FAILED) {
// @ts-ignore
              s5.push(s6);
// @ts-ignore
              s6 = peg$currPos;
// @ts-ignore
              s7 = peg$parse__();
// @ts-ignore
              s8 = peg$parseadditive_operator();
// @ts-ignore
              if (s8 === peg$FAILED) {
// @ts-ignore
                s8 = peg$parsemultiplicative_operator();
              }
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                s9 = peg$parse__();
// @ts-ignore
                s10 = peg$parseexpr_item();
// @ts-ignore
                if (s10 !== peg$FAILED) {
// @ts-ignore
                  s7 = [s7, s8, s9, s10];
// @ts-ignore
                  s6 = s7;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s6;
// @ts-ignore
                  s6 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s6;
// @ts-ignore
                s6 = peg$FAILED;
              }
            }
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parsealias_clause();
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f100(s1, s3, s4, s5, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseident();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseDOT();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$parseSTAR();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f101(s1);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseexpr_item();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            s3 = peg$parsealias_clause();
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              s3 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f102(s1, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsealias_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_AS();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsealias_ident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f103(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_AS();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseident();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f104(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefrom_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_FROM();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsetable_ref_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f105(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_to_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsetable_to_item();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsetable_to_item();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsetable_to_item();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f106(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_to_item() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsetable_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_TO();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsetable_name();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f107(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseindex_type() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_USING();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c89) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 5);
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c90) {
// @ts-ignore
          s3 = input.substr(peg$currPos, 4);
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c91) {
// @ts-ignore
            s3 = input.substr(peg$currPos, 4);
// @ts-ignore
            peg$currPos += 4;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c92) {
// @ts-ignore
              s3 = input.substr(peg$currPos, 3);
// @ts-ignore
              peg$currPos += 3;
// @ts-ignore
            } else {
// @ts-ignore
              s3 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e92); }
            }
          }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f108(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseindex_options_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseindex_option();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseindex_option();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseindex_option();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f109(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseindex_options() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseindex_option();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseindex_option();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseindex_option();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f110(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseindex_option() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_KEY_BLOCK_SIZE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseliteral_numeric();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f111(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseident_name();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseliteral_numeric();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = peg$parseident();
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f112(s1, s3, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseindex_type();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c93) {
// @ts-ignore
            s1 = input.substr(peg$currPos, 4);
// @ts-ignore
            peg$currPos += 4;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e93); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c94) {
// @ts-ignore
              s3 = input.substr(peg$currPos, 6);
// @ts-ignore
              peg$currPos += 6;
// @ts-ignore
            } else {
// @ts-ignore
              s3 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e94); }
            }
// @ts-ignore
            if (s3 !== peg$FAILED) {
// @ts-ignore
              s4 = peg$parse__();
// @ts-ignore
              s5 = peg$parseident_name();
// @ts-ignore
              if (s5 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f113(s5);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c95) {
// @ts-ignore
              s1 = input.substr(peg$currPos, 7);
// @ts-ignore
              peg$currPos += 7;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e95); }
            }
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c96) {
// @ts-ignore
                s1 = input.substr(peg$currPos, 9);
// @ts-ignore
                peg$currPos += 9;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e96); }
              }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s1 = peg$f114(s1);
            }
// @ts-ignore
            s0 = s1;
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsekeyword_comment();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_ref_list() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsetable_base();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parsetable_ref();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parsetable_ref();
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f115(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_ref() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse__();
// @ts-ignore
    s2 = peg$parseCOMMA();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parsetable_base();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f116(s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse__();
// @ts-ignore
      s2 = peg$parsetable_join();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f117(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_join() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsejoin_op();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsetable_base();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_USING();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseLPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseident_name();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = [];
// @ts-ignore
              s11 = peg$currPos;
// @ts-ignore
              s12 = peg$parse__();
// @ts-ignore
              s13 = peg$parseCOMMA();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parse__();
// @ts-ignore
                s15 = peg$parseident_name();
// @ts-ignore
                if (s15 !== peg$FAILED) {
// @ts-ignore
                  s12 = [s12, s13, s14, s15];
// @ts-ignore
                  s11 = s12;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s11;
// @ts-ignore
                  s11 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s11;
// @ts-ignore
                s11 = peg$FAILED;
              }
// @ts-ignore
              while (s11 !== peg$FAILED) {
// @ts-ignore
                s10.push(s11);
// @ts-ignore
                s11 = peg$currPos;
// @ts-ignore
                s12 = peg$parse__();
// @ts-ignore
                s13 = peg$parseCOMMA();
// @ts-ignore
                if (s13 !== peg$FAILED) {
// @ts-ignore
                  s14 = peg$parse__();
// @ts-ignore
                  s15 = peg$parseident_name();
// @ts-ignore
                  if (s15 !== peg$FAILED) {
// @ts-ignore
                    s12 = [s12, s13, s14, s15];
// @ts-ignore
                    s11 = s12;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s11;
// @ts-ignore
                    s11 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s11;
// @ts-ignore
                  s11 = peg$FAILED;
                }
              }
// @ts-ignore
              s11 = peg$parse__();
// @ts-ignore
              s12 = peg$parseRPAREN();
// @ts-ignore
              if (s12 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f118(s1, s3, s9, s10);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsejoin_op();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsetable_base();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseon_clause();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f119(s1, s3, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parsejoin_op();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseLPAREN();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$parseunion_stmt();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              s7 = peg$parseRPAREN();
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                s8 = peg$parse__();
// @ts-ignore
                s9 = peg$parsealias_clause();
// @ts-ignore
                if (s9 === peg$FAILED) {
// @ts-ignore
                  s9 = null;
                }
// @ts-ignore
                s10 = peg$parse__();
// @ts-ignore
                s11 = peg$parseon_clause();
// @ts-ignore
                if (s11 === peg$FAILED) {
// @ts-ignore
                  s11 = null;
                }
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f120(s1, s5, s9, s11);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_base() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DUAL();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f121();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsevalue_clause();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsealias_clause();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f122(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseLPAREN();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseunion_stmt();
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = peg$parsevalue_clause();
          }
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$parseRPAREN();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              s7 = peg$parsealias_clause();
// @ts-ignore
              if (s7 === peg$FAILED) {
// @ts-ignore
                s7 = null;
              }
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f123(s3, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parsefunc_call();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            s3 = peg$parsealias_clause();
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              s3 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f124(s1, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parsetable_name();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$parse__();
// @ts-ignore
              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c97) {
// @ts-ignore
                s3 = input.substr(peg$currPos, 11);
// @ts-ignore
                peg$currPos += 11;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e97); }
              }
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                s4 = peg$parse__();
// @ts-ignore
                s5 = peg$parsefunc_call();
// @ts-ignore
                if (s5 !== peg$FAILED) {
// @ts-ignore
                  s6 = peg$parse__();
// @ts-ignore
                  s7 = peg$currPos;
// @ts-ignore
                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c98) {
// @ts-ignore
                    s8 = input.substr(peg$currPos, 10);
// @ts-ignore
                    peg$currPos += 10;
// @ts-ignore
                  } else {
// @ts-ignore
                    s8 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e98); }
                  }
// @ts-ignore
                  if (s8 !== peg$FAILED) {
// @ts-ignore
                    s9 = peg$parse__();
// @ts-ignore
                    s10 = peg$parseLPAREN();
// @ts-ignore
                    if (s10 !== peg$FAILED) {
// @ts-ignore
                      s11 = peg$parse__();
// @ts-ignore
                      s12 = peg$parseliteral_numeric();
// @ts-ignore
                      if (s12 !== peg$FAILED) {
// @ts-ignore
                        s13 = peg$parse__();
// @ts-ignore
                        s14 = peg$parseRPAREN();
// @ts-ignore
                        if (s14 !== peg$FAILED) {
// @ts-ignore
                          s8 = [s8, s9, s10, s11, s12, s13, s14];
// @ts-ignore
                          s7 = s8;
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s7;
// @ts-ignore
                          s7 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s7;
// @ts-ignore
                        s7 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s7;
// @ts-ignore
                      s7 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s7;
// @ts-ignore
                    s7 = peg$FAILED;
                  }
// @ts-ignore
                  if (s7 === peg$FAILED) {
// @ts-ignore
                    s7 = null;
                  }
// @ts-ignore
                  s8 = peg$parse__();
// @ts-ignore
                  s9 = peg$parsealias_clause();
// @ts-ignore
                  if (s9 === peg$FAILED) {
// @ts-ignore
                    s9 = null;
                  }
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f125(s1, s5, s7, s9);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$parsetable_name();
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s2 = peg$parse__();
// @ts-ignore
                s3 = peg$parsealias_clause();
// @ts-ignore
                if (s3 === peg$FAILED) {
// @ts-ignore
                  s3 = null;
                }
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f126(s1, s3);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsejoin_op() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_LEFT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_OUTER();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_JOIN();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f127();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_RIGHT();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_OUTER();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_JOIN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f128();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseKW_FULL();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseKW_OUTER();
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = null;
          }
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseKW_JOIN();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f129();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$currPos;
// @ts-ignore
          s2 = peg$parseKW_INNER();
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s3 = peg$parse__();
// @ts-ignore
            s2 = [s2, s3];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = null;
          }
// @ts-ignore
          s2 = peg$parseKW_JOIN();
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f130();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetable_name() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseDOT();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s6 = peg$parseident();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseDOT();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseident();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f131(s1, s2, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseident();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseDOT();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseSTAR();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f132(s1);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseident();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$currPos;
// @ts-ignore
          s3 = peg$parse__();
// @ts-ignore
          s4 = peg$parseDOT();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parse__();
// @ts-ignore
            s6 = peg$parseident();
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s3 = [s3, s4, s5, s6];
// @ts-ignore
              s2 = s3;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s2;
// @ts-ignore
              s2 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
          if (s2 === peg$FAILED) {
// @ts-ignore
            s2 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f133(s1, s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parsevar_decl();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f134(s1);
          }
// @ts-ignore
          s0 = s1;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseon_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ON();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseexpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f135(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewhere_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_WHERE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseor_and_where_expr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f136(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsegroup_by_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_GROUP();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_BY();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseexpr_list();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f137(s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_ref_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecolumn_ref();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsecolumn_ref();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsecolumn_ref();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f138(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsehaving_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_HAVING();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseexpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f139(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_WINDOW();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsenamed_window_expr_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f140(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenamed_window_expr_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenamed_window_expr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsenamed_window_expr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsenamed_window_expr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f141(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenamed_window_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_AS();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseas_window_specification();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f142(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseas_window_specification() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$parseident_name();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseLPAREN();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsewindow_specification();
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f143(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_specification() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsepartition_by_clause();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    s3 = peg$parseorder_by_clause();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse__();
// @ts-ignore
    s5 = peg$parsewindow_frame_clause();
// @ts-ignore
    if (s5 === peg$FAILED) {
// @ts-ignore
      s5 = null;
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f144(s1, s3, s5);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_specification_frameless() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsepartition_by_clause();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    s3 = peg$parseorder_by_clause();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f145(s1, s3);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_frame_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ROWS();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsewindow_frame_following();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parsewindow_frame_preceding();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f146(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_ROWS();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_BETWEEN();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parsewindow_frame_preceding();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseKW_AND();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse__();
// @ts-ignore
              s9 = peg$parsewindow_frame_following();
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f147(s5, s9);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_frame_following() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsewindow_frame_value();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c99) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 9);
// @ts-ignore
        peg$currPos += 9;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e99); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f148(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsewindow_frame_current_row();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_frame_preceding() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsewindow_frame_value();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c100) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 9);
// @ts-ignore
        peg$currPos += 9;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f149(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsewindow_frame_current_row();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_frame_current_row() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c101) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 3);
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f150();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_frame_value() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c102) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f151(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseliteral_numeric();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsepartition_by_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_PARTITION();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_BY();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsecolumn_clause();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f152(s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseorder_by_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ORDER();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_BY();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseorder_by_list();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f153(s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseorder_by_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseorder_by_element();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseorder_by_element();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseorder_by_element();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f154(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseorder_by_element() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_DESC();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_ASC();
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f155(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumber_or_param() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseliteral_numeric();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseparam();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselimit_clause() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_LIMIT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsenumber_or_param();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_ALL();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parseKW_OFFSET();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse__();
// @ts-ignore
          s8 = peg$parsenumber_or_param();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f156(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseupdate_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_UPDATE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsetable_ref_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_SET();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseset_list();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parsewhere_clause();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parsereturning_stmt();
// @ts-ignore
            if (s11 === peg$FAILED) {
// @ts-ignore
              s11 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f157(s3, s7, s9, s11);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedelete_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DELETE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsetable_ref_list();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsefrom_clause();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsewhere_clause();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f158(s3, s5, s7);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseset_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseset_item();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseset_item();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseset_item();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f159(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseset_item() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseident();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseDOT();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    s3 = peg$parsecolumn();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s5 = peg$c103;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e103); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseadditive_expr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f160(s1, s3, s7);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      s2 = peg$parseident();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parseDOT();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s2 = [s2, s3, s4];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecolumn();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s5 = peg$c103;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseKW_VALUES();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseLPAREN();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse__();
// @ts-ignore
              s11 = peg$parsecolumn_ref();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s12 = peg$parse__();
// @ts-ignore
                s13 = peg$parseRPAREN();
// @ts-ignore
                if (s13 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f161(s1, s3, s11);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereturning_stmt() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_RETURNING();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseSTAR();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parsecolumn_ref_list();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f162(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinsert_value_clause() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsevalue_clause();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseselect_stmt_nake();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinsert_partition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_PARTITION();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseident_name();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = [];
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseCOMMA();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parseident_name();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s8 = [s8, s9, s10, s11];
// @ts-ignore
              s7 = s8;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          while (s7 !== peg$FAILED) {
// @ts-ignore
            s6.push(s7);
// @ts-ignore
            s7 = peg$currPos;
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseCOMMA();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse__();
// @ts-ignore
              s11 = peg$parseident_name();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s8 = [s8, s9, s10, s11];
// @ts-ignore
                s7 = s8;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s7;
// @ts-ignore
                s7 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
          }
// @ts-ignore
          s7 = peg$parse__();
// @ts-ignore
          s8 = peg$parseRPAREN();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f163(s5, s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_PARTITION();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsevalue_item();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f164(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereplace_insert_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsereplace_insert();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_INTO();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsetable_name();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseinsert_partition();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parse__();
// @ts-ignore
        s9 = peg$parseLPAREN();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse__();
// @ts-ignore
          s11 = peg$parsecolumn_list();
// @ts-ignore
          if (s11 !== peg$FAILED) {
// @ts-ignore
            s12 = peg$parse__();
// @ts-ignore
            s13 = peg$parseRPAREN();
// @ts-ignore
            if (s13 !== peg$FAILED) {
// @ts-ignore
              s14 = peg$parse__();
// @ts-ignore
              s15 = peg$parseinsert_value_clause();
// @ts-ignore
              if (s15 !== peg$FAILED) {
// @ts-ignore
                s16 = peg$parse__();
// @ts-ignore
                s17 = peg$parsereturning_stmt();
// @ts-ignore
                if (s17 === peg$FAILED) {
// @ts-ignore
                  s17 = null;
                }
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f165(s1, s5, s7, s11, s15, s17);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinsert_no_columns_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsereplace_insert();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_INTO();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsetable_name();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseinsert_partition();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseinsert_value_clause();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parsereturning_stmt();
// @ts-ignore
            if (s11 === peg$FAILED) {
// @ts-ignore
              s11 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f166(s1, s5, s7, s9, s11);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereplace_insert() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_INSERT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f167();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_REPLACE();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f168();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevalue_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_VALUES();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsevalue_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f169(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevalue_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsevalue_item();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsevalue_item();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsevalue_item();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f170(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevalue_item() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLPAREN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseexpr_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f171(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpr_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexpr_item();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseexpr_item();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseexpr_item();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f172(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinterval_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_INTERVAL();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseexpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseinterval_unit();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f173(s3, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_INTERVAL();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseliteral_string();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f174(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecase_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CASE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parsecase_when_then();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parsecase_when_then();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsecase_else();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseKW_END();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseKW_CASE();
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s9 = null;
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f175(s3, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_CASE();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseexpr();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = [];
// @ts-ignore
          s6 = peg$parsecase_when_then();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            while (s6 !== peg$FAILED) {
// @ts-ignore
              s5.push(s6);
// @ts-ignore
              s6 = peg$parsecase_when_then();
            }
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parsecase_else();
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = null;
            }
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseKW_END();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse__();
// @ts-ignore
              s11 = peg$parseKW_CASE();
// @ts-ignore
              if (s11 === peg$FAILED) {
// @ts-ignore
                s11 = null;
              }
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f176(s3, s5, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecase_when_then() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_WHEN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseor_and_where_expr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_THEN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseexpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f177(s3, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecase_else() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ELSE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseexpr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f178(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpr() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parselogic_operator_expr();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseor_expr();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseunary_expr();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseselect_stmt();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselogic_operator_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseprimary();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseLOGIC_OPERATOR();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseprimary();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseLOGIC_OPERATOR();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseprimary();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f179(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunary_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseadditive_operator();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseprimary();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$currPos;
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseprimary();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f180(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseor_and_where_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexpr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseKW_AND();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = peg$parseKW_OR();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = peg$parseCOMMA();
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseexpr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_AND();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = peg$parseKW_OR();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = peg$parseCOMMA();
          }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseexpr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f181(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseor_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseand_expr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse___();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseKW_OR();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseand_expr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse___();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseKW_OR();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseand_expr();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f182(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseand_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenot_expr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse___();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseKW_AND();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsenot_expr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse___();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseKW_AND();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parsenot_expr();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f183(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenot_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$parsecomparison_expr();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseexists_expr();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseKW_NOT();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
            s2 = peg$c104;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s3 = peg$currPos;
// @ts-ignore
            peg$silentFails++;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
              s4 = peg$c103;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s4 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e103); }
            }
// @ts-ignore
            peg$silentFails--;
// @ts-ignore
            if (s4 === peg$FAILED) {
// @ts-ignore
              s3 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
            if (s3 !== peg$FAILED) {
// @ts-ignore
              s2 = [s2, s3];
// @ts-ignore
              s1 = s2;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s1;
// @ts-ignore
              s1 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parsenot_expr();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f184(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomparison_expr() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseadditive_expr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecomparison_op_right();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f185(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseliteral_string();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsecolumn_ref();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexists_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexists_op();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseunion_stmt();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f186(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexists_op() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseKW_NOT();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseKW_EXISTS();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f187(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_EXISTS();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomparison_op_right() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsearithmetic_op_right();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsein_op_right();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsebetween_op_right();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseis_op_right();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parselike_op_right();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsejsonb_op_right();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsearithmetic_op_right() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parse__();
// @ts-ignore
    s4 = peg$parsearithmetic_comparison_operator();
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      s5 = peg$parse__();
// @ts-ignore
      s6 = peg$parseadditive_expr();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s3 = [s3, s4, s5, s6];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parsearithmetic_comparison_operator();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$parseadditive_expr();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s3 = [s3, s4, s5, s6];
// @ts-ignore
            s2 = s3;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f188(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsearithmetic_comparison_operator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c105) {
// @ts-ignore
      s0 = peg$c105;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
        s0 = peg$c106;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c107) {
// @ts-ignore
          s0 = peg$c107;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c108) {
// @ts-ignore
            s0 = peg$c108;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e108); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
              s0 = peg$c109;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e109); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
                s0 = peg$c103;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e103); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c110) {
// @ts-ignore
                  s0 = peg$c110;
// @ts-ignore
                  peg$currPos += 2;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e110); }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseis_op_right() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_IS();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseadditive_expr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f189(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_IS();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parseKW_DISTINCT();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$parseKW_FROM();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse__();
// @ts-ignore
            s8 = peg$parsetable_name();
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              s4 = [s4, s5, s6, s7, s8];
// @ts-ignore
              s3 = s4;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s3;
// @ts-ignore
              s3 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f190(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        s2 = peg$parseKW_IS();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parse__();
// @ts-ignore
          s4 = peg$parseKW_NOT();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3, s4];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseadditive_expr();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f191(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebetween_op_right() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsebetween_or_not_between_op();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseadditive_expr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_AND();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseadditive_expr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f192(s1, s3, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebetween_or_not_between_op() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseKW_NOT();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseKW_BETWEEN();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f193(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_BETWEEN();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselike_op() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseKW_NOT();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseKW_LIKE();
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = peg$parseKW_ILIKE();
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f194(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_LIKE();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseKW_ILIKE();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c111) {
// @ts-ignore
            s1 = input.substr(peg$currPos, 7);
// @ts-ignore
            peg$currPos += 7;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            s3 = peg$parseKW_TO();
// @ts-ignore
            if (s3 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f195();
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsein_op() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = peg$parseKW_NOT();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseKW_IN();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f196(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_IN();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselike_op_right() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parselike_op();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseliteral();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parsecomparison_expr();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f197(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsein_op_right() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsein_op();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseexpr_list();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f198(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsein_op();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsevar_decl();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$parseliteral_string();
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f199(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsejsonb_op_right() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c112) {
// @ts-ignore
      s1 = peg$c112;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c113) {
// @ts-ignore
        s1 = peg$c113;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e113); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseOPERATOR_CONCATENATION();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseDOUBLE_WELL_ARROW();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseWELL_ARROW();
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
                s1 = peg$c114;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e114); }
              }
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c115) {
// @ts-ignore
                  s1 = peg$c115;
// @ts-ignore
                  peg$currPos += 2;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e115); }
                }
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 2) === peg$c116) {
// @ts-ignore
                    s1 = peg$c116;
// @ts-ignore
                    peg$currPos += 2;
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e116); }
                  }
// @ts-ignore
                  if (s1 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c117) {
// @ts-ignore
                      s1 = peg$c117;
// @ts-ignore
                      peg$currPos += 2;
// @ts-ignore
                    } else {
// @ts-ignore
                      s1 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e117); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsecolumn_list_item();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f200(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseadditive_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsemultiplicative_expr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseadditive_operator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsemultiplicative_expr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseadditive_operator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsemultiplicative_expr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f201(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseadditive_operator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
      s0 = peg$c118;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
        s0 = peg$c119;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemultiplicative_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseprimary();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsemultiplicative_operator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseprimary();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsemultiplicative_operator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseprimary();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f202(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemultiplicative_operator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
      s0 = peg$c120;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
        s0 = peg$c121;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e121); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
          s0 = peg$c122;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseprimary() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$parsecast_expr();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseliteral();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseaggr_func();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsewindow_func();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsefunc_call();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsecase_expr();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseinterval_expr();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$currPos;
// @ts-ignore
                  s1 = peg$parsecolumn_ref();
// @ts-ignore
                  if (s1 !== peg$FAILED) {
// @ts-ignore
                    s2 = peg$parse__();
// @ts-ignore
                    s3 = peg$parsearray_index();
// @ts-ignore
                    if (s3 !== peg$FAILED) {
// @ts-ignore
                      peg$savedPos = s0;
// @ts-ignore
                      s0 = peg$f203(s1, s3);
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$parsecolumn_ref();
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$parseparam();
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$currPos;
// @ts-ignore
                        s1 = peg$parseLPAREN();
// @ts-ignore
                        if (s1 !== peg$FAILED) {
// @ts-ignore
                          s2 = peg$parse__();
// @ts-ignore
                          s3 = peg$parseor_and_where_expr();
// @ts-ignore
                          if (s3 !== peg$FAILED) {
// @ts-ignore
                            s4 = peg$parse__();
// @ts-ignore
                            s5 = peg$parseRPAREN();
// @ts-ignore
                            if (s5 !== peg$FAILED) {
// @ts-ignore
                              peg$savedPos = s0;
// @ts-ignore
                              s0 = peg$f204(s3);
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$parsevar_decl();
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            s0 = peg$currPos;
// @ts-ignore
                            s1 = peg$parse__();
// @ts-ignore
                            if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
                              s2 = peg$c123;
// @ts-ignore
                              peg$currPos++;
// @ts-ignore
                            } else {
// @ts-ignore
                              s2 = peg$FAILED;
// @ts-ignore
                              if (peg$silentFails === 0) { peg$fail(peg$e123); }
                            }
// @ts-ignore
                            if (s2 !== peg$FAILED) {
// @ts-ignore
                              if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
                                s3 = peg$c109;
// @ts-ignore
                                peg$currPos++;
// @ts-ignore
                              } else {
// @ts-ignore
                                s3 = peg$FAILED;
// @ts-ignore
                                if (peg$silentFails === 0) { peg$fail(peg$e109); }
                              }
// @ts-ignore
                              if (s3 !== peg$FAILED) {
// @ts-ignore
                                s4 = peg$parseliteral_numeric();
// @ts-ignore
                                if (s4 !== peg$FAILED) {
// @ts-ignore
                                  if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
                                    s5 = peg$c106;
// @ts-ignore
                                    peg$currPos++;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    s5 = peg$FAILED;
// @ts-ignore
                                    if (peg$silentFails === 0) { peg$fail(peg$e106); }
                                  }
// @ts-ignore
                                  if (s5 !== peg$FAILED) {
// @ts-ignore
                                    peg$savedPos = s0;
// @ts-ignore
                                    s0 = peg$f205(s2, s4);
// @ts-ignore
                                  } else {
// @ts-ignore
                                    peg$currPos = s0;
// @ts-ignore
                                    s0 = peg$FAILED;
                                  }
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s0;
// @ts-ignore
                                  s0 = peg$FAILED;
                                }
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              s0 = peg$currPos;
// @ts-ignore
                              s1 = peg$parse__();
// @ts-ignore
                              if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
                                s2 = peg$c123;
// @ts-ignore
                                peg$currPos++;
// @ts-ignore
                              } else {
// @ts-ignore
                                s2 = peg$FAILED;
// @ts-ignore
                                if (peg$silentFails === 0) { peg$fail(peg$e123); }
                              }
// @ts-ignore
                              if (s2 !== peg$FAILED) {
// @ts-ignore
                                s3 = peg$parseliteral_numeric();
// @ts-ignore
                                if (s3 !== peg$FAILED) {
// @ts-ignore
                                  peg$savedPos = s0;
// @ts-ignore
                                  s0 = peg$f206(s2, s3);
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s0;
// @ts-ignore
                                  s0 = peg$FAILED;
                                }
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestring_constants_escape() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c124) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s2 = peg$c72;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$parsesingle_char();
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$parsesingle_char();
        }
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s6 = peg$c72;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f207(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_ref() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$parsestring_constants_escape();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseident();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseDOT();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseSTAR();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f208(s1);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        s2 = peg$parseident();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parse__();
// @ts-ignore
          s4 = peg$parseDOT();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3, s4];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = null;
        }
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parsecolumn();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseDOUBLE_ARROW();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = peg$parseSINGLE_ARROW();
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseliteral_string();
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = peg$parseliteral_numeric();
            }
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f209(s1, s3, s5, s7);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseident();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$currPos;
// @ts-ignore
            s3 = peg$parse__();
// @ts-ignore
            s4 = peg$parseDOT();
// @ts-ignore
            if (s4 !== peg$FAILED) {
// @ts-ignore
              s5 = peg$parse__();
// @ts-ignore
              s6 = peg$parseident();
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                s3 = [s3, s4, s5, s6];
// @ts-ignore
                s2 = s3;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s2;
// @ts-ignore
                s2 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s2;
// @ts-ignore
              s2 = peg$FAILED;
            }
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              s3 = peg$currPos;
// @ts-ignore
              s4 = peg$parse__();
// @ts-ignore
              s5 = peg$parseDOT();
// @ts-ignore
              if (s5 !== peg$FAILED) {
// @ts-ignore
                s6 = peg$parse__();
// @ts-ignore
                s7 = peg$parsecolumn();
// @ts-ignore
                if (s7 !== peg$FAILED) {
// @ts-ignore
                  s4 = [s4, s5, s6, s7];
// @ts-ignore
                  s3 = s4;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s3;
// @ts-ignore
                  s3 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s3;
// @ts-ignore
                s3 = peg$FAILED;
              }
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f210(s1, s2, s3);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parseident();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$parse__();
// @ts-ignore
              s3 = peg$parseDOT();
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                s4 = peg$parse__();
// @ts-ignore
                s5 = peg$parsecolumn();
// @ts-ignore
                if (s5 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f211(s1, s5);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$parsecolumn();
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s1 = peg$f212(s1);
              }
// @ts-ignore
              s0 = s1;
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecolumn();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parsecolumn();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parsecolumn();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f213(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseident() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = peg$currPos;
// @ts-ignore
      s2 = peg$f214(s1);
// @ts-ignore
      if (s2) {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = undefined;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f215(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsequoted_ident();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f216(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsealias_ident() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = peg$currPos;
// @ts-ignore
      s2 = peg$f217(s1);
// @ts-ignore
      if (s2) {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = undefined;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parseLPAREN();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse__();
// @ts-ignore
          s6 = peg$parsecolumn_list();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse__();
// @ts-ignore
            s8 = peg$parseRPAREN();
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f218(s1, s6);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseident_name();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = peg$currPos;
// @ts-ignore
        s2 = peg$f219(s1);
// @ts-ignore
        if (s2) {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = undefined;
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f220(s1);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parsequoted_ident();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f221(s1);
        }
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsequoted_ident() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsedouble_quoted_ident();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsesingle_quoted_ident();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsebackticks_quoted_ident();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedouble_quoted_ident() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c125;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s3 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e126); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
          s3 = peg$c125;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f222(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesingle_quoted_ident() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
      s1 = peg$c72;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e127); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s3 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e127); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s3 = peg$c72;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f223(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebackticks_quoted_ident() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 96) {
// @ts-ignore
      s1 = peg$c126;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s3 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e129); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 96) {
// @ts-ignore
          s3 = peg$c126;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f224(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsecolumn_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = peg$currPos;
// @ts-ignore
      s2 = peg$f225(s1);
// @ts-ignore
      if (s2) {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = undefined;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f226(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsequoted_ident();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_name() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident_start();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parsecolumn_part();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parsecolumn_part();
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f227(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseident_name() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident_start();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseident_part();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseident_part();
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f228(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseident_start() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseident_part() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecolumn_part() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseparam() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
      s2 = peg$c127;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseident_name();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f229(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseon_update_current_timestamp() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ON();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_UPDATE();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseKW_CURRENT_TIMESTAMP();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseLPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseexpr_list();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parseRPAREN();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f230(s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_ON();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_UPDATE();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseKW_CURRENT_TIMESTAMP();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f231(s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseover_partition() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c128) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseas_window_specification();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f232(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c128) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 4);
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e134); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseLPAREN();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parsepartition_by_clause();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseorder_by_clause();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseRPAREN();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f233(s5, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseon_update_current_timestamp();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggr_func() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseaggr_fun_count();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseaggr_fun_smma();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseaggr_array_agg();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_func() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsewindow_fun_rank();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsewindow_fun_laglead();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsewindow_fun_firstlast();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_fun_rank() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_WIN_FNS_RANK();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseover_partition();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f234(s1, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_fun_laglead() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_LAG_LEAD();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseexpr_list();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseconsider_nulls_clause();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parseover_partition();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f235(s1, s5, s9, s11);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewindow_fun_firstlast() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_FIRST_LAST_VALUE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseexpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseconsider_nulls_clause();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseRPAREN();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parseover_partition();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f236(s1, s5, s7, s11);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_FIRST_LAST_VALUE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c129) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 11);
// @ts-ignore
      peg$currPos += 11;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c130) {
// @ts-ignore
        s0 = input.substr(peg$currPos, 10);
// @ts-ignore
        peg$currPos += 10;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_WIN_FNS_RANK() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c131) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 10);
// @ts-ignore
      peg$currPos += 10;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c132) {
// @ts-ignore
        s0 = input.substr(peg$currPos, 10);
// @ts-ignore
        peg$currPos += 10;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e138); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c133) {
// @ts-ignore
          s0 = input.substr(peg$currPos, 4);
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e139); }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_LAG_LEAD() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c134) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c135) {
// @ts-ignore
        s0 = input.substr(peg$currPos, 4);
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e141); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c136) {
// @ts-ignore
          s0 = input.substr(peg$currPos, 9);
// @ts-ignore
          peg$currPos += 9;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e142); }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseconsider_nulls_clause() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c137) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c138) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 7);
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e144); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c12) {
// @ts-ignore
        s3 = input.substr(peg$currPos, 5);
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f237(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggr_fun_smma() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_SUM_MAX_MIN_AVG();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseadditive_expr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseover_partition();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f238(s1, s5, s9);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SUM_MAX_MIN_AVG() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseKW_SUM();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_MAX();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseKW_MIN();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseKW_AVG();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggr_fun_count() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_COUNT();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_GROUP_CONCAT();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsecount_arg();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseover_partition();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f239(s1, s5, s9);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 15).toLowerCase() === peg$c139) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 15);
// @ts-ignore
        peg$currPos += 15;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e145); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c140) {
// @ts-ignore
          s1 = input.substr(peg$currPos, 15);
// @ts-ignore
          peg$currPos += 15;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e146); }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseLPAREN();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseliteral_numeric();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = peg$parseliteral_array();
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse__();
// @ts-ignore
            s7 = peg$parseRPAREN();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse__();
// @ts-ignore
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c141) {
// @ts-ignore
                s9 = input.substr(peg$currPos, 6);
// @ts-ignore
                peg$currPos += 6;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e147); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                s10 = peg$parse__();
// @ts-ignore
                s11 = peg$parseKW_GROUP();
// @ts-ignore
                if (s11 !== peg$FAILED) {
// @ts-ignore
                  s12 = peg$parse__();
// @ts-ignore
                  s13 = peg$parseLPAREN();
// @ts-ignore
                  if (s13 !== peg$FAILED) {
// @ts-ignore
                    s14 = peg$parse__();
// @ts-ignore
                    s15 = peg$parseorder_by_clause();
// @ts-ignore
                    if (s15 !== peg$FAILED) {
// @ts-ignore
                      s16 = peg$parse__();
// @ts-ignore
                      s17 = peg$parseRPAREN();
// @ts-ignore
                      if (s17 !== peg$FAILED) {
// @ts-ignore
                        s18 = peg$parse__();
// @ts-ignore
                        s19 = peg$parseover_partition();
// @ts-ignore
                        if (s19 === peg$FAILED) {
// @ts-ignore
                          s19 = null;
                        }
// @ts-ignore
                        peg$savedPos = s0;
// @ts-ignore
                        s0 = peg$f240(s1, s5, s15, s19);
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c84) {
// @ts-ignore
          s1 = input.substr(peg$currPos, 4);
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e148); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseLPAREN();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$parseRPAREN();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c141) {
// @ts-ignore
                s7 = input.substr(peg$currPos, 6);
// @ts-ignore
                peg$currPos += 6;
// @ts-ignore
              } else {
// @ts-ignore
                s7 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e147); }
              }
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                s8 = peg$parse__();
// @ts-ignore
                s9 = peg$parseKW_GROUP();
// @ts-ignore
                if (s9 !== peg$FAILED) {
// @ts-ignore
                  s10 = peg$parse__();
// @ts-ignore
                  s11 = peg$parseLPAREN();
// @ts-ignore
                  if (s11 !== peg$FAILED) {
// @ts-ignore
                    s12 = peg$parse__();
// @ts-ignore
                    s13 = peg$parseorder_by_clause();
// @ts-ignore
                    if (s13 !== peg$FAILED) {
// @ts-ignore
                      s14 = peg$parse__();
// @ts-ignore
                      s15 = peg$parseRPAREN();
// @ts-ignore
                      if (s15 !== peg$FAILED) {
// @ts-ignore
                        s16 = peg$parse__();
// @ts-ignore
                        s17 = peg$parseover_partition();
// @ts-ignore
                        if (s17 === peg$FAILED) {
// @ts-ignore
                          s17 = null;
                        }
// @ts-ignore
                        peg$savedPos = s0;
// @ts-ignore
                        s0 = peg$f241(s1, s13, s17);
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedistinct_args() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DISTINCT();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    s3 = peg$parsecolumn_ref();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f242(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_DISTINCT();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseexpr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseorder_by_clause();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f243(s1, s5, s9);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecount_arg() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsestar_expr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f244(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsedistinct_args();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseaggr_array_agg() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ARRAY_AGG();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsedistinct_args();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseorder_by_clause();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseRPAREN();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f245(s1, s5, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestar_expr() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
      s1 = peg$c120;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f246();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefunc_call() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseproc_func_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseor_and_where_expr();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseRPAREN();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f247(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsescalar_func();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseLPAREN();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseexpr_list();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseover_partition();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f248(s1, s5, s9);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseextract_func();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parsescalar_func();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            s3 = peg$parseon_update_current_timestamp();
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              s3 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f249(s1, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseextract_filed() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c142) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c143) {
// @ts-ignore
        s0 = input.substr(peg$currPos, 3);
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e150); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c144) {
// @ts-ignore
          s0 = input.substr(peg$currPos, 6);
// @ts-ignore
          peg$currPos += 6;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e151); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c145) {
// @ts-ignore
            s0 = input.substr(peg$currPos, 3);
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e152); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {
// @ts-ignore
              s0 = input.substr(peg$currPos, 3);
// @ts-ignore
              peg$currPos += 3;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e153); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c147) {
// @ts-ignore
                s0 = input.substr(peg$currPos, 5);
// @ts-ignore
                peg$currPos += 5;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e154); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c148) {
// @ts-ignore
                  s0 = input.substr(peg$currPos, 4);
// @ts-ignore
                  peg$currPos += 4;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e155); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c149) {
// @ts-ignore
                    s0 = input.substr(peg$currPos, 6);
// @ts-ignore
                    peg$currPos += 6;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e156); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c150) {
// @ts-ignore
                      s0 = input.substr(peg$currPos, 7);
// @ts-ignore
                      peg$currPos += 7;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e157); }
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c151) {
// @ts-ignore
                        s0 = input.substr(peg$currPos, 12);
// @ts-ignore
                        peg$currPos += 12;
// @ts-ignore
                      } else {
// @ts-ignore
                        s0 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e158); }
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c152) {
// @ts-ignore
                          s0 = input.substr(peg$currPos, 10);
// @ts-ignore
                          peg$currPos += 10;
// @ts-ignore
                        } else {
// @ts-ignore
                          s0 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e159); }
                        }
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c153) {
// @ts-ignore
                            s0 = input.substr(peg$currPos, 12);
// @ts-ignore
                            peg$currPos += 12;
// @ts-ignore
                          } else {
// @ts-ignore
                            s0 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e160); }
                          }
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c154) {
// @ts-ignore
                              s0 = input.substr(peg$currPos, 6);
// @ts-ignore
                              peg$currPos += 6;
// @ts-ignore
                            } else {
// @ts-ignore
                              s0 = peg$FAILED;
// @ts-ignore
                              if (peg$silentFails === 0) { peg$fail(peg$e161); }
                            }
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c155) {
// @ts-ignore
                                s0 = input.substr(peg$currPos, 5);
// @ts-ignore
                                peg$currPos += 5;
// @ts-ignore
                              } else {
// @ts-ignore
                                s0 = peg$FAILED;
// @ts-ignore
                                if (peg$silentFails === 0) { peg$fail(peg$e162); }
                              }
// @ts-ignore
                              if (s0 === peg$FAILED) {
// @ts-ignore
                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c156) {
// @ts-ignore
                                  s0 = input.substr(peg$currPos, 7);
// @ts-ignore
                                  peg$currPos += 7;
// @ts-ignore
                                } else {
// @ts-ignore
                                  s0 = peg$FAILED;
// @ts-ignore
                                  if (peg$silentFails === 0) { peg$fail(peg$e163); }
                                }
// @ts-ignore
                                if (s0 === peg$FAILED) {
// @ts-ignore
                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c157) {
// @ts-ignore
                                    s0 = input.substr(peg$currPos, 6);
// @ts-ignore
                                    peg$currPos += 6;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    s0 = peg$FAILED;
// @ts-ignore
                                    if (peg$silentFails === 0) { peg$fail(peg$e164); }
                                  }
// @ts-ignore
                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c158) {
// @ts-ignore
                                      s0 = input.substr(peg$currPos, 8);
// @ts-ignore
                                      peg$currPos += 8;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      s0 = peg$FAILED;
// @ts-ignore
                                      if (peg$silentFails === 0) { peg$fail(peg$e165); }
                                    }
// @ts-ignore
                                    if (s0 === peg$FAILED) {
// @ts-ignore
                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c159) {
// @ts-ignore
                                        s0 = input.substr(peg$currPos, 13);
// @ts-ignore
                                        peg$currPos += 13;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        s0 = peg$FAILED;
// @ts-ignore
                                        if (peg$silentFails === 0) { peg$fail(peg$e166); }
                                      }
// @ts-ignore
                                      if (s0 === peg$FAILED) {
// @ts-ignore
                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c160) {
// @ts-ignore
                                          s0 = input.substr(peg$currPos, 15);
// @ts-ignore
                                          peg$currPos += 15;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          s0 = peg$FAILED;
// @ts-ignore
                                          if (peg$silentFails === 0) { peg$fail(peg$e167); }
                                        }
// @ts-ignore
                                        if (s0 === peg$FAILED) {
// @ts-ignore
                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c161) {
// @ts-ignore
                                            s0 = input.substr(peg$currPos, 4);
// @ts-ignore
                                            peg$currPos += 4;
// @ts-ignore
                                          } else {
// @ts-ignore
                                            s0 = peg$FAILED;
// @ts-ignore
                                            if (peg$silentFails === 0) { peg$fail(peg$e168); }
                                          }
// @ts-ignore
                                          if (s0 === peg$FAILED) {
// @ts-ignore
                                            s0 = peg$currPos;
// @ts-ignore
                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c162) {
// @ts-ignore
                                              s1 = input.substr(peg$currPos, 4);
// @ts-ignore
                                              peg$currPos += 4;
// @ts-ignore
                                            } else {
// @ts-ignore
                                              s1 = peg$FAILED;
// @ts-ignore
                                              if (peg$silentFails === 0) { peg$fail(peg$e169); }
                                            }
// @ts-ignore
                                            if (s1 !== peg$FAILED) {
// @ts-ignore
                                              peg$savedPos = s0;
// @ts-ignore
                                              s1 = peg$f250();
                                            }
// @ts-ignore
                                            s0 = s1;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseextract_func() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_EXTRACT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseextract_filed();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseKW_FROM();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseKW_TIMESTAMP();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = peg$parseKW_INTERVAL();
// @ts-ignore
              if (s9 === peg$FAILED) {
// @ts-ignore
                s9 = peg$parseKW_TIME();
// @ts-ignore
                if (s9 === peg$FAILED) {
// @ts-ignore
                  s9 = peg$parseKW_DATE();
                }
              }
            }
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parseexpr();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse__();
// @ts-ignore
              s13 = peg$parseRPAREN();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f251(s1, s5, s9, s11);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsescalar_func() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseKW_CURRENT_DATE();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_CURRENT_TIME();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseKW_CURRENT_TIMESTAMP();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseKW_CURRENT_USER();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseKW_USER();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseKW_SESSION_USER();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseKW_SYSTEM_USER();
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecast_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLPAREN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseliteral();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseaggr_func();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$parsewindow_func();
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = peg$parsefunc_call();
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              s3 = peg$parsecase_expr();
// @ts-ignore
              if (s3 === peg$FAILED) {
// @ts-ignore
                s3 = peg$parseinterval_expr();
// @ts-ignore
                if (s3 === peg$FAILED) {
// @ts-ignore
                  s3 = peg$parsecolumn_ref();
// @ts-ignore
                  if (s3 === peg$FAILED) {
// @ts-ignore
                    s3 = peg$parseparam();
                  }
                }
              }
            }
          }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseKW_DOUBLE_COLON();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parsedata_type();
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              s9 = peg$parse__();
// @ts-ignore
              s10 = peg$parsealias_clause();
// @ts-ignore
              if (s10 === peg$FAILED) {
// @ts-ignore
                s10 = null;
              }
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f252(s3, s7, s8, s10);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseliteral();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseaggr_func();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parsewindow_func();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parsefunc_call();
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              s1 = peg$parsecase_expr();
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                s1 = peg$parseinterval_expr();
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  s1 = peg$parsecolumn_ref();
// @ts-ignore
                  if (s1 === peg$FAILED) {
// @ts-ignore
                    s1 = peg$parseparam();
                  }
                }
              }
            }
          }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseKW_DOUBLE_COLON();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parsedata_type();
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parse__();
// @ts-ignore
            s6 = peg$parsealias_clause();
// @ts-ignore
            if (s6 === peg$FAILED) {
// @ts-ignore
              s6 = null;
            }
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f253(s1, s3, s4, s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseKW_CAST();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parseLPAREN();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parse__();
// @ts-ignore
            s5 = peg$parseexpr();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              s6 = peg$parse__();
// @ts-ignore
              s7 = peg$parseKW_AS();
// @ts-ignore
              if (s7 !== peg$FAILED) {
// @ts-ignore
                s8 = peg$parse__();
// @ts-ignore
                s9 = peg$parsedata_type();
// @ts-ignore
                if (s9 !== peg$FAILED) {
// @ts-ignore
                  s10 = peg$parse__();
// @ts-ignore
                  s11 = peg$parseRPAREN();
// @ts-ignore
                  if (s11 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f254(s5, s9);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseKW_CAST();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parse__();
// @ts-ignore
            s3 = peg$parseLPAREN();
// @ts-ignore
            if (s3 !== peg$FAILED) {
// @ts-ignore
              s4 = peg$parse__();
// @ts-ignore
              s5 = peg$parseexpr();
// @ts-ignore
              if (s5 !== peg$FAILED) {
// @ts-ignore
                s6 = peg$parse__();
// @ts-ignore
                s7 = peg$parseKW_AS();
// @ts-ignore
                if (s7 !== peg$FAILED) {
// @ts-ignore
                  s8 = peg$parse__();
// @ts-ignore
                  s9 = peg$parseKW_DECIMAL();
// @ts-ignore
                  if (s9 !== peg$FAILED) {
// @ts-ignore
                    s10 = peg$parse__();
// @ts-ignore
                    s11 = peg$parseLPAREN();
// @ts-ignore
                    if (s11 !== peg$FAILED) {
// @ts-ignore
                      s12 = peg$parse__();
// @ts-ignore
                      s13 = peg$parseint();
// @ts-ignore
                      if (s13 !== peg$FAILED) {
// @ts-ignore
                        s14 = peg$parse__();
// @ts-ignore
                        s15 = peg$parseRPAREN();
// @ts-ignore
                        if (s15 !== peg$FAILED) {
// @ts-ignore
                          s16 = peg$parse__();
// @ts-ignore
                          s17 = peg$parseRPAREN();
// @ts-ignore
                          if (s17 !== peg$FAILED) {
// @ts-ignore
                            peg$savedPos = s0;
// @ts-ignore
                            s0 = peg$f255(s5, s13);
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parseKW_CAST();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$parse__();
// @ts-ignore
              s3 = peg$parseLPAREN();
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                s4 = peg$parse__();
// @ts-ignore
                s5 = peg$parseexpr();
// @ts-ignore
                if (s5 !== peg$FAILED) {
// @ts-ignore
                  s6 = peg$parse__();
// @ts-ignore
                  s7 = peg$parseKW_AS();
// @ts-ignore
                  if (s7 !== peg$FAILED) {
// @ts-ignore
                    s8 = peg$parse__();
// @ts-ignore
                    s9 = peg$parseKW_DECIMAL();
// @ts-ignore
                    if (s9 !== peg$FAILED) {
// @ts-ignore
                      s10 = peg$parse__();
// @ts-ignore
                      s11 = peg$parseLPAREN();
// @ts-ignore
                      if (s11 !== peg$FAILED) {
// @ts-ignore
                        s12 = peg$parse__();
// @ts-ignore
                        s13 = peg$parseint();
// @ts-ignore
                        if (s13 !== peg$FAILED) {
// @ts-ignore
                          s14 = peg$parse__();
// @ts-ignore
                          s15 = peg$parseCOMMA();
// @ts-ignore
                          if (s15 !== peg$FAILED) {
// @ts-ignore
                            s16 = peg$parse__();
// @ts-ignore
                            s17 = peg$parseint();
// @ts-ignore
                            if (s17 !== peg$FAILED) {
// @ts-ignore
                              s18 = peg$parse__();
// @ts-ignore
                              s19 = peg$parseRPAREN();
// @ts-ignore
                              if (s19 !== peg$FAILED) {
// @ts-ignore
                                s20 = peg$parse__();
// @ts-ignore
                                s21 = peg$parseRPAREN();
// @ts-ignore
                                if (s21 !== peg$FAILED) {
// @ts-ignore
                                  peg$savedPos = s0;
// @ts-ignore
                                  s0 = peg$f256(s5, s13, s17);
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s0;
// @ts-ignore
                                  s0 = peg$FAILED;
                                }
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$parseKW_CAST();
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s2 = peg$parse__();
// @ts-ignore
                s3 = peg$parseLPAREN();
// @ts-ignore
                if (s3 !== peg$FAILED) {
// @ts-ignore
                  s4 = peg$parse__();
// @ts-ignore
                  s5 = peg$parseexpr();
// @ts-ignore
                  if (s5 !== peg$FAILED) {
// @ts-ignore
                    s6 = peg$parse__();
// @ts-ignore
                    s7 = peg$parseKW_AS();
// @ts-ignore
                    if (s7 !== peg$FAILED) {
// @ts-ignore
                      s8 = peg$parse__();
// @ts-ignore
                      s9 = peg$parsesignedness();
// @ts-ignore
                      if (s9 !== peg$FAILED) {
// @ts-ignore
                        s10 = peg$parse__();
// @ts-ignore
                        s11 = peg$parseKW_INTEGER();
// @ts-ignore
                        if (s11 === peg$FAILED) {
// @ts-ignore
                          s11 = null;
                        }
// @ts-ignore
                        s12 = peg$parse__();
// @ts-ignore
                        s13 = peg$parseRPAREN();
// @ts-ignore
                        if (s13 !== peg$FAILED) {
// @ts-ignore
                          peg$savedPos = s0;
// @ts-ignore
                          s0 = peg$f257(s5, s9, s11);
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesignedness() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseKW_SIGNED();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_UNSIGNED();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseliteral_string();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseliteral_numeric();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseliteral_bool();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseliteral_null();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseliteral_datetime();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseliteral_array();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_array() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ARRAY();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLBRAKE();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseexpr_list();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseRBRAKE();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f258(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseliteral();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseliteral();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseliteral();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f259(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_null() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_NULL();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f260();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_not_null() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_NOT_NULL();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f261();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_bool() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_TRUE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f262();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_FALSE();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f263();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_string() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
      s2 = peg$c72;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parsesingle_char();
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$parsesingle_char();
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s4 = peg$c72;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e170); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s3 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e170); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s5 = peg$c72;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = [];
// @ts-ignore
          s7 = peg$parsesingle_char();
// @ts-ignore
          while (s7 !== peg$FAILED) {
// @ts-ignore
            s6.push(s7);
// @ts-ignore
            s7 = peg$parsesingle_char();
          }
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
            s7 = peg$c72;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e72); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f264(s1, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s2 = peg$c72;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        s4 = peg$parsesingle_char();
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parsesingle_char();
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s4 = peg$c72;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s2 = [s2, s3, s4];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f265(s1);
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
          s2 = peg$c125;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = [];
// @ts-ignore
          s4 = peg$parsesingle_quote_char();
// @ts-ignore
          while (s4 !== peg$FAILED) {
// @ts-ignore
            s3.push(s4);
// @ts-ignore
            s4 = peg$parsesingle_quote_char();
          }
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
            s4 = peg$c125;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s2 = [s2, s3, s4];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s3 = peg$parseDOT();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s2 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f266(s1);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_datetime() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_TIME();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_DATE();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_TIMESTAMP();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_DATETIME();
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s4 = peg$c72;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        s6 = peg$parsesingle_char();
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          s6 = peg$parsesingle_char();
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s6 = peg$c72;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f267(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_TIME();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_DATE();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_TIMESTAMP();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseKW_DATETIME();
          }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
          s4 = peg$c125;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = [];
// @ts-ignore
          s6 = peg$parsesingle_quote_char();
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            s6 = peg$parsesingle_quote_char();
          }
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
            s6 = peg$c125;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f268(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesingle_quote_char() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r7.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseescape_char();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesingle_char() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r8.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseescape_char();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseescape_char() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c163) {
// @ts-ignore
      s1 = peg$c163;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f269();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c164) {
// @ts-ignore
        s1 = peg$c164;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e174); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f270();
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c165) {
// @ts-ignore
          s1 = peg$c165;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e175); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f271();
        }
// @ts-ignore
        s0 = s1;
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c166) {
// @ts-ignore
            s1 = peg$c166;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e176); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f272();
          }
// @ts-ignore
          s0 = s1;
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c167) {
// @ts-ignore
              s1 = peg$c167;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e177); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s1 = peg$f273();
            }
// @ts-ignore
            s0 = s1;
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c168) {
// @ts-ignore
                s1 = peg$c168;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e178); }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s1 = peg$f274();
              }
// @ts-ignore
              s0 = s1;
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c169) {
// @ts-ignore
                  s1 = peg$c169;
// @ts-ignore
                  peg$currPos += 2;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e179); }
                }
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s1 = peg$f275();
                }
// @ts-ignore
                s0 = s1;
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$currPos;
// @ts-ignore
                  if (input.substr(peg$currPos, 2) === peg$c170) {
// @ts-ignore
                    s1 = peg$c170;
// @ts-ignore
                    peg$currPos += 2;
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e180); }
                  }
// @ts-ignore
                  if (s1 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s1 = peg$f276();
                  }
// @ts-ignore
                  s0 = s1;
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$currPos;
// @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c171) {
// @ts-ignore
                      s1 = peg$c171;
// @ts-ignore
                      peg$currPos += 2;
// @ts-ignore
                    } else {
// @ts-ignore
                      s1 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e181); }
                    }
// @ts-ignore
                    if (s1 !== peg$FAILED) {
// @ts-ignore
                      peg$savedPos = s0;
// @ts-ignore
                      s1 = peg$f277();
                    }
// @ts-ignore
                    s0 = s1;
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$currPos;
// @ts-ignore
                      if (input.substr(peg$currPos, 2) === peg$c172) {
// @ts-ignore
                        s1 = peg$c172;
// @ts-ignore
                        peg$currPos += 2;
// @ts-ignore
                      } else {
// @ts-ignore
                        s1 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e182); }
                      }
// @ts-ignore
                      if (s1 !== peg$FAILED) {
// @ts-ignore
                        s2 = peg$parsehexDigit();
// @ts-ignore
                        if (s2 !== peg$FAILED) {
// @ts-ignore
                          s3 = peg$parsehexDigit();
// @ts-ignore
                          if (s3 !== peg$FAILED) {
// @ts-ignore
                            s4 = peg$parsehexDigit();
// @ts-ignore
                            if (s4 !== peg$FAILED) {
// @ts-ignore
                              s5 = peg$parsehexDigit();
// @ts-ignore
                              if (s5 !== peg$FAILED) {
// @ts-ignore
                                peg$savedPos = s0;
// @ts-ignore
                                s0 = peg$f278(s2, s3, s4, s5);
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$currPos;
// @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
                          s1 = peg$c173;
// @ts-ignore
                          peg$currPos++;
// @ts-ignore
                        } else {
// @ts-ignore
                          s1 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e183); }
                        }
// @ts-ignore
                        if (s1 !== peg$FAILED) {
// @ts-ignore
                          peg$savedPos = s0;
// @ts-ignore
                          s1 = peg$f279();
                        }
// @ts-ignore
                        s0 = s1;
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$currPos;
// @ts-ignore
                          if (input.substr(peg$currPos, 2) === peg$c174) {
// @ts-ignore
                            s1 = peg$c174;
// @ts-ignore
                            peg$currPos += 2;
// @ts-ignore
                          } else {
// @ts-ignore
                            s1 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e184); }
                          }
// @ts-ignore
                          if (s1 !== peg$FAILED) {
// @ts-ignore
                            peg$savedPos = s0;
// @ts-ignore
                            s1 = peg$f280();
                          }
// @ts-ignore
                          s0 = s1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseline_terminator() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral_numeric() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenumber();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f281(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumber() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseint();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsefrac();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseexp();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f282(s1, s2, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseint();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parsefrac();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f283(s1, s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseint();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parseexp();
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f284(s1, s2);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseint();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f285(s1);
          }
// @ts-ignore
          s0 = s1;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseint() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$parsedigits();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsedigit();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
          s1 = peg$c119;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
            s1 = peg$c118;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e118); }
          }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parsedigits();
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f286(s1, s2);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
            s1 = peg$c119;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e119); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
              s1 = peg$c118;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e118); }
            }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parsedigit();
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f287(s1, s2);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefrac() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
      s1 = peg$c175;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsedigits();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f288(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexp() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsee();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsedigits();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f289(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedigits() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parsedigit();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$parsedigit();
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f290(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedigit() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsehexDigit() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r11.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsee() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (peg$r12.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (peg$r13.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e190); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f291(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_NULL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c176) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DEFAULT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c22) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_NOT_NULL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c177) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TRUE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c178) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e193); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TO() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c179) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_FALSE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c180) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SHOW() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c181) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e196); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DROP() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c182) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e197); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f292();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_USE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c183) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ALTER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c184) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e199); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SELECT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c185) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e200); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UPDATE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c186) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CREATE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c187) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TEMPORARY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c188) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f293();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TEMP() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c189) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f294();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_IF_NOT_EXISTS() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c190) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 13);
// @ts-ignore
      peg$currPos += 13;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DELETE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c191) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e206); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_INSERT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c192) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_RECURSIVE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9) === peg$c193) {
// @ts-ignore
      s1 = peg$c193;
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_REPLACE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c194) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e209); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_RETURNING() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c195) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f295();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_RENAME() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c196) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e211); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_IGNORE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c137) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_EXPLAIN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c197) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e212); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_PARTITION() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c198) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e213); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f296();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_INTO() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c199) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e214); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_FROM() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c200) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e215); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SET() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_LOCK() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c30) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_AS() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c201) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TABLE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c202) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e217); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f297();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DATABASE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c203) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e218); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f298();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SCHEME() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c204) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e219); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f299();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SEQUENCE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c205) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e220); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f300();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TABLESPACE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c206) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 10);
// @ts-ignore
      peg$currPos += 10;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e221); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f301();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_COLLATE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c64) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f302();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ON() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c49) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_LEFT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c207) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_RIGHT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c208) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e223); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_FULL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c209) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e224); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_INNER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c210) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e225); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_JOIN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c211) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e226); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_OUTER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c212) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e227); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNION() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c213) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e228); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_VALUES() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c214) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e229); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_USING() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c215) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_WHERE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c216) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_WITH() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c93) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_GROUP() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c217) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e232); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_BY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c218) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e233); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ORDER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c219) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e234); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_HAVING() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c220) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e235); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_WINDOW() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c221) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e236); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_LIMIT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c222) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e237); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_OFFSET() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c223) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e238); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f303();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ASC() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c224) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e239); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f304();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DESC() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f305();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ALL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c226) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e241); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f306();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DISTINCT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c227) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e242); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f307();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_BETWEEN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c228) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e243); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f308();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_IN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c76) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f309();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_IS() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c229) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e244); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f310();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_LIKE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c230) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e245); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f311();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ILIKE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c231) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e246); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f312();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_EXISTS() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c232) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e247); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f313();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_NOT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c53) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f314();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_AND() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c233) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e248); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f315();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_OR() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c234) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e249); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f316();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ARRAY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c235) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e250); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f317();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ARRAY_AGG() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c236) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e251); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f318();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_COUNT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c237) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e252); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f319();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_GROUP_CONCAT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c238) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e253); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f320();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_MAX() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c239) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e254); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f321();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_MIN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c240) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e255); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f322();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SUM() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c241) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e256); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f323();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_AVG() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c242) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e257); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f324();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_EXTRACT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c243) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e258); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f325();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CALL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c244) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e259); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f326();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CASE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c245) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e260); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_WHEN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c246) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e261); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_THEN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c247) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e262); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ELSE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c248) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e263); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_END() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c249) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e264); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CAST() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c250) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e265); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_BOOL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c251) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e266); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f327();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_BOOLEAN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c252) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e267); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f328();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CHAR() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c253) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e268); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f329();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_VARCHAR() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c254) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e269); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f330();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_NUMERIC() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c255) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e270); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f331();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DECIMAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c256) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e271); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f332();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SIGNED() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c257) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e272); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f333();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNSIGNED() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c258) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e273); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f334();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_INT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c259) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e274); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f335();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ZEROFILL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c260) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e275); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f336();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_INTEGER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c261) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e276); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f337();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_JSON() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c262) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e277); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f338();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_JSONB() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c263) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e278); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f339();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_GEOMETRY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c264) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e279); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f340();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SMALLINT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c265) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e280); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f341();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SERIAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c266) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e281); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f342();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TINYINT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c267) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e282); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f343();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TINYTEXT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c268) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e283); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f344();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TEXT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c269) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e284); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f345();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_MEDIUMTEXT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c270) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 10);
// @ts-ignore
      peg$currPos += 10;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e285); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f346();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_LONGTEXT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c271) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e286); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f347();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_BIGINT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c272) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e287); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f348();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ENUM() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c273) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e288); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f349();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_FLOAT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c274) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e289); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f350();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DOUBLE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c275) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e290); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f351();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DATE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c276) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e291); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f352();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DATETIME() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c277) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e292); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f353();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ROWS() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c278) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e293); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f354();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TIME() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c279) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e294); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f355();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TIMESTAMP() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c280) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e295); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f356();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_TRUNCATE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c281) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e296); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f357();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_USER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c282) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e297); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f358();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UUID() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c283) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e298); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f359();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CURRENT_DATE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c284) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e299); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f360();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ADD_DATE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c285) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e300); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f361();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_INTERVAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c286) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e301); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f362();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNIT_YEAR() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c162) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f363();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNIT_MONTH() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c155) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f364();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNIT_DAY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c143) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f365();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNIT_HOUR() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c148) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f366();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNIT_MINUTE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c154) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f367();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNIT_SECOND() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c157) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f368();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CURRENT_TIME() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c287) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e302); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f369();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CURRENT_TIMESTAMP() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c288) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 17);
// @ts-ignore
      peg$currPos += 17;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e303); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f370();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CURRENT_USER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c289) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e304); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f371();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SESSION_USER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c290) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e305); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f372();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SYSTEM_USER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c291) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 11);
// @ts-ignore
      peg$currPos += 11;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e306); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f373();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_GLOBAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c292) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e307); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f374();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SESSION() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c293) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e308); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f375();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_LOCAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c294) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e309); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f376();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_PERSIST() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c295) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e310); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f377();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_PERSIST_ONLY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c296) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e311); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f378();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_VAR__PRE_AT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 64) {
// @ts-ignore
      s0 = peg$c297;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e312); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_VAR__PRE_AT_AT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c298) {
// @ts-ignore
      s0 = peg$c298;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e313); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_VAR_PRE_DOLLAR() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
      s0 = peg$c123;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_VAR_PRE() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseKW_VAR__PRE_AT_AT();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_VAR__PRE_AT();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseKW_VAR_PRE_DOLLAR();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_RETURN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c299) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e314); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ASSIGN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c300) {
// @ts-ignore
      s0 = peg$c300;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e315); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DOUBLE_COLON() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c301) {
// @ts-ignore
      s0 = peg$c301;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e316); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ASSIGIN_EQUAL() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
      s0 = peg$c103;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_DUAL() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c302) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 4);
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e317); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_ADD() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c303) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e318); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f379();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_COLUMN() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c304) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e319); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f380();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_INDEX() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c305) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e320); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f381();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_KEY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c17) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f382();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_FULLTEXT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c306) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e321); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f383();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_SPATIAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c307) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e322); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f384();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_UNIQUE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c16) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f385();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_KEY_BLOCK_SIZE() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c66) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 14);
// @ts-ignore
      peg$currPos += 14;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f386();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_COMMENT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c308) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 7);
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e323); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f387();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CONSTRAINT() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c309) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 10);
// @ts-ignore
      peg$currPos += 10;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e324); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f388();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_CONCURRENTLY() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c310) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e325); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f389();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKW_REFERENCES() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c311) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 10);
// @ts-ignore
      peg$currPos += 10;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e326); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseident_start();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f390();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPT_SQL_CALC_FOUND_ROWS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c312) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 19);
// @ts-ignore
      peg$currPos += 19;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e327); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPT_SQL_CACHE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c313) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 9);
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e328); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPT_SQL_NO_CACHE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c314) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 12);
// @ts-ignore
      peg$currPos += 12;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e329); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPT_SQL_SMALL_RESULT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c315) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 16);
// @ts-ignore
      peg$currPos += 16;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e330); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPT_SQL_BIG_RESULT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c316) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 14);
// @ts-ignore
      peg$currPos += 14;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e331); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPT_SQL_BUFFER_RESULT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c317) {
// @ts-ignore
      s0 = input.substr(peg$currPos, 17);
// @ts-ignore
      peg$currPos += 17;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e332); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDOT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
      s0 = peg$c175;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCOMMA() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
      s0 = peg$c318;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e333); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSTAR() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
      s0 = peg$c120;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLPAREN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s0 = peg$c87;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRPAREN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
      s0 = peg$c88;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLBRAKE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s0 = peg$c319;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e334); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRBRAKE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
      s0 = peg$c320;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e335); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSEMICOLON() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
      s0 = peg$c321;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e336); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSINGLE_ARROW() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c322) {
// @ts-ignore
      s0 = peg$c322;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e337); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDOUBLE_ARROW() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c323) {
// @ts-ignore
      s0 = peg$c323;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e338); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWELL_ARROW() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c324) {
// @ts-ignore
      s0 = peg$c324;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e339); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDOUBLE_WELL_ARROW() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c325) {
// @ts-ignore
      s0 = peg$c325;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e340); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPERATOR_CONCATENATION() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c326) {
// @ts-ignore
      s0 = peg$c326;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e341); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOPERATOR_AND() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c327) {
// @ts-ignore
      s0 = peg$c327;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e342); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLOGIC_OPERATOR() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseOPERATOR_CONCATENATION();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseOPERATOR_AND();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse__() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parsewhitespace();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsecomment();
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parsewhitespace();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsecomment();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse___() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parsewhitespace();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsecomment();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        s1 = peg$parsewhitespace();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parsecomment();
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomment() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseblock_comment();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseline_comment();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseblock_comment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c328) {
// @ts-ignore
      s1 = peg$c328;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e343); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c329) {
// @ts-ignore
        s5 = peg$c329;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e344); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parsechar();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c329) {
// @ts-ignore
          s5 = peg$c329;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e344); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsechar();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c329) {
// @ts-ignore
        s3 = peg$c329;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e344); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseline_comment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c330) {
// @ts-ignore
      s1 = peg$c330;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e345); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s5 = peg$parseEOL();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parsechar();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseEOL();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsechar();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsepound_sign_comment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 35) {
// @ts-ignore
      s1 = peg$c331;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e346); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s5 = peg$parseEOL();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parsechar();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseEOL();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsechar();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsekeyword_comment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_COMMENT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ASSIGIN_EQUAL();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseliteral_string();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f391(s1, s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsechar() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.length > peg$currPos) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e347); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinterval_unit() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseKW_UNIT_YEAR();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseKW_UNIT_MONTH();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseKW_UNIT_DAY();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseKW_UNIT_HOUR();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseKW_UNIT_MINUTE();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseKW_UNIT_SECOND();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewhitespace() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r14.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e348); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEOL() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$parseEOF();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = [];
// @ts-ignore
      if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e185); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        while (s1 !== peg$FAILED) {
// @ts-ignore
          s0.push(s1);
// @ts-ignore
          if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s1 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e185); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEOF() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    if (input.length > peg$currPos) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e347); }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s0 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_stmts() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parseproc_stmt();
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parseproc_stmt();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_stmt() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    peg$savedPos = peg$currPos;
// @ts-ignore
    s1 = peg$f392();
// @ts-ignore
    if (s1) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseassign_stmt();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parsereturn_stmt();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f393(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseassign_stmt() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsevar_decl();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsewithout_prefix_var_decl();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseKW_ASSIGN();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseKW_ASSIGIN_EQUAL();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseproc_expr();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f394(s1, s3, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereturn_stmt() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_RETURN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseproc_expr();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f395(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_expr() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseselect_stmt();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseproc_join();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseproc_additive_expr();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseproc_array();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_additive_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseproc_multiplicative_expr();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseadditive_operator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseproc_multiplicative_expr();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseadditive_operator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseproc_multiplicative_expr();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f396(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_multiplicative_expr() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseproc_primary();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parsemultiplicative_operator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseproc_primary();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsemultiplicative_operator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseproc_primary();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f397(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_join() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsevar_decl();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsejoin_op();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parsevar_decl();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseon_clause();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f398(s1, s3, s5, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_primary() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$parseliteral();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsevar_decl();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseproc_func_call();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseparam();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parseLPAREN();
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$parse__();
// @ts-ignore
              s3 = peg$parseproc_additive_expr();
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                s4 = peg$parse__();
// @ts-ignore
                s5 = peg$parseRPAREN();
// @ts-ignore
                if (s5 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f399(s3);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_func_name() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$parse__();
// @ts-ignore
      s4 = peg$parseDOT();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse__();
// @ts-ignore
        s6 = peg$parseident_name();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s3 = [s3, s4, s5, s6];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f400(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_func_call() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseproc_func_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseproc_primary_list();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseRPAREN();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f401(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseproc_func_name();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f402(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_primary_list() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseproc_primary();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse__();
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse__();
// @ts-ignore
        s7 = peg$parseproc_primary();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseproc_primary();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f403(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseproc_array() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRAKE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseproc_primary_list();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRBRAKE();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f404(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevar_decl() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_VAR_PRE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsewithout_prefix_var_decl();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f405(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsewithout_prefix_var_decl() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseident_name();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsemem_chain();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f406(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemem_chain() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
      s3 = peg$c175;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parseident_name();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s3 = [s3, s4];
// @ts-ignore
        s2 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s3 = peg$c175;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e186); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseident_name();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s3 = [s3, s4];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f407(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedata_type() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsearray_type();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsecharacter_string_type();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsenumeric_type();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsedatetime_type();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parsejson_type();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsegeometry_type();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parsetext_type();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseuuid_type();
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$parseboolean_type();
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$parseenum_type();
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$parseserial_interval_type();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsearray_type() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenumeric_type();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsecharacter_string_type();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLBRAKE();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = peg$parseRBRAKE();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseLBRAKE();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse__();
// @ts-ignore
            s9 = peg$parseRBRAKE();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f408(s1);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsenumeric_type();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsecharacter_string_type();
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse__();
// @ts-ignore
        s3 = peg$parseLBRAKE();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          s5 = peg$parseRBRAKE();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f409(s1);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseboolean_type() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_BOOL();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_BOOLEAN();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f410(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecharacter_string_type() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_CHAR();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_VARCHAR();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = [];
// @ts-ignore
        if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e187); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e187); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f411(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_CHAR();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f412(s1);
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseKW_VARCHAR();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f413(s1);
        }
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumeric_type_suffix() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_UNSIGNED();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse__();
// @ts-ignore
    s3 = peg$parseKW_ZEROFILL();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f414(s1, s3);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumeric_type() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_NUMERIC();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_DECIMAL();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_INT();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_INTEGER();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseKW_SMALLINT();
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              s1 = peg$parseKW_TINYINT();
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                s1 = peg$parseKW_BIGINT();
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  s1 = peg$parseKW_FLOAT();
// @ts-ignore
                  if (s1 === peg$FAILED) {
// @ts-ignore
                    s1 = peg$parseKW_DOUBLE();
                  }
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = [];
// @ts-ignore
        if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e187); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e187); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          s8 = peg$parseCOMMA();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse__();
// @ts-ignore
            s10 = [];
// @ts-ignore
            if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s11 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s11 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e187); }
            }
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              while (s11 !== peg$FAILED) {
// @ts-ignore
                s10.push(s11);
// @ts-ignore
                if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s11 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s11 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e187); }
                }
              }
// @ts-ignore
            } else {
// @ts-ignore
              s10 = peg$FAILED;
            }
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s8 = [s8, s9, s10];
// @ts-ignore
              s7 = s8;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse__();
// @ts-ignore
          s9 = peg$parseRPAREN();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse__();
// @ts-ignore
            s11 = peg$parsenumeric_type_suffix();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f415(s1, s5, s7, s11);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_NUMERIC();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_DECIMAL();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_INT();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseKW_INTEGER();
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              s1 = peg$parseKW_SMALLINT();
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                s1 = peg$parseKW_TINYINT();
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  s1 = peg$parseKW_BIGINT();
// @ts-ignore
                  if (s1 === peg$FAILED) {
// @ts-ignore
                    s1 = peg$parseKW_FLOAT();
// @ts-ignore
                    if (s1 === peg$FAILED) {
// @ts-ignore
                      s1 = peg$parseKW_DOUBLE();
                    }
                  }
                }
              }
            }
          }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = [];
// @ts-ignore
        if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e187); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          while (s3 !== peg$FAILED) {
// @ts-ignore
            s2.push(s3);
// @ts-ignore
            if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s3 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s3 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e187); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parse__();
// @ts-ignore
          s4 = peg$parsenumeric_type_suffix();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f416(s1, s2, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseKW_NUMERIC();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_DECIMAL();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseKW_INT();
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              s1 = peg$parseKW_INTEGER();
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                s1 = peg$parseKW_SMALLINT();
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  s1 = peg$parseKW_TINYINT();
// @ts-ignore
                  if (s1 === peg$FAILED) {
// @ts-ignore
                    s1 = peg$parseKW_BIGINT();
// @ts-ignore
                    if (s1 === peg$FAILED) {
// @ts-ignore
                      s1 = peg$parseKW_FLOAT();
// @ts-ignore
                      if (s1 === peg$FAILED) {
// @ts-ignore
                        s1 = peg$parseKW_DOUBLE();
                      }
                    }
                  }
                }
              }
            }
          }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse__();
// @ts-ignore
          s3 = peg$parsenumeric_type_suffix();
// @ts-ignore
          s4 = peg$parse__();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f417(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedatetime_type() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_DATE();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_DATETIME();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_TIME();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_TIMESTAMP();
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse__();
// @ts-ignore
        s5 = [];
// @ts-ignore
        if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e187); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e187); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse__();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f418(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_DATE();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_DATETIME();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_TIME();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseKW_TIMESTAMP();
          }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f419(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseenum_type() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_ENUM();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse__();
// @ts-ignore
      s3 = peg$parsevalue_item();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f420(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsejson_type() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_JSON();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_JSONB();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f421(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsegeometry_type() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_GEOMETRY();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f422(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseserial_interval_type() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_SERIAL();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_INTERVAL();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f423(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetext_type() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_TINYTEXT();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseKW_TEXT();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_MEDIUMTEXT();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_LONGTEXT();
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseLBRAKE();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse__();
// @ts-ignore
        s4 = peg$parseRBRAKE();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f424(s1);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseKW_TINYTEXT();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseKW_TEXT();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseKW_MEDIUMTEXT();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseKW_LONGTEXT();
          }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f425(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseuuid_type() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseKW_UUID();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f426(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }


// @ts-ignore
  const reservedMap = {
// @ts-ignore
    'ALTER': true,
// @ts-ignore
    'ALL': true,
// @ts-ignore
    'ADD': true,
// @ts-ignore
    'AND': true,
// @ts-ignore
    'AS': true,
// @ts-ignore
    'ASC': true,

// @ts-ignore
    'BETWEEN': true,
// @ts-ignore
    'BY': true,

// @ts-ignore
    'CALL': true,
// @ts-ignore
    'CASE': true,
// @ts-ignore
    'CREATE': true,
// @ts-ignore
    'CONTAINS': true,
// @ts-ignore
    'CURRENT_DATE': true,
// @ts-ignore
    'CURRENT_TIME': true,
// @ts-ignore
    'CURRENT_TIMESTAMP': true,
// @ts-ignore
    'CURRENT_USER': true,

// @ts-ignore
    'DELETE': true,
// @ts-ignore
    'DESC': true,
// @ts-ignore
    'DISTINCT': true,
// @ts-ignore
    'DROP': true,

// @ts-ignore
    'ELSE': true,
// @ts-ignore
    'END': true,
// @ts-ignore
    'EXISTS': true,
// @ts-ignore
    'EXPLAIN': true,

// @ts-ignore
    'FALSE': true,
// @ts-ignore
    'FROM': true,
// @ts-ignore
    'FULL': true,

// @ts-ignore
    'GROUP': true,

// @ts-ignore
    'HAVING': true,

// @ts-ignore
    'IN': true,
// @ts-ignore
    'INNER': true,
// @ts-ignore
    'INSERT': true,
// @ts-ignore
    'INTO': true,
// @ts-ignore
    'IS': true,

// @ts-ignore
    'JOIN': true,
// @ts-ignore
    'JSON': true,

    // 'KEY': true,

// @ts-ignore
    'LEFT': true,
// @ts-ignore
    'LIKE': true,
// @ts-ignore
    'LIMIT': true,

// @ts-ignore
    'NOT': true,
// @ts-ignore
    'NULL': true,
// @ts-ignore
    'NULLS': true,

// @ts-ignore
    'ON': true,
// @ts-ignore
    'OR': true,
// @ts-ignore
    'ORDER': true,
// @ts-ignore
    'OUTER': true,

// @ts-ignore
    'RECURSIVE': true,
// @ts-ignore
    'RENAME': true,
    // 'REPLACE': true,
// @ts-ignore
    'RIGHT': true,

// @ts-ignore
    'SELECT': true,
// @ts-ignore
    'SESSION_USER': true,
// @ts-ignore
    'SET': true,
// @ts-ignore
    'SHOW': true,
// @ts-ignore
    'SYSTEM_USER': true,

// @ts-ignore
    'TABLE': true,
// @ts-ignore
    'THEN': true,
// @ts-ignore
    'TRUE': true,
// @ts-ignore
    'TRUNCATE': true,

// @ts-ignore
    'UNION': true,
// @ts-ignore
    'UPDATE': true,
// @ts-ignore
    'USING': true,

// @ts-ignore
    'VALUES': true,

// @ts-ignore
    'WITH': true,
// @ts-ignore
    'WHEN': true,
// @ts-ignore
    'WHERE': true,
// @ts-ignore
    'WINDOW': true,

// @ts-ignore
    'GLOBAL': true,
// @ts-ignore
    'SESSION': true,
// @ts-ignore
    'LOCAL': true,
// @ts-ignore
    'PERSIST': true,
// @ts-ignore
    'PERSIST_ONLY': true,
  };

// @ts-ignore
  function createUnaryExpr(op, e) {
// @ts-ignore
    return {
// @ts-ignore
      type: 'unary_expr',
// @ts-ignore
      operator: op,
// @ts-ignore
      expr: e
    };
  }

// @ts-ignore
  function createBinaryExpr(op, left, right) {
// @ts-ignore
    return {
// @ts-ignore
      type: 'binary_expr',
// @ts-ignore
      operator: op,
// @ts-ignore
      left: left,
// @ts-ignore
      right: right
    };
  }

// @ts-ignore
  function isBigInt(numberStr) {
// @ts-ignore
    const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)
// @ts-ignore
    const num = BigInt(numberStr)
// @ts-ignore
    if (num < previousMaxSafe) return false
// @ts-ignore
    return true
  }

// @ts-ignore
  function createList(head, tail, po = 3) {
// @ts-ignore
    const result = [head];
// @ts-ignore
    for (let i = 0; i < tail.length; i++) {
// @ts-ignore
      delete tail[i][po].tableList
// @ts-ignore
      delete tail[i][po].columnList
// @ts-ignore
      result.push(tail[i][po]);
    }
// @ts-ignore
    return result;
  }

// @ts-ignore
  function createBinaryExprChain(head, tail) {
// @ts-ignore
    let result = head;
// @ts-ignore
    for (let i = 0; i < tail.length; i++) {
// @ts-ignore
      result = createBinaryExpr(tail[i][1], result, tail[i][3]);
    }
// @ts-ignore
    return result;
  }

// @ts-ignore
  function queryTableAlias(tableName) {
// @ts-ignore
    const alias = tableAlias[tableName]
// @ts-ignore
    if (alias) return alias
// @ts-ignore
    if (tableName) return tableName
// @ts-ignore
    return null
  }

// @ts-ignore
  function columnListTableAlias(columnList) {
// @ts-ignore
    const newColumnsList = new Set()
// @ts-ignore
    const symbolChar = '::'
// @ts-ignore
    for(let column of columnList.keys()) {
// @ts-ignore
      const columnInfo = column.split(symbolChar)
// @ts-ignore
      if (!columnInfo) {
// @ts-ignore
        newColumnsList.add(column)
// @ts-ignore
        break
      }
// @ts-ignore
      if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])
// @ts-ignore
      newColumnsList.add(columnInfo.join(symbolChar))
    }
// @ts-ignore
    return Array.from(newColumnsList)
  }

// @ts-ignore
  function refreshColumnList(columnList) {
// @ts-ignore
    const columns = columnListTableAlias(columnList)
// @ts-ignore
    columnList.clear()
// @ts-ignore
    columns.forEach(col => columnList.add(col))
  }

// @ts-ignore
  function commonStrToLiteral(strOrLiteral) {
// @ts-ignore
    return typeof strOrLiteral === 'string' ? { type: 'same', value: strOrLiteral } : strOrLiteral
  }

// @ts-ignore
  const cmpPrefixMap = {
// @ts-ignore
    '+': true,
// @ts-ignore
    '-': true,
// @ts-ignore
    '*': true,
// @ts-ignore
    '/': true,
// @ts-ignore
    '>': true,
// @ts-ignore
    '<': true,
// @ts-ignore
    '!': true,
// @ts-ignore
    '=': true,

    //between
// @ts-ignore
    'B': true,
// @ts-ignore
    'b': true,
    //for is or in
// @ts-ignore
    'I': true,
// @ts-ignore
    'i': true,
    //for like
// @ts-ignore
    'L': true,
// @ts-ignore
    'l': true,
    //for not
// @ts-ignore
    'N': true,
// @ts-ignore
    'n': true
  };

  // used for dependency analysis
// @ts-ignore
  let varList = [];

// @ts-ignore
  const tableList = new Set();
// @ts-ignore
  const columnList = new Set();
// @ts-ignore
  const tableAlias = {};

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = MultipleStmt | CmdStmt | CrudStmt;
export type CmdStmt =
  | DropStmt
  | CreateStmt
  | TruncateStmt
  | RenameStmt
  | CallStmt
  | UseStmt
  | AlterTableStmt
  | SetStmt
  | LockStmt
  | ShowStmt;
export type CreateStmt =
  | CreateTableStmt
  | CreateConstraintTrigger
  | CreateExtensionStmt
  | CreateIndexStmt
  | CreateSequence
  | CreateDbStmt;
export type CrudStmt =
  | UnionStmt
  | UpdateStmt
  | ReplaceInsertStmt
  | InsertNoColumnsStmt
  | DeleteStmt
  | CmdStmt
  | ProcStmts;
export type MultipleStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: any[];
};
export type UnionStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: SelectStmt;
};
export type CreateExtensionStmt = {
  type: "create";
  keyword: string;
  if_not_exists: any;
  extension: any;
  with: any;
  schema: any;
  version: any;
  from: any;
};
export type CreateDbDefinition = any[];
export type CreateDbStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: any;
    keyword: "database";
    if_not_exists: any;
    database: IdentName;
    create_definitions: CreateDbDefinition | null;
  };
};
export type CreateTableStmt =
  | {
      tableList: unknown[];
      columnList: unknown[];
      ast: {
        type: any;
        keyword: "table";
        temporary: any;
        if_not_exists: any;
        table: TableRefList;
        ignore_replace: any;
        as: any;
        query_expr: any;
        create_definitions: CreateTableDefinition;
        table_options: TableOptions | null;
      };
    }
  | {
      tableList: unknown[];
      columnList: unknown[];
      ast: {
        type: any;
        keyword: "table";
        temporary: any;
        if_not_exists: any;
        table: TableRefList;
        like: CreateLikeTable;
      };
    };
export type CreateSequence = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: any;
    keyword: "sequence";
    temporary: any;
    if_not_exists: any;
    sequence: [TableName];
    create_definitions: CreateSequenceDefinitionList | null;
  };
};
export type SequenceDefinitionIncrement = {
  resource: "sequence";
  prefix: string;
  value: LiteralNumeric;
};
export type SequenceDefinitionMinval =
  | { resource: "sequence"; prefix: string; value: LiteralNumeric }
  | { resource: "sequence"; value: { type: "origin"; value: "no minvalue" } };
export type SequenceDefinitionMaxval =
  | { resource: "sequence"; prefix: string; value: LiteralNumeric }
  | { resource: "sequence"; value: { type: "origin"; value: "no maxvalue" } };
export type SequenceDefinitionStart = {
  resource: "sequence";
  prefix: string;
  value: LiteralNumeric;
};
export type SequenceDefinitionCache = {
  resource: "sequence";
  prefix: string;
  value: LiteralNumeric;
};
export type SequenceDefinitionCycle = {
  resource: "sequence";
  value: { type: "origin"; value: "no cycle" | "cycle" };
};
export type SequenceDefinitionOwned =
  | {
      resource: "sequence";
      prefix: "owned by";
      value: { type: "origin"; value: "none" };
    }
  | { resource: "sequence"; prefix: "owned by"; value: ColumnRef };
export type CreateSequenceDefinition =
  | SequenceDefinitionIncrement
  | SequenceDefinitionMinval
  | SequenceDefinitionMaxval
  | SequenceDefinitionStart
  | SequenceDefinitionCache
  | SequenceDefinitionCycle
  | SequenceDefinitionOwned;
export type CreateSequenceDefinitionList = any[];
export type CreateIndexStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: any;
    index_type: any;
    keyword: any;
    concurrently: any;
    index: Ident | null;
    on_kw: any;
    table: TableName;
    index_using: IndexType | null;
    index_columns: ColumnOrderList;
    with: any;
    with_before_where: true;
    tablespace: { type: string; value: IdentName };
    where: WhereClause | null;
  };
};
export type ColumnOrderList = any[];
export type ColumnOrder = {
  column: Expr;
  collate: CollateExpr | null;
  opclass: Ident | null;
  order: any;
  nulls: string;
};
export type CreateLikeTableSimple = { type: "like"; table: TableRefList };
export type CreateLikeTable = CreateLikeTableParen | CreateLikeTableSimple;
export type CreateLikeTableParen = {
  type: "like";
  table: any;
  parentheses: true;
};
export type CreateTableDefinition = any[];
export type CreateDefinition =
  | CreateColumnDefinition
  | CreateIndexDefinition
  | CreateFulltextSpatialIndexDefinition
  | CreateConstraintDefinition;
export type ColumnDefinitionOpt =
  | ColumnConstraint
  | { auto_increment: string }
  | { unique_or_primary: string }
  | { comment: KeywordComment }
  | { collate: CollateExpr }
  | { column_format: ColumnFormat }
  | { storage: Storage }
  | { reference_definition: ReferenceDefinition }
  | {
      character_set: {
        type: CreateOptionCharacterSetKw;
        value: IdentName;
        symbol: KWASSIGINEQUAL | null;
      };
    };
export type ColumnDefinitionOptList = ColumnDefinitionOpt;
export type CreateColumnDefinition = {
  column: ColumnRef;
  definition: DataType;
  resource: "column";
};
export type ColumnConstraint =
  | { default_val: DefaultExpr | null; nullable: LiteralNotNull | LiteralNull }
  | {
      default_val: DefaultExpr;
      nullable: (LiteralNotNull | LiteralNull) | null;
    };
export type CollateExpr = {
  type: "collate";
  symbol: KWASSIGINEQUAL | null;
  value: Ident;
};
export type ColumnFormat = { type: "column_format"; value: string };
export type Storage = { type: "storage"; value: string };
export type DefaultExpr = { type: "default"; value: Literal | Expr };
export type DropIndexOpt = any[];
export type DropStmt =
  | {
      tableList: unknown[];
      columnList: unknown[];
      ast: { type: any; keyword: any; name: TableRefList };
    }
  | {
      tableList: unknown[];
      columnList: unknown[];
      ast: {
        type: any;
        keyword: any;
        name: ColumnRef;
        table: TableName;
        options: DropIndexOpt | null;
      };
    };
export type TruncateStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: { type: any; keyword: any; name: TableRefList };
};
export type UseStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: { type: "use"; db: Ident };
};
export type AlterTableStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: { type: "alter"; table: TableRefList; expr: AlterActionList };
};
export type AlterActionList = any[];
export type AlterAction =
  | ALTERADDCOLUMN
  | ALTERDROPCOLUMN
  | ALTERADDINDEXORKEY
  | ALTERADDFULLETXTSPARITALINDEX
  | ALTERRENAMETABLE
  | ALTERALGORITHM
  | ALTERLOCK;
export type ALTERADDCOLUMN = { action: "add" } & CreateColumnDefinition & {
    keyword: KWCOLUMN | null;
    resource: "column";
    type: "alter";
  };
export type ALTERDROPCOLUMN = {
  action: "drop";
  column: ColumnRef;
  keyword: KWCOLUMN | null;
  resource: "column";
  type: "alter";
};
export type ALTERADDINDEXORKEY = {
  action: "add";
  type: "alter";
} & CreateIndexDefinition;
export type ALTERRENAMETABLE = {
  action: "rename";
  type: "alter";
  resource: "table";
  keyword: any;
  table: Ident;
};
export type ALTERALGORITHM = {
  type: "alter";
  keyword: "algorithm";
  resource: "algorithm";
  symbol: KWASSIGINEQUAL | null;
  algorithm: string;
};
export type ALTERLOCK = {
  type: "alter";
  keyword: "lock";
  resource: "lock";
  symbol: KWASSIGINEQUAL | null;
  lock: string;
};
export type CreateIndexDefinition = {
  index: Column | null;
  definition: CteColumnDefinition;
  keyword: any;
  index_type: IndexType | null;
  resource: "index";
  index_options: IndexOptions | null;
};
export type CreateFulltextSpatialIndexDefinition = {
  index: Column | null;
  definition: CteColumnDefinition;
  keyword: any;
  index_options: IndexOptions | null;
  resource: "index";
};
export type CreateConstraintDefinition =
  | CreateConstraintPrimary
  | CreateConstraintUnique
  | CreateConstraintForeign;
export type ConstraintName = { keyword: any; constraint: Ident | null };
export type CreateConstraintPrimary = {
  constraint: any;
  definition: CteColumnDefinition;
  constraint_type: string;
  keyword: any;
  index_type: IndexType | null;
  resource: "constraint";
  index_options: IndexOptions | null;
};
export type CreateConstraintUnique = {
  constraint: any;
  definition: CteColumnDefinition;
  constraint_type: any;
  keyword: any;
  index_type: IndexType | null;
  index: Column | null;
  resource: "constraint";
  index_options: IndexOptions | null;
};
export type CreateConstraintForeign = {
  constraint: any;
  definition: CteColumnDefinition;
  constraint_type: string;
  keyword: any;
  index: Column | null;
  resource: "constraint";
  reference_definition: ReferenceDefinition | null;
};
export type ReferenceDefinition = {
  definition: CteColumnDefinition;
  table: TableRefList;
  keyword: any;
  match: string;
  on_delete: OnReference | null;
  on_update: OnReference | null;
};
export type OnReference = { type: string; value: ReferenceOption };
export type ReferenceOption = string;
export type CreateConstraintTrigger = {
  type: "create";
  constraint: IdentName;
  location: string;
  events: TriggerEventList;
  table: TableName;
  from: any;
  deferrable: TriggerDeferrable | null;
  for_each: TriggerForRow | null;
  when: TriggerWhen | null;
  execute: { keyword: "execute procedure"; expr: ProcFuncCall };
  constraint_type: string;
  keyword: string;
  constraint_kw: any;
  resource: "constraint";
};
export type TriggerEvent =
  | { keyword: any }
  | { keyword: any; args: { keyword: string; columns: ColumnRefList } };
export type TriggerEventList = any[];
export type TriggerDeferrable = { keyword: string; args: string };
export type TriggerForRow = { keyword: string; args: string };
export type TriggerWhen = { type: "when"; cond: Expr; parentheses: true };
export type TableOptions = any[];
export type CreateOptionCharacterSetKw = "CHARACTER SET";
export type CreateOptionCharacterSet = {
  keyword: any;
  symbol: KWASSIGINEQUAL | null;
  value: IdentName;
};
export type TableOption =
  | { keyword: string; symbol: KWASSIGINEQUAL | null; value: any }
  | CreateOptionCharacterSet
  | { keyword: any; symbol: KWASSIGINEQUAL | null; value: `'${any}'` }
  | { keyword: string; symbol: KWASSIGINEQUAL | null; value: string };
export type ALTERADDFULLETXTSPARITALINDEX = {
  action: "add";
  type: "alter";
} & CreateFulltextSpatialIndexDefinition;
export type RenameStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: { type: "rename"; table: TableToList };
};
export type SetStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: { type: "set"; expr: AssignStmt };
};
export type LockMode = { mode: `in ${string} mode` };
export type LockStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: "lock";
    keyword: any;
    tables: any;
    lock_mode: LockMode | null;
    nowait: string | null;
  };
};
export type CallStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: { type: "call"; expr: ProcFuncCall };
};
export type ShowStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: { type: "show"; keyword: "tables" };
};
export type SelectStmt = SelectStmtNake | any;
export type WithClause = any[] | [CteDefinition];
export type CteDefinition = {
  name: LiteralString | IdentName;
  stmt: UnionStmt;
  columns: CteColumnDefinition | null;
};
export type CteColumnDefinition = any[];
export type DistinctOn =
  | { type: `${KWDISTINCT} ON`; columns: ColumnRefList }
  | { type: KWDISTINCT | null };
export type SelectStmtNake = {
  with: WithClause | null;
  type: "select";
  options: OptionClause | null;
  distinct: DistinctOn | null;
  columns: ColumnClause;
  from: FromClause | null;
  where: WhereClause | null;
  groupby: GroupByClause | null;
  having: HavingClause | null;
  orderby: OrderByClause | null;
  limit: LimitClause | null;
  window: WindowClause | null;
};
export type OptionClause = QueryOption[];
export type QueryOption =
  | OPTSQLCALCFOUNDROWS
  | (OPTSQLCACHE | OPTSQLNOCACHE)
  | OPTSQLBIGRESULT
  | OPTSQLSMALLRESULT
  | OPTSQLBUFFERRESULT;
export type ColumnClause = any | any[];
export type ArrayIndex = { brackets: true; number: Number_1 };
export type ExprItem = Expr;
export type ColumnListItem =
  | { expr: StringConstantsEscape; as: null }
  | {
      as: AliasClause | null;
      type: "cast";
      expr: ExprItem;
      symbol: "::";
      target: DataType;
      tail: { operator: any; expr: ExprItem };
    }
  | {
      type: "star_ref";
      expr: { type: "column_ref"; table: Ident; column: "*" };
      as: null;
    }
  | { type: "expr"; expr: ExprItem; as: AliasClause | null };
export type AliasClause = AliasIdent | Ident;
export type FromClause = TableRefList;
export type TableToList = any[];
export type TableToItem = [TableName, TableName];
export type IndexType = { keyword: "using"; type: string };
export type IndexOptionsList = any[];
export type IndexOptions = IndexOption[];
export type IndexOption =
  | { type: any; symbol: KWASSIGINEQUAL | null; expr: LiteralNumeric }
  | {
      type: any;
      symbol: KWASSIGINEQUAL;
      expr:
        | (LiteralNumeric | Ident)
        | { type: string; value: (LiteralNumeric | Ident) & string };
    }
  | IndexType
  | { type: "with parser"; expr: IdentName }
  | { type: string; expr: string }
  | KeywordComment;
export type TableRefList = TableRef[];
export type TableRef = TableBase | TableJoin;
export type TableJoin =
  | TableBase
  | {
      expr: UnionStmt;
      as: AliasClause | null;
      join: JoinOp;
      on: OnClause | null;
    };
export type TableBase =
  | { type: "dual" }
  | { expr: { type: "values"; values: ValueClause }; as: AliasClause | null }
  | { expr: UnionStmt | ValueClause; as: AliasClause | null }
  | { type: "expr"; expr: FuncCall; as: AliasClause | null }
  | (TableName & {
      as: AliasClause | null;
      tablesample: { expr: FuncCall; repeatable: any };
    })
  | TableName;
export type JoinOp = "LEFT JOIN" | "RIGHT JOIN" | "FULL JOIN" | "INNER JOIN";
export type TableName =
  | { db: null; table: Ident }
  | { db: Ident; table: "*" }
  | VarDecl;
export type OnClause = Expr;
export type WhereClause = OrAndWhereExpr;
export type GroupByClause = any;
export type ColumnRefList = any[];
export type HavingClause = Expr;
export type WindowClause = {
  keyword: "window";
  type: "window";
  expr: NamedWindowExprList;
};
export type NamedWindowExprList = any[];
export type NamedWindowExpr = {
  name: IdentName;
  as_window_specification: AsWindowSpecification;
};
export type AsWindowSpecification =
  | IdentName
  | { window_specification: {}; parentheses: true };
export type WindowSpecification = {
  name: null;
  partitionby: PartitionByClause | null;
  orderby: OrderByClause | null;
  window_frame_clause: WindowFrameClause | null;
};
export type WindowSpecificationFrameless = {
  name: null;
  partitionby: PartitionByClause | null;
  orderby: OrderByClause | null;
  window_frame_clause: null;
};
export type WindowFrameClause = string;
export type WindowFrameFollowing = WindowFrameValue | WindowFrameCurrentRow;
export type WindowFramePreceding = WindowFrameValue | WindowFrameCurrentRow;
export type WindowFrameCurrentRow = {
  type: "single_quote_string";
  value: "current row";
};
export type WindowFrameValue =
  | { type: "single_quote_string"; value: string }
  | LiteralNumeric;
export type PartitionByClause = ColumnClause;
export type OrderByClause = OrderByList;
export type OrderByList = any[];
export type OrderByElement = { expr: Expr; type: string };
export type NumberOrParam = LiteralNumeric | Param;
export type LimitClause = { seperator: any; value: any[] };
export type UpdateStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: "update";
    table: TableRefList;
    set: SetList;
    where: WhereClause | null;
    returning: ReturningStmt | null;
  };
};
export type DeleteStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: "delete";
    table: TableRefList | null;
    from: FromClause;
    where: WhereClause | null;
  };
};
export type SetList = any[];
export type SetItem =
  | { column: Column; value: AdditiveExpr; table: any }
  | { column: Column; value: ColumnRef; table: any; keyword: "values" };
export type ReturningStmt = {
  type: any;
  columns:
    | (STAR | ColumnRefList)
    | { type: string; table: null; column: string }[];
};
export type InsertValueClause = ValueClause | SelectStmtNake;
export type InsertPartition = any[] | ValueItem;
export type ReplaceInsertStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: ReplaceInsert;
    table: [TableName];
    columns: ColumnList;
    values: InsertValueClause;
    partition: InsertPartition | null;
    returning: ReturningStmt | null;
  };
};
export type InsertNoColumnsStmt = {
  tableList: unknown[];
  columnList: unknown[];
  ast: {
    type: ReplaceInsert;
    table: [TableName];
    columns: null;
    values: InsertValueClause;
    partition: InsertPartition | null;
    returning: ReturningStmt | null;
  };
};
export type ReplaceInsert = "insert" | "replace";
export type ValueClause = ValueList;
export type ValueList = any[];
export type ValueItem = ExprList;
export type ExprList = { type: string };
export type IntervalExpr =
  | { type: "interval"; expr: Expr; unit: any }
  | { type: "interval"; expr: LiteralString; unit: "" };
export type CaseExpr =
  | { type: "case"; expr: null; args: CaseWhenThen[] }
  | { type: "case"; expr: Expr; args: CaseWhenThen[] };
export type CaseWhenThen = { type: "when"; cond: OrAndWhereExpr; result: Expr };
export type CaseElse = { type: "else"; result: Expr };
export type Expr = LogicOperatorExpr | OrExpr | UnaryExpr | SelectStmt;
export type LogicOperatorExpr = any;
export type UnaryExpr = { type: string; operator: any; expr: any };
export type OrAndWhereExpr = Expr | { type: string };
export type OrExpr = any;
export type AndExpr = any;
export type NotExpr =
  | ComparisonExpr
  | ExistsExpr
  | { type: string; operator: any; expr: any };
export type ComparisonExpr = any | LiteralString | ColumnRef;
export type ExistsExpr = { type: string; operator: any; expr: any };
export type ExistsOp = string | KWEXISTS;
export type ComparisonOpRight =
  | ArithmeticOpRight
  | InOpRight
  | BetweenOpRight
  | IsOpRight
  | LikeOpRight
  | JsonbOpRight;
export type ArithmeticOpRight = {
  type: "arithmetic";
  tail: [__, ArithmeticComparisonOperator, __, AdditiveExpr][];
};
export type ArithmeticComparisonOperator =
  | ">="
  | ">"
  | "<="
  | "<>"
  | "<"
  | "="
  | "!=";
export type IsOpRight =
  | { op: "IS"; right: AdditiveExpr }
  | { op: "IS"; right: { type: "default"; value: `DISTINCT FROM ${string}` } }
  | { op: "IS NOT"; right: AdditiveExpr };
export type BetweenOpRight = {
  op: BetweenOrNotBetweenOp;
  right: { type: "expr_list"; value: [AdditiveExpr, AdditiveExpr] };
};
export type BetweenOrNotBetweenOp = string | KWBETWEEN;
export type LikeOp = string | KWLIKE | KWILIKE | "SIMILAR TO";
export type InOp = string | KWIN;
export type LikeOpRight = { op: LikeOp; right: Literal | ComparisonExpr };
export type InOpRight =
  | { op: InOp; right: ExprList }
  | { op: InOp; right: VarDecl | LiteralString };
export type JsonbOpRight = {
  op:
    | "@>"
    | "<@"
    | OPERATORCONCATENATION
    | DOUBLEWELLARROW
    | WELLARROW
    | "?"
    | "?|"
    | "?&"
    | "#-";
  right: any;
};
export type AdditiveExpr = any;
export type AdditiveOperator = "+" | "-";
export type MultiplicativeExpr = any;
export type MultiplicativeOperator = "*" | "/" | "%";
export type Primary =
  | CastExpr
  | Literal
  | AggrFunc
  | WindowFunc
  | FuncCall
  | CaseExpr
  | IntervalExpr
  | ColumnRef
  | Param
  | OrAndWhereExpr
  | VarDecl
  | { type: "origin"; value: `$<${any}>` }
  | { type: "origin"; value: `$${any}` };
export type StringConstantsEscape = { type: "origin"; value: `E'${string}'` };
export type ColumnRef =
  | StringConstantsEscape
  | { type: "column_ref"; table: Ident; column: "*" }
  | {
      type: "column_ref";
      table: any;
      column: Column;
      arrow: DOUBLEARROW | SINGLEARROW;
      property: LiteralString | LiteralNumeric;
    }
  | { type: "column_ref"; schema: Ident; table: Ident; column: Column }
  | { type: "column_ref"; table: Ident; column: Column }
  | { type: "column_ref"; table: null; column: Column };
export type ColumnList = any[];
export type Ident = IdentName | QuotedIdent;
export type AliasIdent = string | IdentName | QuotedIdent;
export type QuotedIdent =
  | DoubleQuotedIdent
  | SingleQuotedIdent
  | BackticksQuotedIdent;
export type DoubleQuotedIdent = string;
export type SingleQuotedIdent = string;
export type BackticksQuotedIdent = string;
export type Column = ColumnName | QuotedIdent;
export type ColumnName = string;
export type IdentName = string;
export type IdentStart = string;
export type IdentPart = string;
export type ColumnPart = string;
export type Param = { type: "param"; value: IdentName };
export type OnUpdateCurrentTimestamp =
  | {
      type: "on update";
      keyword: KWCURRENTTIMESTAMP;
      parentheses: true;
      expr: ExprList | null;
    }
  | { type: "on update"; keyword: KWCURRENTTIMESTAMP };
export type OverPartition =
  | { type: "window"; as_window_specification: AsWindowSpecification }
  | { partitionby: PartitionByClause | null; orderby: OrderByClause | null }
  | OnUpdateCurrentTimestamp;
export type AggrFunc = AggrFunCount | AggrFunSmma | AggrArrayAgg;
export type WindowFunc = WindowFunRank | WindowFunLaglead | WindowFunFirstlast;
export type WindowFunRank = {
  type: "window_func";
  name: KWWINFNSRANK;
  over: OverPartition;
};
export type WindowFunLaglead = {
  type: "window_func";
  name: KWLAGLEAD;
  args: ExprList;
  over: OverPartition;
  consider_nulls: ConsiderNullsClause | null;
};
export type WindowFunFirstlast = {
  type: "window_func";
  name: KWFIRSTLASTVALUE;
  args: { type: "expr_list"; value: [Expr] };
  over: OverPartition;
  consider_nulls: ConsiderNullsClause | null;
};
export type KWFIRSTLASTVALUE = string;
export type KWWINFNSRANK = string;
export type KWLAGLEAD = string;
export type ConsiderNullsClause = string;
export type AggrFunSmma = {
  type: "aggr_func";
  name: KWSUMMAXMINAVG;
  args: { expr: AdditiveExpr };
  over: OverPartition | null;
};
export type KWSUMMAXMINAVG = KWSUM | KWMAX | KWMIN | KWAVG;
export type AggrFunCount =
  | {
      type: "aggr_func";
      name: KWCOUNT | KWGROUPCONCAT;
      args: CountArg;
      over: OverPartition | null;
    }
  | {
      type: "aggr_func";
      name: string;
      args: { expr: LiteralNumeric | LiteralArray };
      within_group_orderby: OrderByClause;
      over: OverPartition | null;
    }
  | {
      type: "aggr_func";
      name: string;
      args: { expr: {} };
      within_group_orderby: OrderByClause;
      over: OverPartition | null;
    };
export type DistinctArgs =
  | { distinct: KWDISTINCT | null; expr: ColumnRef }
  | { distinct: KWDISTINCT | null; expr: Expr; orderby: OrderByClause | null };
export type CountArg = { expr: StarExpr } | DistinctArgs;
export type AggrArrayAgg = {
  type: "aggr_func";
  name: KWARRAYAGG;
  args: DistinctArgs;
  orderby: OrderByClause | null;
};
export type StarExpr = { type: "star"; value: "*" };
export type FuncCall =
  | {
      type: "function";
      name: ProcFuncName;
      args:
        | NonNullable<OrAndWhereExpr | null>
        | { type: string; value: never[] };
    }
  | {
      type: "function";
      name: ScalarFunc;
      args: NonNullable<ExprList | null> | { type: string; value: never[] };
      over: OverPartition | null;
    }
  | ExtractFunc
  | {
      type: "function";
      name: ScalarFunc;
      over: OnUpdateCurrentTimestamp | null;
    };
export type ExtractFiled = string | any;
export type ExtractFunc = {
  type: any;
  args: {
    field: ExtractFiled;
    cast_type: (KWTIMESTAMP | KWINTERVAL | KWTIME | KWDATE) | null;
    source: Expr;
  };
};
export type ScalarFunc =
  | KWCURRENTDATE
  | KWCURRENTTIME
  | KWCURRENTTIMESTAMP
  | KWCURRENTUSER
  | KWUSER
  | KWSESSIONUSER
  | KWSYSTEMUSER;
export type CastExpr =
  | {
      as: AliasClause | null;
      type: "cast";
      expr:
        | Literal
        | AggrFunc
        | WindowFunc
        | FuncCall
        | CaseExpr
        | IntervalExpr
        | ColumnRef
        | Param;
      symbol: "::";
      target: DataType;
    }
  | { type: "cast"; expr: Expr; symbol: "as"; target: DataType }
  | { type: "cast"; expr: Expr; symbol: "as"; target: { dataType: string } };
export type Signedness = KWSIGNED | KWUNSIGNED;
export type Literal =
  | LiteralString
  | LiteralNumeric
  | LiteralBool
  | LiteralNull
  | LiteralDatetime
  | LiteralArray;
export type LiteralArray = {
  expr_list: NonNullable<ExprList | null> | { type: string; value: string };
  type: "array";
  keyword: "array";
  brackets: true;
};
export type LiteralList = any[];
export type LiteralNull = { type: "null"; value: null };
export type LiteralNotNull = { type: "not null"; value: "not null" };
export type LiteralBool =
  | { type: "bool"; value: true }
  | { type: "bool"; value: false };
export type LiteralString =
  | { type: "single_quote_string"; value: string }
  | { type: "double_quote_string"; value: string };
export type LiteralDatetime = { type: any; value: string };
export type SingleQuoteChar = string | EscapeChar;
export type SingleChar = string | EscapeChar;
export type EscapeChar =
  | "\\'"
  | '\\"'
  | "\\\\"
  | "\\/"
  | "\b"
  | "\f"
  | "\n"
  | "\r"
  | "\t"
  | string
  | "\\"
  | "''";
export type LineTerminator = string;
export type LiteralNumeric =
  | NonNullable<Number_1>
  | { type: "number"; value: Number_1 };
export type Number_1 =
  | { type: "bigint"; value: number }
  | (number | { type: string; value: number })
  | (number | { type: string; value: Int });
export type Int = Digits | Digit | string;
export type Frac = string;
export type Exp = number;
export type Digits = string;
export type Digit = string;
export type HexDigit = string;
export type E = string;
export type KWNULL = [string, undefined];
export type KWDEFAULT = [string, undefined];
export type KWNOTNULL = [string, undefined];
export type KWTRUE = [string, undefined];
export type KWTO = [string, undefined];
export type KWFALSE = [string, undefined];
export type KWSHOW = [string, undefined];
export type KWDROP = "DROP";
export type KWUSE = [string, undefined];
export type KWALTER = [string, undefined];
export type KWSELECT = [string, undefined];
export type KWUPDATE = [string, undefined];
export type KWCREATE = [string, undefined];
export type KWTEMPORARY = "TEMPORARY";
export type KWTEMP = "TEMP";
export type KWIFNOTEXISTS = [string, undefined];
export type KWDELETE = [string, undefined];
export type KWINSERT = [string, undefined];
export type KWRECURSIVE = ["RECURSIVE", undefined];
export type KWREPLACE = [string, undefined];
export type KWRETURNING = "RETURNING";
export type KWRENAME = [string, undefined];
export type KWIGNORE = [string, undefined];
export type KWEXPLAIN = [string, undefined];
export type KWPARTITION = "PARTITION";
export type KWINTO = [string, undefined];
export type KWFROM = [string, undefined];
export type KWSET = [string, undefined];
export type KWLOCK = [string, undefined];
export type KWAS = [string, undefined];
export type KWTABLE = "TABLE";
export type KWDATABASE = "DATABASE";
export type KWSCHEME = "SCHEME";
export type KWSEQUENCE = "SEQUENCE";
export type KWTABLESPACE = "TABLESPACE";
export type KWCOLLATE = "COLLATE";
export type KWON = [string, undefined];
export type KWLEFT = [string, undefined];
export type KWRIGHT = [string, undefined];
export type KWFULL = [string, undefined];
export type KWINNER = [string, undefined];
export type KWJOIN = [string, undefined];
export type KWOUTER = [string, undefined];
export type KWUNION = [string, undefined];
export type KWVALUES = [string, undefined];
export type KWUSING = [string, undefined];
export type KWWHERE = [string, undefined];
export type KWWITH = [string, undefined];
export type KWGROUP = [string, undefined];
export type KWBY = [string, undefined];
export type KWORDER = [string, undefined];
export type KWHAVING = [string, undefined];
export type KWWINDOW = [string, undefined];
export type KWLIMIT = [string, undefined];
export type KWOFFSET = "OFFSET";
export type KWASC = "ASC";
export type KWDESC = "DESC";
export type KWALL = "ALL";
export type KWDISTINCT = "DISTINCT";
export type KWBETWEEN = "BETWEEN";
export type KWIN = "IN";
export type KWIS = "IS";
export type KWLIKE = "LIKE";
export type KWILIKE = "ILIKE";
export type KWEXISTS = "EXISTS";
export type KWNOT = "NOT";
export type KWAND = "AND";
export type KWOR = "OR";
export type KWARRAY = "ARRAY";
export type KWARRAYAGG = "ARRAY_AGG";
export type KWCOUNT = "COUNT";
export type KWGROUPCONCAT = "GROUP_CONCAT";
export type KWMAX = "MAX";
export type KWMIN = "MIN";
export type KWSUM = "SUM";
export type KWAVG = "AVG";
export type KWEXTRACT = "EXTRACT";
export type KWCALL = "CALL";
export type KWCASE = [string, undefined];
export type KWWHEN = [string, undefined];
export type KWTHEN = [string, undefined];
export type KWELSE = [string, undefined];
export type KWEND = [string, undefined];
export type KWCAST = [string, undefined];
export type KWBOOL = "BOOL";
export type KWBOOLEAN = "BOOLEAN";
export type KWCHAR = "CHAR";
export type KWVARCHAR = "VARCHAR";
export type KWNUMERIC = "NUMERIC";
export type KWDECIMAL = "DECIMAL";
export type KWSIGNED = "SIGNED";
export type KWUNSIGNED = "UNSIGNED";
export type KWINT = "INT";
export type KWZEROFILL = "ZEROFILL";
export type KWINTEGER = "INTEGER";
export type KWJSON = "JSON";
export type KWJSONB = "JSONB";
export type KWGEOMETRY = "GEOMETRY";
export type KWSMALLINT = "SMALLINT";
export type KWSERIAL = "SERIAL";
export type KWTINYINT = "TINYINT";
export type KWTINYTEXT = "TINYTEXT";
export type KWTEXT = "TEXT";
export type KWMEDIUMTEXT = "MEDIUMTEXT";
export type KWLONGTEXT = "LONGTEXT";
export type KWBIGINT = "BIGINT";
export type KWENUM = "ENUM";
export type KWFLOAT = "FLOAT";
export type KWDOUBLE = "DOUBLE";
export type KWDATE = "DATE";
export type KWDATETIME = "DATETIME";
export type KWROWS = "ROWS";
export type KWTIME = "TIME";
export type KWTIMESTAMP = "TIMESTAMP";
export type KWTRUNCATE = "TRUNCATE";
export type KWUSER = "USER";
export type KWUUID = "UUID";
export type KWCURRENTDATE = "CURRENT_DATE";
export type KWADDDATE = "ADDDATE";
export type KWINTERVAL = "INTERVAL";
export type KWUNITYEAR = "YEAR";
export type KWUNITMONTH = "MONTH";
export type KWUNITDAY = "DAY";
export type KWUNITHOUR = "HOUR";
export type KWUNITMINUTE = "MINUTE";
export type KWUNITSECOND = "SECOND";
export type KWCURRENTTIME = "CURRENT_TIME";
export type KWCURRENTTIMESTAMP = "CURRENT_TIMESTAMP";
export type KWCURRENTUSER = "CURRENT_USER";
export type KWSESSIONUSER = "SESSION_USER";
export type KWSYSTEMUSER = "SYSTEM_USER";
export type KWGLOBAL = "GLOBAL";
export type KWSESSION = "SESSION";
export type KWLOCAL = "LOCAL";
export type KWPERSIST = "PERSIST";
export type KWPERSISTONLY = "PERSIST_ONLY";
export type KWVARPREAT = "@";
export type KWVARPREATAT = "@@";
export type KWVARPREDOLLAR = "$";
export type KWVARPRE = KWVARPREATAT | KWVARPREAT | KWVARPREDOLLAR;
export type KWRETURN = string;
export type KWASSIGN = ":=";
export type KWDOUBLECOLON = "::";
export type KWASSIGINEQUAL = "=";
export type KWDUAL = string;
export type KWADD = "ADD";
export type KWCOLUMN = "COLUMN";
export type KWINDEX = "INDEX";
export type KWKEY = "KEY";
export type KWFULLTEXT = "FULLTEXT";
export type KWSPATIAL = "SPATIAL";
export type KWUNIQUE = "UNIQUE";
export type KWKEYBLOCKSIZE = "KEY_BLOCK_SIZE";
export type KWCOMMENT = "COMMENT";
export type KWCONSTRAINT = "CONSTRAINT";
export type KWCONCURRENTLY = "CONCURRENTLY";
export type KWREFERENCES = "REFERENCES";
export type OPTSQLCALCFOUNDROWS = string;
export type OPTSQLCACHE = string;
export type OPTSQLNOCACHE = string;
export type OPTSQLSMALLRESULT = string;
export type OPTSQLBIGRESULT = string;
export type OPTSQLBUFFERRESULT = string;
export type DOT = ".";
export type COMMA = ",";
export type STAR = "*";
export type LPAREN = "(";
export type RPAREN = ")";
export type LBRAKE = "[";
export type RBRAKE = "]";
export type SEMICOLON = ";";
export type SINGLEARROW = "->";
export type DOUBLEARROW = "->>";
export type WELLARROW = "#>";
export type DOUBLEWELLARROW = "#>>";
export type OPERATORCONCATENATION = "||";
export type OPERATORAND = "&&";
export type LOGICOPERATOR = OPERATORCONCATENATION | OPERATORAND;
export type __ = (Whitespace | Comment)[];
export type ___ = (Whitespace | Comment)[];
export type Comment = BlockComment | LineComment;
export type BlockComment = ["/*", [undefined, Char][], "*/"];
export type LineComment = ["--", [undefined, Char][]];
export type PoundSignComment = ["#", [undefined, Char][]];
export type KeywordComment = {
  type: any;
  keyword: any;
  symbol: KWASSIGINEQUAL | null;
  value: LiteralString;
};
export type Char = string;
export type IntervalUnit =
  | KWUNITYEAR
  | KWUNITMONTH
  | KWUNITDAY
  | KWUNITHOUR
  | KWUNITMINUTE
  | KWUNITSECOND;
export type Whitespace = string;
export type EOL = EOF | string[];
export type EOF = undefined;
export type ProcStmts = ProcStmt[];
export type ProcStmt = {
  type: "proc";
  stmt: AssignStmt | ReturnStmt;
  vars: any[];
};
export type AssignStmt = {
  type: "assign";
  left: VarDecl | WithoutPrefixVarDecl;
  symbol: KWASSIGN | KWASSIGINEQUAL;
  right: ProcExpr;
};
export type ReturnStmt = { type: "return"; expr: ProcExpr };
export type ProcExpr = SelectStmt | ProcJoin | ProcAdditiveExpr | ProcArray;
export type ProcAdditiveExpr = any;
export type ProcMultiplicativeExpr = any;
export type ProcJoin = {
  type: "join";
  ltable: VarDecl;
  rtable: VarDecl;
  op: JoinOp;
  on: OnClause;
};
export type ProcPrimary =
  | Literal
  | VarDecl
  | ProcFuncCall
  | Param
  | ProcAdditiveExpr;
export type ProcFuncName = IdentName;
export type ProcFuncCall =
  | {
      type: "function";
      name: ProcFuncName;
      args: { type: "expr_list"; value: ProcPrimaryList | null };
    }
  | { type: "function"; name: ProcFuncName; args: null };
export type ProcPrimaryList = any[];
export type ProcArray = { type: "array"; value: ProcPrimaryList };
export type VarDecl = { type: "var" } & WithoutPrefixVarDecl & {
    prefix: KWVARPRE;
  };
export type WithoutPrefixVarDecl = {
  type: "var";
  name: IdentName;
  members: MemChain;
  prefix: null;
};
export type MemChain = any[];
export type DataType =
  | ArrayType
  | CharacterStringType
  | NumericType
  | DatetimeType
  | JsonType
  | GeometryType
  | TextType
  | UuidType
  | BooleanType
  | EnumType
  | SerialIntervalType;
export type ArrayType = any;
export type BooleanType = { dataType: KWBOOL | KWBOOLEAN };
export type CharacterStringType =
  | { dataType: KWCHAR | KWVARCHAR; length: number }
  | { dataType: KWCHAR }
  | { dataType: KWVARCHAR };
export type NumericTypeSuffix = (
  | NonNullable<KWUNSIGNED | null>
  | NonNullable<KWZEROFILL | null>
)[];
export type NumericType =
  | {
      dataType:
        | KWNUMERIC
        | KWDECIMAL
        | KWINT
        | KWINTEGER
        | KWSMALLINT
        | KWTINYINT
        | KWBIGINT
        | KWFLOAT
        | KWDOUBLE;
      length: number;
      scale: number;
      parentheses: true;
      suffix: NumericTypeSuffix | null;
    }
  | {
      dataType:
        | KWNUMERIC
        | KWDECIMAL
        | KWINT
        | KWINTEGER
        | KWSMALLINT
        | KWTINYINT
        | KWBIGINT
        | KWFLOAT
        | KWDOUBLE;
      length: number;
      suffix: NumericTypeSuffix | null;
    }
  | {
      dataType:
        | KWNUMERIC
        | KWDECIMAL
        | KWINT
        | KWINTEGER
        | KWSMALLINT
        | KWTINYINT
        | KWBIGINT
        | KWFLOAT
        | KWDOUBLE;
      suffix: NumericTypeSuffix | null;
    };
export type DatetimeType =
  | { dataType: KWDATE | KWDATETIME | KWTIME | KWTIMESTAMP; length: number }
  | { dataType: KWDATE | KWDATETIME | KWTIME | KWTIMESTAMP };
export type EnumType = { dataType: KWENUM; expr: ValueItem };
export type JsonType = { dataType: KWJSON | KWJSONB };
export type GeometryType = { dataType: KWGEOMETRY };
export type SerialIntervalType = { dataType: KWSERIAL | KWINTERVAL };
export type TextType =
  | { dataType: `${string}[]` }
  | { dataType: KWTINYTEXT | KWTEXT | KWMEDIUMTEXT | KWLONGTEXT };
export type UuidType = { dataType: KWUUID };
